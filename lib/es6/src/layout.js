// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
'use strict';

import * as Block                   from "bs-platform/lib/es6/block";
import * as Curry                   from "bs-platform/lib/es6/curry";
import * as Printf                  from "bs-platform/lib/es6/printf";
import * as $$String                from "bs-platform/lib/es6/string";
import * as Caml_obj                from "bs-platform/lib/es6/caml_obj";
import * as Caml_array              from "bs-platform/lib/es6/caml_array";
import * as Pervasives              from "bs-platform/lib/es6/pervasives";
import * as LayoutPrint             from "./layoutPrint";
import * as LayoutTypes             from "./layoutTypes";
import * as LayoutValue             from "./layoutValue";
import * as LayoutSupport           from "./layoutSupport";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions";

var gCurrentGenerationCount = [0];

var gDepth = [0];

var gPrintTree = /* record */[/* contents : false */0];

var gPrintChanges = /* record */[/* contents : false */0];

var gPrintSkips = /* record */[/* contents : false */0];

var measureString = "measure";

var stretchString = "stretch";

var absMeasureString = "abs-measure";

var absLayoutString = "abs-layout";

var initialString = "initial";

var flexString = "flex";

var spacer = "                                                            ";

function getSpacer(level) {
  var spacerLen = spacer.length;
  var match = +(level > spacerLen);
  var lvl = match !== 0 ? level : spacerLen;
  return $$String.sub(spacer, lvl, spacer.length);
}

function getModeName(param) {
  var isLayoutInsteadOfMeasure = param[1];
  switch (param[0]) {
    case 0 : 
        if (isLayoutInsteadOfMeasure !== 0) {
          return "CSS_MEASURE_MODE_NEGATIVE_ONE_WHATEVER_THAT_MEANS";
        } else {
          return "CSS_MEASURE_MODE_NEGATIVE_ONE_WHATEVER_THAT_MEANS";
        }
    case 1 : 
        if (isLayoutInsteadOfMeasure !== 0) {
          return "LAY_UNDEFINED";
        } else {
          return "UNDEFINED";
        }
    case 2 : 
        if (isLayoutInsteadOfMeasure !== 0) {
          return "LAY_EXACTLY";
        } else {
          return "EXACTLY";
        }
    case 3 : 
        if (isLayoutInsteadOfMeasure !== 0) {
          return "LAY_AT_MOST";
        } else {
          return "AT_MOST";
        }
    
  }
}

function canUseCachedMeasurement(param) {
  var cachedLayout = param[6];
  var heightMeasureMode = param[5];
  var widthMeasureMode = param[4];
  var availableHeight = param[1];
  var availableWidth = param[0];
  if (cachedLayout[/* availableWidth */0] === availableWidth && cachedLayout[/* availableHeight */1] === availableHeight && Caml_obj.caml_equal(cachedLayout[/* widthMeasureMode */2], widthMeasureMode) && Caml_obj.caml_equal(cachedLayout[/* heightMeasureMode */3], heightMeasureMode) || Caml_obj.caml_equal(cachedLayout[/* widthMeasureMode */2], widthMeasureMode) && cachedLayout[/* availableWidth */0] === availableWidth && heightMeasureMode === /* CssMeasureModeExactly */2 && LayoutValue.$neg$dot(availableHeight, param[3]) === cachedLayout[/* computedHeight */5] || Caml_obj.caml_equal(cachedLayout[/* heightMeasureMode */3], heightMeasureMode) && cachedLayout[/* availableHeight */1] === availableHeight && widthMeasureMode === /* CssMeasureModeExactly */2 && LayoutValue.$neg$dot(availableWidth, param[2]) === cachedLayout[/* computedWidth */4]) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function cachedMeasurementAt(layout, i) {
  if (i > 5 || i < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "No cached measurement at " + Pervasives.string_of_int(i)
        ];
  } else {
    switch (i) {
      case 0 : 
          return layout[/* cachedMeasurement1 */12];
      case 1 : 
          return layout[/* cachedMeasurement2 */13];
      case 2 : 
          return layout[/* cachedMeasurement3 */14];
      case 3 : 
          return layout[/* cachedMeasurement4 */15];
      case 4 : 
          return layout[/* cachedMeasurement5 */16];
      case 5 : 
          return layout[/* cachedMeasurement6 */17];
      
    }
  }
}

function layoutNodeInternal(node, availableWidth, availableHeight, parentDirection, widthMeasureMode, heightMeasureMode, performLayout, reason) {
  var layout = node[/* layout */1];
  gDepth[/* contents */0] = gDepth[/* contents */0] + 1 | 0;
  var needToVisitNode = Curry._1(node[/* isDirty */7], node[/* context */8]) && +(layout[/* generationCount */8] !== gCurrentGenerationCount[/* contents */0]) || Caml_obj.caml_notequal(layout[/* lastParentDirection */9], parentDirection);
  if (needToVisitNode) {
    layout[/* nextCachedMeasurementsIndex */11] = 0;
    layout[/* cachedLayout */20][/* widthMeasureMode */2] = /* CSS_MEASURE_MODE_NEGATIVE_ONE_WHATEVER_THAT_MEANS */0;
    layout[/* cachedLayout */20][/* heightMeasureMode */3] = /* CSS_MEASURE_MODE_NEGATIVE_ONE_WHATEVER_THAT_MEANS */0;
  }
  var cachedResults = /* None */0;
  if (node[/* measure */4] !== LayoutSupport.dummyMeasure) {
    var marginAxisRow = LayoutSupport.getMarginAxis(node, /* CssFlexDirectionRow */0);
    var marginAxisColumn = LayoutSupport.getMarginAxis(node, /* CssFlexDirectionColumn */2);
    if (canUseCachedMeasurement(/* tuple */[
            availableWidth,
            availableHeight,
            marginAxisRow,
            marginAxisColumn,
            widthMeasureMode,
            heightMeasureMode,
            layout[/* cachedLayout */20]
          ])) {
      cachedResults = /* Some */[layout[/* cachedLayout */20]];
    } else {
      var foundCached = /* false */0;
      for(var i = 0 ,i_finish = layout[/* nextCachedMeasurementsIndex */11] - 1 | 0; i <= i_finish; ++i){
        if (!foundCached) {
          var cachedMeasurementAtIndex = cachedMeasurementAt(layout, i);
          if (canUseCachedMeasurement(/* tuple */[
                  availableWidth,
                  availableHeight,
                  marginAxisRow,
                  marginAxisColumn,
                  widthMeasureMode,
                  heightMeasureMode,
                  cachedMeasurementAtIndex
                ])) {
            cachedResults = /* Some */[cachedMeasurementAtIndex];
            foundCached = /* true */1;
          }
          
        }
        
      }
    }
  } else if (performLayout) {
    if (layout[/* cachedLayout */20][/* availableWidth */0] === availableWidth && layout[/* cachedLayout */20][/* availableHeight */1] === availableHeight && Caml_obj.caml_equal(layout[/* cachedLayout */20][/* widthMeasureMode */2], widthMeasureMode) && Caml_obj.caml_equal(layout[/* cachedLayout */20][/* heightMeasureMode */3], heightMeasureMode)) {
      cachedResults = /* Some */[layout[/* cachedLayout */20]];
    }
    
  } else {
    var foundCached$1 = /* false */0;
    for(var i$1 = 0 ,i_finish$1 = layout[/* nextCachedMeasurementsIndex */11] - 1 | 0; i$1 <= i_finish$1; ++i$1){
      if (!foundCached$1) {
        var cachedMeasurementAtIndex$1 = cachedMeasurementAt(layout, i$1);
        if (cachedMeasurementAtIndex$1[/* availableWidth */0] === availableWidth && cachedMeasurementAtIndex$1[/* availableHeight */1] === availableHeight && Caml_obj.caml_equal(cachedMeasurementAtIndex$1[/* widthMeasureMode */2], widthMeasureMode) && Caml_obj.caml_equal(cachedMeasurementAtIndex$1[/* heightMeasureMode */3], heightMeasureMode)) {
          cachedResults = /* Some */[cachedMeasurementAtIndex$1];
          foundCached$1 = /* true */1;
        }
        
      }
      
    }
  }
  if (!needToVisitNode && cachedResults !== /* None */0) {
    var match = cachedResults;
    var cachedResults_;
    if (match) {
      cachedResults_ = match[0];
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "Not possible"
          ];
    }
    layout[/* measuredWidth */18] = cachedResults_[/* computedWidth */4];
    layout[/* measuredHeight */19] = cachedResults_[/* computedHeight */5];
    if (gPrintChanges[/* contents */0] && gPrintSkips[/* contents */0]) {
      Curry._2(Printf.printf(/* Format */[
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            ".{[skipped] ",
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "%s%d.{[skipped] "
              ]), getSpacer(gDepth[/* contents */0]), gDepth[/* contents */0]);
      var match$1 = node[/* print */5];
      if (match$1) {
        Curry._1(match$1[0], node[/* context */8]);
      }
      Curry._7(Printf.printf(/* Format */[
                /* String_literal */Block.__(11, [
                    "wm: ",
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ", hm: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    ", aw: ",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* String_literal */Block.__(11, [
                                            " ah: ",
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* String_literal */Block.__(11, [
                                                    " => d: (",
                                                    /* String */Block.__(2, [
                                                        /* No_padding */0,
                                                        /* String_literal */Block.__(11, [
                                                            ", ",
                                                            /* String */Block.__(2, [
                                                                /* No_padding */0,
                                                                /* String_literal */Block.__(11, [
                                                                    ") ",
                                                                    /* String */Block.__(2, [
                                                                        /* No_padding */0,
                                                                        /* Char_literal */Block.__(12, [
                                                                            /* "\n" */10,
                                                                            /* End_of_format */0
                                                                          ])
                                                                      ])
                                                                  ])
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "wm: %s, hm: %s, aw: %s ah: %s => d: (%s, %s) %s\n"
              ]), getModeName(/* tuple */[
                widthMeasureMode,
                performLayout
              ]), getModeName(/* tuple */[
                heightMeasureMode,
                performLayout
              ]), LayoutValue.scalarToString(availableWidth), LayoutValue.scalarToString(availableHeight), LayoutValue.scalarToString(cachedResults_[/* computedWidth */4]), LayoutValue.scalarToString(cachedResults_[/* computedHeight */5]), reason);
    }
    
  } else {
    if (gPrintChanges[/* contents */0]) {
      Curry._3(Printf.printf(/* Format */[
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            ".{",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ])
                      ])
                  ]),
                "%s%d.{%s"
              ]), getSpacer(gDepth[/* contents */0]), gDepth[/* contents */0], needToVisitNode !== 0 ? "*" : "");
      var match$2 = node[/* print */5];
      if (match$2) {
        Curry._1(match$2[0], node[/* context */8]);
      }
      Curry._5(Printf.printf(/* Format */[
                /* String_literal */Block.__(11, [
                    "wm: ",
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ", hm: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    ", aw: ",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* String_literal */Block.__(11, [
                                            " ah: ",
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Char_literal */Block.__(12, [
                                                    /* " " */32,
                                                    /* String */Block.__(2, [
                                                        /* No_padding */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* "\n" */10,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "wm: %s, hm: %s, aw: %s ah: %s %s\n"
              ]), getModeName(/* tuple */[
                widthMeasureMode,
                performLayout
              ]), getModeName(/* tuple */[
                heightMeasureMode,
                performLayout
              ]), LayoutValue.scalarToString(availableWidth), LayoutValue.scalarToString(availableHeight), reason);
    }
    layoutNodeImpl(/* tuple */[
          node,
          availableWidth,
          availableHeight,
          parentDirection,
          widthMeasureMode,
          heightMeasureMode,
          performLayout
        ]);
    if (gPrintChanges[/* contents */0]) {
      Curry._3(Printf.printf(/* Format */[
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            ".}",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ])
                      ])
                  ]),
                "%s%d.}%s"
              ]), getSpacer(gDepth[/* contents */0]), gDepth[/* contents */0], needToVisitNode !== 0 ? "*" : "");
      var match$3 = node[/* print */5];
      if (match$3) {
        Curry._1(match$3[0], node[/* context */8]);
      }
      Curry._5(Printf.printf(/* Format */[
                /* String_literal */Block.__(11, [
                    "wm: ",
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ", hm: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    ", d: (",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* String_literal */Block.__(11, [
                                            ", ",
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* String_literal */Block.__(11, [
                                                    ") ",
                                                    /* String */Block.__(2, [
                                                        /* No_padding */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* "\n" */10,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "wm: %s, hm: %s, d: (%s, %s) %s\n"
              ]), getModeName(/* tuple */[
                widthMeasureMode,
                performLayout
              ]), getModeName(/* tuple */[
                heightMeasureMode,
                performLayout
              ]), LayoutValue.scalarToString(layout[/* measuredWidth */18]), LayoutValue.scalarToString(layout[/* measuredHeight */19]), reason);
    }
    layout[/* lastParentDirection */9] = parentDirection;
    if (!cachedResults) {
      if (layout[/* nextCachedMeasurementsIndex */11] === LayoutTypes.css_max_cached_result_count) {
        if (gPrintChanges[/* contents */0]) {
          Printf.printf(/* Format */[
                /* String_literal */Block.__(11, [
                    "Out of cache entries!\n",
                    /* End_of_format */0
                  ]),
                "Out of cache entries!\n"
              ]);
        }
        layout[/* nextCachedMeasurementsIndex */11] = 0;
      }
      var newCacheEntry;
      if (performLayout !== 0) {
        newCacheEntry = layout[/* cachedLayout */20];
      } else {
        var newCacheEntry_ = cachedMeasurementAt(layout, layout[/* nextCachedMeasurementsIndex */11]);
        layout[/* nextCachedMeasurementsIndex */11] = layout[/* nextCachedMeasurementsIndex */11] + 1 | 0;
        newCacheEntry = newCacheEntry_;
      }
      newCacheEntry[/* availableWidth */0] = availableWidth;
      newCacheEntry[/* availableHeight */1] = availableHeight;
      newCacheEntry[/* widthMeasureMode */2] = widthMeasureMode;
      newCacheEntry[/* heightMeasureMode */3] = heightMeasureMode;
      newCacheEntry[/* computedWidth */4] = layout[/* measuredWidth */18];
      newCacheEntry[/* computedHeight */5] = layout[/* measuredHeight */19];
    }
    
  }
  if (performLayout) {
    node[/* layout */1][/* width */4] = node[/* layout */1][/* measuredWidth */18];
    node[/* layout */1][/* height */5] = node[/* layout */1][/* measuredHeight */19];
    layout[/* hasNewLayout */7] = /* true */1;
  }
  gDepth[/* contents */0] = gDepth[/* contents */0] - 1 | 0;
  layout[/* generationCount */8] = gCurrentGenerationCount[/* contents */0];
  if (needToVisitNode) {
    return /* true */1;
  } else {
    return +(cachedResults === /* None */0);
  }
}

function layoutNodeImpl(param) {
  var performLayout = param[6];
  var heightMeasureMode = param[5];
  var widthMeasureMode = param[4];
  var availableHeight = param[2];
  var availableWidth = param[1];
  var node = param[0];
  var paddingAndBorderAxisRow = LayoutSupport.getPaddingAndBorderAxis(node, /* CssFlexDirectionRow */0);
  var paddingAndBorderAxisColumn = LayoutSupport.getPaddingAndBorderAxis(node, /* CssFlexDirectionColumn */2);
  var marginAxisRow = LayoutSupport.getMarginAxis(node, /* CssFlexDirectionRow */0);
  var marginAxisColumn = LayoutSupport.getMarginAxis(node, /* CssFlexDirectionColumn */2);
  var direction = LayoutSupport.resolveDirection(node, param[3]);
  node[/* layout */1][/* direction */6] = direction;
  if (node[/* measure */4] !== LayoutSupport.dummyMeasure) {
    var innerWidth = LayoutValue.$neg$dot(LayoutValue.$neg$dot(availableWidth, marginAxisRow), paddingAndBorderAxisRow);
    var innerHeight = LayoutValue.$neg$dot(LayoutValue.$neg$dot(availableHeight, marginAxisColumn), paddingAndBorderAxisColumn);
    if (widthMeasureMode === /* CssMeasureModeExactly */2 && heightMeasureMode === /* CssMeasureModeExactly */2) {
      node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, LayoutValue.$neg$dot(availableWidth, marginAxisRow));
      node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, LayoutValue.$neg$dot(availableHeight, marginAxisColumn));
      return /* () */0;
    } else if (innerWidth <= LayoutValue.zero || innerHeight <= LayoutValue.zero) {
      node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, LayoutValue.zero);
      node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, LayoutValue.zero);
      return /* () */0;
    } else {
      var measureDim = Curry._5(node[/* measure */4], node[/* context */8], innerWidth, widthMeasureMode, innerHeight, heightMeasureMode);
      var match = +(widthMeasureMode === /* CssMeasureModeUndefined */1 || widthMeasureMode === /* CssMeasureModeAtMost */3);
      node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, match !== 0 ? LayoutValue.$plus$dot(measureDim[/* width */0], paddingAndBorderAxisRow) : LayoutValue.$neg$dot(availableWidth, marginAxisRow));
      var match$1 = +(heightMeasureMode === /* CssMeasureModeUndefined */1 || heightMeasureMode === /* CssMeasureModeAtMost */3);
      node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, match$1 !== 0 ? LayoutValue.$plus$dot(measureDim[/* height */1], paddingAndBorderAxisColumn) : LayoutValue.$neg$dot(availableHeight, marginAxisColumn));
      return /* () */0;
    }
  } else {
    var childCount = node[/* children */6].length;
    if (childCount) {
      var shouldContinue = /* true */1;
      if (!performLayout) {
        if (widthMeasureMode === /* CssMeasureModeAtMost */3 && availableWidth <= LayoutValue.zero && heightMeasureMode === /* CssMeasureModeAtMost */3 && availableHeight <= LayoutValue.zero) {
          node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, LayoutValue.zero);
          node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, LayoutValue.zero);
          shouldContinue = /* false */0;
        } else if (widthMeasureMode === /* CssMeasureModeAtMost */3 && availableWidth <= LayoutValue.zero) {
          node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, LayoutValue.zero);
          var match$2 = LayoutValue.isUndefined(availableHeight);
          node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, match$2 !== 0 ? LayoutValue.zero : LayoutValue.$neg$dot(availableHeight, marginAxisColumn));
          shouldContinue = /* false */0;
        } else if (heightMeasureMode === /* CssMeasureModeAtMost */3 && availableHeight <= LayoutValue.zero) {
          var match$3 = LayoutValue.isUndefined(availableWidth);
          node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, match$3 !== 0 ? LayoutValue.zero : LayoutValue.$neg$dot(availableWidth, marginAxisRow));
          node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, LayoutValue.zero);
          shouldContinue = /* false */0;
        } else if (widthMeasureMode === /* CssMeasureModeExactly */2 && heightMeasureMode === /* CssMeasureModeExactly */2) {
          node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, LayoutValue.$neg$dot(availableWidth, marginAxisRow));
          node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, LayoutValue.$neg$dot(availableHeight, marginAxisColumn));
          shouldContinue = /* false */0;
        }
        
      }
      if (shouldContinue) {
        var mainAxis = LayoutSupport.resolveAxis(node[/* style */0][/* flexDirection */1], direction);
        var crossAxis = LayoutSupport.getCrossFlexDirection(mainAxis, direction);
        var isMainAxisRow = LayoutSupport.isRowDirection(mainAxis);
        var justifyContent = node[/* style */0][/* justifyContent */2];
        var isNodeFlexWrap = +(node[/* style */0][/* flexWrap */7] === /* CssWrap */1);
        var firstAbsoluteChild = LayoutSupport.theNullNode;
        var currentAbsoluteChild = LayoutSupport.theNullNode;
        var leadingPaddingAndBorderMain = LayoutSupport.getLeadingPaddingAndBorder(node, mainAxis);
        var trailingPaddingAndBorderMain = LayoutSupport.getTrailingPaddingAndBorder(node, mainAxis);
        var leadingPaddingAndBorderCross = LayoutSupport.getLeadingPaddingAndBorder(node, crossAxis);
        var paddingAndBorderAxisMain = LayoutSupport.getPaddingAndBorderAxis(node, mainAxis);
        var paddingAndBorderAxisCross = LayoutSupport.getPaddingAndBorderAxis(node, crossAxis);
        var measureModeMainDim = isMainAxisRow !== 0 ? widthMeasureMode : heightMeasureMode;
        var measureModeCrossDim = isMainAxisRow !== 0 ? heightMeasureMode : widthMeasureMode;
        var availableInnerWidth = LayoutValue.$neg$dot(LayoutValue.$neg$dot(availableWidth, marginAxisRow), paddingAndBorderAxisRow);
        var availableInnerHeight = LayoutValue.$neg$dot(LayoutValue.$neg$dot(availableHeight, marginAxisColumn), paddingAndBorderAxisColumn);
        var availableInnerMainDim = isMainAxisRow !== 0 ? availableInnerWidth : availableInnerHeight;
        var availableInnerCrossDim = isMainAxisRow !== 0 ? availableInnerHeight : availableInnerWidth;
        var child = LayoutSupport.theNullNode;
        var childWidth = LayoutValue.zero;
        var childHeight = LayoutValue.zero;
        var childWidthMeasureMode = /* CssMeasureModeUndefined */1;
        var childHeightMeasureMode = /* CssMeasureModeUndefined */1;
        for(var i = 0 ,i_finish = childCount - 1 | 0; i <= i_finish; ++i){
          child = Caml_array.caml_array_get(node[/* children */6], i);
          if (performLayout) {
            var childDirection = LayoutSupport.resolveDirection(child, direction);
            LayoutSupport.setPosition(child, childDirection);
          }
          if (child[/* style */0][/* positionType */6] === /* CssPositionAbsolute */1) {
            if (firstAbsoluteChild === LayoutSupport.theNullNode) {
              firstAbsoluteChild = child;
            }
            if (currentAbsoluteChild !== LayoutSupport.theNullNode) {
              currentAbsoluteChild[/* nextChild */3] = child;
            }
            currentAbsoluteChild = child;
            child[/* nextChild */3] = LayoutSupport.theNullNode;
          } else if (isMainAxisRow && LayoutSupport.isStyleDimDefined(child, /* CssFlexDirectionRow */0)) {
            child[/* layout */1][/* computedFlexBasis */10] = LayoutSupport.fmaxf(child[/* style */0][/* width */18], LayoutSupport.getPaddingAndBorderAxis(child, /* CssFlexDirectionRow */0));
          } else if (!isMainAxisRow && LayoutSupport.isStyleDimDefined(child, /* CssFlexDirectionColumn */2)) {
            child[/* layout */1][/* computedFlexBasis */10] = LayoutSupport.fmaxf(child[/* style */0][/* height */19], LayoutSupport.getPaddingAndBorderAxis(child, /* CssFlexDirectionColumn */2));
          } else if (!LayoutValue.isUndefined(child[/* style */0][/* flexBasis */11]) && !LayoutValue.isUndefined(availableInnerMainDim)) {
            if (LayoutValue.isUndefined(child[/* layout */1][/* computedFlexBasis */10])) {
              child[/* layout */1][/* computedFlexBasis */10] = LayoutSupport.fmaxf(child[/* style */0][/* flexBasis */11], LayoutSupport.getPaddingAndBorderAxis(child, mainAxis));
            }
            
          } else {
            childWidth = LayoutValue.cssUndefined;
            childHeight = LayoutValue.cssUndefined;
            childWidthMeasureMode = /* CssMeasureModeUndefined */1;
            childHeightMeasureMode = /* CssMeasureModeUndefined */1;
            if (LayoutSupport.isStyleDimDefined(child, /* CssFlexDirectionRow */0)) {
              childWidth = LayoutValue.$plus$dot(child[/* style */0][/* width */18], LayoutSupport.getMarginAxis(child, /* CssFlexDirectionRow */0));
              childWidthMeasureMode = /* CssMeasureModeExactly */2;
            }
            if (LayoutSupport.isStyleDimDefined(child, /* CssFlexDirectionColumn */2)) {
              childHeight = LayoutValue.$plus$dot(child[/* style */0][/* height */19], LayoutSupport.getMarginAxis(child, /* CssFlexDirectionColumn */2));
              childHeightMeasureMode = /* CssMeasureModeExactly */2;
            }
            if (!isMainAxisRow && node[/* style */0][/* overflow */8] === /* Scroll */1 || node[/* style */0][/* overflow */8] !== /* Scroll */1) {
              if (LayoutValue.isUndefined(childWidth) && !LayoutValue.isUndefined(availableInnerWidth)) {
                childWidth = availableInnerWidth;
                childWidthMeasureMode = /* CssMeasureModeAtMost */3;
              }
              
            }
            if (isMainAxisRow && node[/* style */0][/* overflow */8] === /* Scroll */1 || node[/* style */0][/* overflow */8] !== /* Scroll */1) {
              if (LayoutValue.isUndefined(childHeight) && !LayoutValue.isUndefined(availableInnerHeight)) {
                childHeight = availableInnerHeight;
                childHeightMeasureMode = /* CssMeasureModeAtMost */3;
              }
              
            }
            if (!isMainAxisRow && !LayoutValue.isUndefined(availableInnerWidth) && !LayoutSupport.isStyleDimDefined(child, /* CssFlexDirectionRow */0) && widthMeasureMode === /* CssMeasureModeExactly */2 && LayoutSupport.getAlignItem(node, child) === /* CssAlignStretch */4) {
              childWidth = availableInnerWidth;
              childWidthMeasureMode = /* CssMeasureModeExactly */2;
            }
            if (isMainAxisRow && !LayoutValue.isUndefined(availableInnerHeight) && !LayoutSupport.isStyleDimDefined(child, /* CssFlexDirectionColumn */2) && heightMeasureMode === /* CssMeasureModeExactly */2 && LayoutSupport.getAlignItem(node, child) === /* CssAlignStretch */4) {
              childHeight = availableInnerHeight;
              childHeightMeasureMode = /* CssMeasureModeExactly */2;
            }
            layoutNodeInternal(child, childWidth, childHeight, direction, childWidthMeasureMode, childHeightMeasureMode, /* false */0, measureString);
            child[/* layout */1][/* computedFlexBasis */10] = LayoutSupport.fmaxf(isMainAxisRow !== 0 ? child[/* layout */1][/* measuredWidth */18] : child[/* layout */1][/* measuredHeight */19], LayoutSupport.getPaddingAndBorderAxis(child, mainAxis));
          }
        }
        var startOfLineIndex = 0;
        var endOfLineIndex = 0;
        var lineCount = 0;
        var totalLineCrossDim = LayoutValue.zero;
        var maxLineMainDim = LayoutValue.zero;
        while(endOfLineIndex < childCount) {
          var itemsOnLine = 0;
          var sizeConsumedOnCurrentLine = LayoutValue.zero;
          var totalFlexGrowFactors = LayoutValue.zero;
          var totalFlexShrinkScaledFactors = LayoutValue.zero;
          var curIndex = startOfLineIndex;
          var firstRelativeChild = LayoutSupport.theNullNode;
          var currentRelativeChild = LayoutSupport.theNullNode;
          var shouldContinue$1 = /* true */1;
          while(curIndex < childCount && shouldContinue$1) {
            child = Caml_array.caml_array_get(node[/* children */6], curIndex);
            child[/* lineIndex */2] = lineCount;
            if (child[/* style */0][/* positionType */6] !== /* CssPositionAbsolute */1) {
              var outerFlexBasis = LayoutValue.$plus$dot(child[/* layout */1][/* computedFlexBasis */10], LayoutSupport.getMarginAxis(child, mainAxis));
              if (LayoutValue.$plus$dot(sizeConsumedOnCurrentLine, outerFlexBasis) > availableInnerMainDim && isNodeFlexWrap && itemsOnLine > 0) {
                shouldContinue$1 = /* false */0;
              } else {
                sizeConsumedOnCurrentLine = LayoutValue.$plus$dot(sizeConsumedOnCurrentLine, outerFlexBasis);
                itemsOnLine = itemsOnLine + 1 | 0;
                if (LayoutSupport.isFlex(child)) {
                  totalFlexGrowFactors = LayoutValue.$plus$dot(totalFlexGrowFactors, child[/* style */0][/* flexGrow */9]);
                  totalFlexShrinkScaledFactors = LayoutValue.$plus$dot(totalFlexShrinkScaledFactors, LayoutValue.$star$dot(LayoutValue.$tilde$neg$dot(child[/* style */0][/* flexShrink */10]), child[/* layout */1][/* computedFlexBasis */10]));
                }
                if (firstRelativeChild === LayoutSupport.theNullNode) {
                  firstRelativeChild = child;
                }
                if (currentRelativeChild !== LayoutSupport.theNullNode) {
                  currentRelativeChild[/* nextChild */3] = child;
                }
                currentRelativeChild = child;
                child[/* nextChild */3] = LayoutSupport.theNullNode;
                curIndex = curIndex + 1 | 0;
                endOfLineIndex = endOfLineIndex + 1 | 0;
              }
            } else {
              curIndex = curIndex + 1 | 0;
              endOfLineIndex = endOfLineIndex + 1 | 0;
            }
          };
          var canSkipFlex = 1 - performLayout && +(measureModeCrossDim === /* CssMeasureModeExactly */2);
          var leadingMainDim = LayoutValue.zero;
          var betweenMainDim = LayoutValue.zero;
          var remainingFreeSpace = LayoutValue.zero;
          if (LayoutValue.isUndefined(availableInnerMainDim)) {
            if (sizeConsumedOnCurrentLine < LayoutValue.zero) {
              remainingFreeSpace = LayoutValue.$tilde$neg$dot(sizeConsumedOnCurrentLine);
            }
            
          } else {
            remainingFreeSpace = LayoutValue.$neg$dot(availableInnerMainDim, sizeConsumedOnCurrentLine);
          }
          var originalRemainingFreeSpace = remainingFreeSpace;
          var deltaFreeSpace = LayoutValue.zero;
          if (!canSkipFlex) {
            var childFlexBasis = LayoutValue.zero;
            var flexShrinkScaledFactor = LayoutValue.zero;
            var flexGrowFactor = LayoutValue.zero;
            var baseMainSize = LayoutValue.zero;
            var boundMainSize = LayoutValue.zero;
            var deltaFlexShrinkScaledFactors = LayoutValue.zero;
            var deltaFlexGrowFactors = LayoutValue.zero;
            currentRelativeChild = firstRelativeChild;
            while(currentRelativeChild !== LayoutSupport.theNullNode) {
              childFlexBasis = currentRelativeChild[/* layout */1][/* computedFlexBasis */10];
              if (remainingFreeSpace < LayoutValue.zero) {
                flexShrinkScaledFactor = LayoutValue.$star$dot(LayoutValue.$tilde$neg$dot(currentRelativeChild[/* style */0][/* flexShrink */10]), childFlexBasis);
                if (flexShrinkScaledFactor !== LayoutValue.zero) {
                  baseMainSize = LayoutValue.$plus$dot(childFlexBasis, LayoutValue.$slash$dot(LayoutValue.$star$dot(flexShrinkScaledFactor, remainingFreeSpace), totalFlexShrinkScaledFactors));
                  boundMainSize = LayoutSupport.boundAxis(currentRelativeChild, mainAxis, baseMainSize);
                  if (baseMainSize !== boundMainSize) {
                    deltaFreeSpace = LayoutValue.$neg$dot(deltaFreeSpace, LayoutValue.$neg$dot(boundMainSize, childFlexBasis));
                    deltaFlexShrinkScaledFactors = LayoutValue.$neg$dot(deltaFlexShrinkScaledFactors, flexShrinkScaledFactor);
                  }
                  
                }
                
              } else if (remainingFreeSpace > LayoutValue.zero) {
                flexGrowFactor = currentRelativeChild[/* style */0][/* flexGrow */9];
                if (flexGrowFactor !== LayoutValue.zero) {
                  baseMainSize = LayoutValue.$plus$dot(childFlexBasis, LayoutValue.$slash$dot(LayoutValue.$star$dot(flexGrowFactor, remainingFreeSpace), totalFlexGrowFactors));
                  boundMainSize = LayoutSupport.boundAxis(currentRelativeChild, mainAxis, baseMainSize);
                  if (baseMainSize !== boundMainSize) {
                    deltaFreeSpace = LayoutValue.$neg$dot(deltaFreeSpace, LayoutValue.$neg$dot(boundMainSize, childFlexBasis));
                    deltaFlexGrowFactors = LayoutValue.$neg$dot(deltaFlexGrowFactors, flexGrowFactor);
                  }
                  
                }
                
              }
              currentRelativeChild = currentRelativeChild[/* nextChild */3];
            };
            totalFlexShrinkScaledFactors = LayoutValue.$plus$dot(totalFlexShrinkScaledFactors, deltaFlexShrinkScaledFactors);
            totalFlexGrowFactors = LayoutValue.$plus$dot(totalFlexGrowFactors, deltaFlexGrowFactors);
            remainingFreeSpace = LayoutValue.$plus$dot(remainingFreeSpace, deltaFreeSpace);
            deltaFreeSpace = LayoutValue.zero;
            currentRelativeChild = firstRelativeChild;
            while(currentRelativeChild !== LayoutSupport.theNullNode) {
              childFlexBasis = currentRelativeChild[/* layout */1][/* computedFlexBasis */10];
              var updatedMainSize = childFlexBasis;
              if (remainingFreeSpace < LayoutValue.zero) {
                flexShrinkScaledFactor = LayoutValue.$star$dot(LayoutValue.$tilde$neg$dot(currentRelativeChild[/* style */0][/* flexShrink */10]), childFlexBasis);
                if (flexShrinkScaledFactor !== LayoutValue.zero) {
                  updatedMainSize = LayoutSupport.boundAxis(currentRelativeChild, mainAxis, LayoutValue.$plus$dot(childFlexBasis, LayoutValue.$slash$dot(LayoutValue.$star$dot(flexShrinkScaledFactor, remainingFreeSpace), totalFlexShrinkScaledFactors)));
                }
                
              } else if (remainingFreeSpace > LayoutValue.zero) {
                flexGrowFactor = currentRelativeChild[/* style */0][/* flexGrow */9];
                if (flexGrowFactor !== LayoutValue.zero) {
                  updatedMainSize = LayoutSupport.boundAxis(currentRelativeChild, mainAxis, LayoutValue.$plus$dot(childFlexBasis, LayoutValue.$slash$dot(LayoutValue.$star$dot(flexGrowFactor, remainingFreeSpace), totalFlexGrowFactors)));
                }
                
              }
              deltaFreeSpace = LayoutValue.$neg$dot(deltaFreeSpace, LayoutValue.$neg$dot(updatedMainSize, childFlexBasis));
              if (isMainAxisRow) {
                childWidth = LayoutValue.$plus$dot(updatedMainSize, LayoutSupport.getMarginAxis(currentRelativeChild, /* CssFlexDirectionRow */0));
                childWidthMeasureMode = /* CssMeasureModeExactly */2;
                if (!LayoutValue.isUndefined(availableInnerCrossDim) && !LayoutSupport.isStyleDimDefined(currentRelativeChild, /* CssFlexDirectionColumn */2) && heightMeasureMode === /* CssMeasureModeExactly */2 && LayoutSupport.getAlignItem(node, currentRelativeChild) === /* CssAlignStretch */4) {
                  childHeight = availableInnerCrossDim;
                  childHeightMeasureMode = /* CssMeasureModeExactly */2;
                } else if (LayoutSupport.isStyleDimDefined(currentRelativeChild, /* CssFlexDirectionColumn */2)) {
                  childHeight = LayoutValue.$plus$dot(currentRelativeChild[/* style */0][/* height */19], LayoutSupport.getMarginAxis(currentRelativeChild, /* CssFlexDirectionColumn */2));
                  childHeightMeasureMode = /* CssMeasureModeExactly */2;
                } else {
                  childHeight = availableInnerCrossDim;
                  var match$4 = LayoutValue.isUndefined(childHeight);
                  childHeightMeasureMode = match$4 !== 0 ? /* CssMeasureModeUndefined */1 : /* CssMeasureModeAtMost */3;
                }
              } else {
                childHeight = LayoutValue.$plus$dot(updatedMainSize, LayoutSupport.getMarginAxis(currentRelativeChild, /* CssFlexDirectionColumn */2));
                childHeightMeasureMode = /* CssMeasureModeExactly */2;
                if (!LayoutValue.isUndefined(availableInnerCrossDim) && !LayoutSupport.isStyleDimDefined(currentRelativeChild, /* CssFlexDirectionRow */0) && widthMeasureMode === /* CssMeasureModeExactly */2 && LayoutSupport.getAlignItem(node, currentRelativeChild) === /* CssAlignStretch */4) {
                  childWidth = availableInnerCrossDim;
                  childWidthMeasureMode = /* CssMeasureModeExactly */2;
                } else if (LayoutSupport.isStyleDimDefined(currentRelativeChild, /* CssFlexDirectionRow */0)) {
                  childWidth = LayoutValue.$plus$dot(currentRelativeChild[/* style */0][/* width */18], LayoutSupport.getMarginAxis(currentRelativeChild, /* CssFlexDirectionRow */0));
                  childWidthMeasureMode = /* CssMeasureModeExactly */2;
                } else {
                  childWidth = availableInnerCrossDim;
                  var match$5 = LayoutValue.isUndefined(childWidth);
                  childWidthMeasureMode = match$5 !== 0 ? /* CssMeasureModeUndefined */1 : /* CssMeasureModeAtMost */3;
                }
              }
              var requiresStretchLayout = 1 - LayoutSupport.isStyleDimDefined(currentRelativeChild, crossAxis) && +(LayoutSupport.getAlignItem(node, currentRelativeChild) === /* CssAlignStretch */4);
              layoutNodeInternal(currentRelativeChild, childWidth, childHeight, direction, childWidthMeasureMode, childHeightMeasureMode, performLayout && 1 - requiresStretchLayout, flexString);
              currentRelativeChild = currentRelativeChild[/* nextChild */3];
            };
          }
          remainingFreeSpace = LayoutValue.$plus$dot(originalRemainingFreeSpace, deltaFreeSpace);
          if (measureModeMainDim === /* CssMeasureModeAtMost */3) {
            remainingFreeSpace = LayoutValue.zero;
          }
          switch (justifyContent) {
            case 0 : 
                break;
            case 1 : 
                leadingMainDim = LayoutValue.divideScalarByInt(remainingFreeSpace, 2);
                break;
            case 2 : 
                leadingMainDim = remainingFreeSpace;
                break;
            case 3 : 
                betweenMainDim = itemsOnLine > 1 ? LayoutValue.divideScalarByInt(LayoutSupport.fmaxf(remainingFreeSpace, LayoutValue.zero), itemsOnLine - 1 | 0) : LayoutValue.zero;
                break;
            case 4 : 
                betweenMainDim = LayoutValue.divideScalarByInt(remainingFreeSpace, itemsOnLine);
                leadingMainDim = LayoutValue.divideScalarByInt(betweenMainDim, 2);
                break;
            
          }
          var mainDim = LayoutValue.$plus$dot(leadingPaddingAndBorderMain, leadingMainDim);
          var crossDim = LayoutValue.zero;
          for(var i$1 = startOfLineIndex ,i_finish$1 = endOfLineIndex - 1 | 0; i$1 <= i_finish$1; ++i$1){
            child = Caml_array.caml_array_get(node[/* children */6], i$1);
            if (child[/* style */0][/* positionType */6] === /* CssPositionAbsolute */1 && LayoutSupport.isLeadingPosDefinedWithFallback(child, mainAxis)) {
              if (performLayout) {
                LayoutSupport.setLayoutLeadingPositionForAxis(child, mainAxis, LayoutValue.$plus$dot(LayoutValue.$plus$dot(LayoutSupport.getLeadingPositionWithFallback(child, mainAxis), LayoutSupport.getLeadingBorder(node, mainAxis)), LayoutSupport.getLeadingMargin(child, mainAxis)));
              }
              
            } else {
              if (performLayout) {
                LayoutSupport.setLayoutLeadingPositionForAxis(child, mainAxis, LayoutValue.$plus$dot(LayoutSupport.layoutPosPositionForAxis(child, mainAxis), mainDim));
              }
              if (!child[/* style */0][/* positionType */6]) {
                if (canSkipFlex) {
                  mainDim = LayoutValue.$plus$dot(LayoutValue.$plus$dot(LayoutValue.$plus$dot(mainDim, betweenMainDim), LayoutSupport.getMarginAxis(child, mainAxis)), child[/* layout */1][/* computedFlexBasis */10]);
                  crossDim = availableInnerCrossDim;
                } else {
                  mainDim = LayoutValue.$plus$dot(LayoutValue.$plus$dot(mainDim, betweenMainDim), LayoutSupport.getDimWithMargin(child, mainAxis));
                  crossDim = LayoutSupport.fmaxf(crossDim, LayoutSupport.getDimWithMargin(child, crossAxis));
                }
              }
              
            }
          }
          mainDim = LayoutValue.$plus$dot(mainDim, trailingPaddingAndBorderMain);
          var containerCrossAxis = availableInnerCrossDim;
          if (measureModeCrossDim === /* CssMeasureModeUndefined */1 || measureModeCrossDim === /* CssMeasureModeAtMost */3) {
            containerCrossAxis = LayoutValue.$neg$dot(LayoutSupport.boundAxis(node, crossAxis, LayoutValue.$plus$dot(crossDim, paddingAndBorderAxisCross)), paddingAndBorderAxisCross);
            if (measureModeCrossDim === /* CssMeasureModeAtMost */3) {
              containerCrossAxis = LayoutSupport.fminf(containerCrossAxis, availableInnerCrossDim);
            }
            
          }
          if (!isNodeFlexWrap && measureModeCrossDim === /* CssMeasureModeExactly */2) {
            crossDim = availableInnerCrossDim;
          }
          crossDim = LayoutValue.$neg$dot(LayoutSupport.boundAxis(node, crossAxis, LayoutValue.$plus$dot(crossDim, paddingAndBorderAxisCross)), paddingAndBorderAxisCross);
          if (performLayout) {
            for(var i$2 = startOfLineIndex ,i_finish$2 = endOfLineIndex - 1 | 0; i$2 <= i_finish$2; ++i$2){
              child = Caml_array.caml_array_get(node[/* children */6], i$2);
              if (child[/* style */0][/* positionType */6] === /* CssPositionAbsolute */1) {
                if (LayoutSupport.isLeadingPosDefinedWithFallback(child, crossAxis)) {
                  LayoutSupport.setLayoutLeadingPositionForAxis(child, crossAxis, LayoutValue.$plus$dot(LayoutValue.$plus$dot(LayoutSupport.getLeadingPositionWithFallback(child, crossAxis), LayoutSupport.getLeadingBorder(node, crossAxis)), LayoutSupport.getLeadingMargin(child, crossAxis)));
                } else {
                  LayoutSupport.setLayoutLeadingPositionForAxis(child, crossAxis, LayoutValue.$plus$dot(leadingPaddingAndBorderCross, LayoutSupport.getLeadingMargin(child, crossAxis)));
                }
              } else {
                var leadingCrossDim = leadingPaddingAndBorderCross;
                var alignItem = LayoutSupport.getAlignItem(node, child);
                if (alignItem === /* CssAlignStretch */4) {
                  childWidth = LayoutValue.$plus$dot(child[/* layout */1][/* measuredWidth */18], LayoutSupport.getMarginAxis(child, /* CssFlexDirectionRow */0));
                  childHeight = LayoutValue.$plus$dot(child[/* layout */1][/* measuredHeight */19], LayoutSupport.getMarginAxis(child, /* CssFlexDirectionColumn */2));
                  var isCrossSizeDefinite = /* false */0;
                  if (isMainAxisRow) {
                    isCrossSizeDefinite = LayoutSupport.isStyleDimDefined(child, /* CssFlexDirectionColumn */2);
                    childHeight = crossDim;
                  } else {
                    isCrossSizeDefinite = LayoutSupport.isStyleDimDefined(child, /* CssFlexDirectionRow */0);
                    childWidth = crossDim;
                  }
                  if (!isCrossSizeDefinite) {
                    var match$6 = LayoutValue.isUndefined(childWidth);
                    childWidthMeasureMode = match$6 !== 0 ? /* CssMeasureModeUndefined */1 : /* CssMeasureModeExactly */2;
                    var match$7 = LayoutValue.isUndefined(childHeight);
                    childHeightMeasureMode = match$7 !== 0 ? /* CssMeasureModeUndefined */1 : /* CssMeasureModeExactly */2;
                    layoutNodeInternal(child, childWidth, childHeight, direction, childWidthMeasureMode, childHeightMeasureMode, /* true */1, stretchString);
                  }
                  
                } else if (alignItem !== /* CssAlignFlexStart */1) {
                  var remainingCrossDim = LayoutValue.$neg$dot(containerCrossAxis, LayoutSupport.getDimWithMargin(child, crossAxis));
                  leadingCrossDim = alignItem === /* CssAlignCenter */2 ? LayoutValue.$plus$dot(leadingCrossDim, LayoutValue.divideScalarByInt(remainingCrossDim, 2)) : LayoutValue.$plus$dot(leadingCrossDim, remainingCrossDim);
                }
                LayoutSupport.setLayoutLeadingPositionForAxis(child, crossAxis, LayoutValue.$plus$dot(LayoutValue.$plus$dot(LayoutSupport.layoutPosPositionForAxis(child, crossAxis), totalLineCrossDim), leadingCrossDim));
              }
            }
          }
          totalLineCrossDim = LayoutValue.$plus$dot(totalLineCrossDim, crossDim);
          maxLineMainDim = LayoutSupport.fmaxf(maxLineMainDim, mainDim);
          lineCount = lineCount + 1 | 0;
          startOfLineIndex = endOfLineIndex;
        };
        if (lineCount > 1 && performLayout && !LayoutValue.isUndefined(availableInnerCrossDim)) {
          var remainingAlignContentDim = LayoutValue.$neg$dot(availableInnerCrossDim, totalLineCrossDim);
          var crossDimLead = LayoutValue.zero;
          var currentLead = leadingPaddingAndBorderCross;
          var alignContent = node[/* style */0][/* alignContent */3];
          if (alignContent === /* CssAlignFlexEnd */3) {
            currentLead = LayoutValue.$plus$dot(currentLead, remainingAlignContentDim);
          } else if (alignContent === /* CssAlignCenter */2) {
            currentLead = LayoutValue.$plus$dot(currentLead, LayoutValue.divideScalarByInt(remainingAlignContentDim, 2));
          } else if (alignContent === /* CssAlignStretch */4) {
            if (availableInnerCrossDim > totalLineCrossDim) {
              crossDimLead = LayoutValue.divideScalarByInt(remainingAlignContentDim, lineCount);
            }
            
          }
          var endIndex = 0;
          for(var i$3 = 0 ,i_finish$3 = lineCount - 1 | 0; i$3 <= i_finish$3; ++i$3){
            var startIndex = endIndex;
            var j = startIndex;
            var lineHeight = LayoutValue.zero;
            var shouldContinue$2 = /* false */0;
            while(j < childCount && shouldContinue$2) {
              child = Caml_array.caml_array_get(node[/* children */6], j);
              if (!child[/* style */0][/* positionType */6]) {
                if (child[/* lineIndex */2] !== i$3) {
                  shouldContinue$2 = /* false */0;
                } else if (LayoutSupport.isLayoutDimDefined(child, crossAxis)) {
                  lineHeight = LayoutSupport.fmaxf(lineHeight, LayoutValue.$plus$dot(LayoutSupport.layoutMeasuredDimensionForAxis(child, crossAxis), LayoutSupport.getMarginAxis(child, crossAxis)));
                }
                
              }
              j = j + 1 | 0;
            };
            endIndex = j;
            lineHeight = LayoutValue.$plus$dot(lineHeight, crossDimLead);
            if (performLayout) {
              for(var j$1 = startIndex ,j_finish = endIndex - 1 | 0; j$1 <= j_finish; ++j$1){
                child = Caml_array.caml_array_get(node[/* children */6], j$1);
                if (!child[/* style */0][/* positionType */6]) {
                  var match$8 = LayoutSupport.getAlignItem(node, child);
                  var exit = 0;
                  switch (match$8) {
                    case 0 : 
                        throw [
                              Caml_builtin_exceptions.invalid_argument,
                              "getAlignItem should never return auto"
                            ];
                    case 2 : 
                        childHeight = LayoutSupport.layoutMeasuredDimensionForAxis(child, crossAxis);
                        LayoutSupport.setLayoutLeadingPositionForAxis(child, crossAxis, LayoutValue.$plus$dot(currentLead, LayoutValue.divideScalarByInt(LayoutValue.$neg$dot(lineHeight, childHeight), 2)));
                        break;
                    case 3 : 
                        LayoutSupport.setLayoutLeadingPositionForAxis(child, crossAxis, LayoutValue.$neg$dot(LayoutValue.$neg$dot(LayoutValue.$plus$dot(currentLead, lineHeight), LayoutSupport.getTrailingMargin(child, crossAxis)), LayoutSupport.layoutMeasuredDimensionForAxis(child, crossAxis)));
                        break;
                    case 1 : 
                    case 4 : 
                        exit = 1;
                        break;
                    
                  }
                  if (exit === 1) {
                    LayoutSupport.setLayoutLeadingPositionForAxis(child, crossAxis, LayoutValue.$plus$dot(currentLead, LayoutSupport.getLeadingMargin(child, crossAxis)));
                  }
                  
                }
                
              }
            }
            currentLead = LayoutValue.$plus$dot(currentLead, lineHeight);
          }
        }
        node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, LayoutValue.$neg$dot(availableWidth, marginAxisRow));
        node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, LayoutValue.$neg$dot(availableHeight, marginAxisColumn));
        if (measureModeMainDim === /* CssMeasureModeUndefined */1) {
          LayoutSupport.setLayoutMeasuredDimensionForAxis(node, mainAxis, LayoutSupport.boundAxis(node, mainAxis, maxLineMainDim));
        } else if (measureModeMainDim === /* CssMeasureModeAtMost */3) {
          LayoutSupport.setLayoutMeasuredDimensionForAxis(node, mainAxis, LayoutSupport.fmaxf(LayoutSupport.fminf(LayoutValue.$plus$dot(availableInnerMainDim, paddingAndBorderAxisMain), LayoutSupport.boundAxisWithinMinAndMax(node, mainAxis, maxLineMainDim)), paddingAndBorderAxisMain));
        }
        if (measureModeCrossDim === /* CssMeasureModeUndefined */1) {
          LayoutSupport.setLayoutMeasuredDimensionForAxis(node, crossAxis, LayoutSupport.boundAxis(node, crossAxis, LayoutValue.$plus$dot(totalLineCrossDim, paddingAndBorderAxisCross)));
        } else if (measureModeCrossDim === /* CssMeasureModeAtMost */3) {
          LayoutSupport.setLayoutMeasuredDimensionForAxis(node, crossAxis, LayoutSupport.fmaxf(LayoutSupport.fminf(LayoutValue.$plus$dot(availableInnerCrossDim, paddingAndBorderAxisCross), LayoutSupport.boundAxisWithinMinAndMax(node, crossAxis, LayoutValue.$plus$dot(totalLineCrossDim, paddingAndBorderAxisCross))), paddingAndBorderAxisCross));
        }
        currentAbsoluteChild = firstAbsoluteChild;
        while(currentAbsoluteChild !== LayoutSupport.theNullNode) {
          if (performLayout) {
            childWidth = LayoutValue.cssUndefined;
            childHeight = LayoutValue.cssUndefined;
            if (LayoutSupport.isStyleDimDefined(currentAbsoluteChild, /* CssFlexDirectionRow */0)) {
              childWidth = LayoutValue.$plus$dot(currentAbsoluteChild[/* style */0][/* width */18], LayoutSupport.getMarginAxis(currentAbsoluteChild, /* CssFlexDirectionRow */0));
            } else if (LayoutSupport.isLeadingPosDefinedWithFallback(currentAbsoluteChild, /* CssFlexDirectionRow */0) && LayoutSupport.isTrailingPosDefinedWithFallback(currentAbsoluteChild, /* CssFlexDirectionRow */0)) {
              childWidth = LayoutValue.$neg$dot(LayoutValue.$neg$dot(node[/* layout */1][/* measuredWidth */18], LayoutValue.$plus$dot(LayoutSupport.getLeadingBorder(node, /* CssFlexDirectionRow */0), LayoutSupport.getTrailingBorder(node, /* CssFlexDirectionRow */0))), LayoutValue.$plus$dot(LayoutSupport.getLeadingPositionWithFallback(currentAbsoluteChild, /* CssFlexDirectionRow */0), LayoutSupport.getTrailingPositionWithFallback(currentAbsoluteChild, /* CssFlexDirectionRow */0)));
              childWidth = LayoutSupport.boundAxis(currentAbsoluteChild, /* CssFlexDirectionRow */0, childWidth);
            }
            if (LayoutSupport.isStyleDimDefined(currentAbsoluteChild, /* CssFlexDirectionColumn */2)) {
              childHeight = LayoutValue.$plus$dot(currentAbsoluteChild[/* style */0][/* height */19], LayoutSupport.getMarginAxis(currentAbsoluteChild, /* CssFlexDirectionColumn */2));
            } else if (LayoutSupport.isLeadingPosDefinedWithFallback(currentAbsoluteChild, /* CssFlexDirectionColumn */2) && LayoutSupport.isTrailingPosDefinedWithFallback(currentAbsoluteChild, /* CssFlexDirectionColumn */2)) {
              childHeight = LayoutValue.$neg$dot(LayoutValue.$neg$dot(node[/* layout */1][/* measuredHeight */19], LayoutValue.$plus$dot(LayoutSupport.getLeadingBorder(node, /* CssFlexDirectionColumn */2), LayoutSupport.getTrailingBorder(node, /* CssFlexDirectionColumn */2))), LayoutValue.$plus$dot(LayoutSupport.getLeadingPositionWithFallback(currentAbsoluteChild, /* CssFlexDirectionColumn */2), LayoutSupport.getTrailingPositionWithFallback(currentAbsoluteChild, /* CssFlexDirectionColumn */2)));
              childHeight = LayoutSupport.boundAxis(currentAbsoluteChild, /* CssFlexDirectionColumn */2, childHeight);
            }
            if (LayoutValue.isUndefined(childWidth) || LayoutValue.isUndefined(childHeight)) {
              var match$9 = LayoutValue.isUndefined(childWidth);
              childWidthMeasureMode = match$9 !== 0 ? /* CssMeasureModeUndefined */1 : /* CssMeasureModeExactly */2;
              var match$10 = LayoutValue.isUndefined(childHeight);
              childHeightMeasureMode = match$10 !== 0 ? /* CssMeasureModeUndefined */1 : /* CssMeasureModeExactly */2;
              if (!isMainAxisRow && LayoutValue.isUndefined(childWidth) && !LayoutValue.isUndefined(availableInnerWidth)) {
                childWidth = availableInnerWidth;
                childWidthMeasureMode = /* CssMeasureModeAtMost */3;
              }
              layoutNodeInternal(currentAbsoluteChild, childWidth, childHeight, direction, childWidthMeasureMode, childHeightMeasureMode, /* false */0, absMeasureString);
              childWidth = LayoutValue.$plus$dot(currentAbsoluteChild[/* layout */1][/* measuredWidth */18], LayoutSupport.getMarginAxis(currentAbsoluteChild, /* CssFlexDirectionRow */0));
              childHeight = LayoutValue.$plus$dot(currentAbsoluteChild[/* layout */1][/* measuredHeight */19], LayoutSupport.getMarginAxis(currentAbsoluteChild, /* CssFlexDirectionColumn */2));
            }
            layoutNodeInternal(currentAbsoluteChild, childWidth, childHeight, direction, /* CssMeasureModeExactly */2, /* CssMeasureModeExactly */2, /* true */1, absLayoutString);
            if (LayoutSupport.isTrailingPosDefinedWithFallback(currentAbsoluteChild, mainAxis) && !LayoutSupport.isLeadingPosDefinedWithFallback(currentAbsoluteChild, mainAxis)) {
              LayoutSupport.setLayoutLeadingPositionForAxis(currentAbsoluteChild, mainAxis, LayoutValue.$neg$dot(LayoutValue.$neg$dot(LayoutSupport.layoutMeasuredDimensionForAxis(node, mainAxis), LayoutSupport.layoutMeasuredDimensionForAxis(currentAbsoluteChild, mainAxis)), LayoutSupport.getTrailingPositionWithFallback(currentAbsoluteChild, mainAxis)));
            }
            if (LayoutSupport.isTrailingPosDefinedWithFallback(currentAbsoluteChild, crossAxis) && !LayoutSupport.isLeadingPosDefinedWithFallback(currentAbsoluteChild, crossAxis)) {
              LayoutSupport.setLayoutLeadingPositionForAxis(currentAbsoluteChild, crossAxis, LayoutValue.$neg$dot(LayoutValue.$neg$dot(LayoutSupport.layoutMeasuredDimensionForAxis(node, crossAxis), LayoutSupport.layoutMeasuredDimensionForAxis(currentAbsoluteChild, crossAxis)), LayoutSupport.getTrailingPositionWithFallback(currentAbsoluteChild, crossAxis)));
            }
            
          }
          currentAbsoluteChild = currentAbsoluteChild[/* nextChild */3];
        };
        if (performLayout) {
          var needsMainTrailingPos = +(mainAxis === /* CssFlexDirectionRowReverse */1 || mainAxis === /* CssFlexDirectionColumnReverse */3);
          var needsCrossTrailingPos = +(crossAxis === /* CssFlexDirectionRowReverse */1 || crossAxis === /* CssFlexDirectionColumnReverse */3);
          if (needsMainTrailingPos || needsCrossTrailingPos) {
            for(var i$4 = 0 ,i_finish$4 = childCount - 1 | 0; i$4 <= i_finish$4; ++i$4){
              var child$1 = Caml_array.caml_array_get(node[/* children */6], i$4);
              if (needsMainTrailingPos) {
                LayoutSupport.setTrailingPosition(node, child$1, mainAxis);
              }
              if (needsCrossTrailingPos) {
                LayoutSupport.setTrailingPosition(node, child$1, crossAxis);
              }
              
            }
            return /* () */0;
          } else {
            return 0;
          }
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    } else {
      var match$11 = +(widthMeasureMode === /* CssMeasureModeUndefined */1 || widthMeasureMode === /* CssMeasureModeAtMost */3);
      node[/* layout */1][/* measuredWidth */18] = LayoutSupport.boundAxis(node, /* CssFlexDirectionRow */0, match$11 !== 0 ? paddingAndBorderAxisRow : LayoutValue.$neg$dot(availableWidth, marginAxisRow));
      var match$12 = +(heightMeasureMode === /* CssMeasureModeUndefined */1 || heightMeasureMode === /* CssMeasureModeAtMost */3);
      node[/* layout */1][/* measuredHeight */19] = LayoutSupport.boundAxis(node, /* CssFlexDirectionColumn */2, match$12 !== 0 ? paddingAndBorderAxisColumn : LayoutValue.$neg$dot(availableHeight, marginAxisColumn));
      return /* () */0;
    }
  }
}

function layoutNode(node, availableWidth, availableHeight, parentDirection) {
  gCurrentGenerationCount[/* contents */0] = gCurrentGenerationCount[/* contents */0] + 1 | 0;
  var match = LayoutValue.isUndefined(availableWidth) ? (
      LayoutSupport.isStyleDimDefined(node, /* CssFlexDirectionRow */0) ? /* tuple */[
          LayoutValue.$plus$dot(node[/* style */0][/* width */18], LayoutSupport.getMarginAxis(node, /* CssFlexDirectionRow */0)),
          /* CssMeasureModeExactly */2
        ] : (
          node[/* style */0][/* maxWidth */22] >= LayoutValue.zero ? /* tuple */[
              node[/* style */0][/* maxWidth */22],
              /* CssMeasureModeAtMost */3
            ] : /* tuple */[
              availableWidth,
              /* CssMeasureModeUndefined */1
            ]
        )
    ) : /* tuple */[
      availableWidth,
      /* CssMeasureModeExactly */2
    ];
  var match$1 = LayoutValue.isUndefined(availableHeight) ? (
      LayoutSupport.isStyleDimDefined(node, /* CssFlexDirectionColumn */2) ? /* tuple */[
          LayoutValue.$plus$dot(node[/* style */0][/* height */19], LayoutSupport.getMarginAxis(node, /* CssFlexDirectionColumn */2)),
          /* CssMeasureModeExactly */2
        ] : (
          node[/* style */0][/* maxHeight */23] >= LayoutValue.zero ? /* tuple */[
              node[/* style */0][/* maxHeight */23],
              /* CssMeasureModeAtMost */3
            ] : /* tuple */[
              availableHeight,
              /* CssMeasureModeUndefined */1
            ]
        )
    ) : /* tuple */[
      availableHeight,
      /* CssMeasureModeExactly */2
    ];
  if (layoutNodeInternal(node, match[0], match$1[0], parentDirection, match[1], match$1[1], /* true */1, initialString)) {
    LayoutSupport.setPosition(node, node[/* layout */1][/* direction */6]);
    if (gPrintTree[/* contents */0]) {
      return LayoutPrint.printCssNode(/* tuple */[
                  node,
                  /* record */[
                    /* printLayout : true */1,
                    /* printStyle : true */1,
                    /* printChildren : true */1
                  ]
                ]);
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

export {
  gCurrentGenerationCount ,
  gDepth                  ,
  gPrintTree              ,
  gPrintChanges           ,
  gPrintSkips             ,
  measureString           ,
  stretchString           ,
  absMeasureString        ,
  absLayoutString         ,
  initialString           ,
  flexString              ,
  spacer                  ,
  getSpacer               ,
  getModeName             ,
  canUseCachedMeasurement ,
  cachedMeasurementAt     ,
  layoutNodeInternal      ,
  layoutNodeImpl          ,
  layoutNode              ,
  
}
/* No side effect */
