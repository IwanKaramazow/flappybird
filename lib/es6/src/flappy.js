// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
'use strict';

import * as List          from "bs-platform/lib/es6/list";
import * as Curry         from "bs-platform/lib/es6/curry";
import * as Utils         from "./utils";
import * as Random        from "bs-platform/lib/es6/random";
import * as Reprocessing  from "./reprocessing";
import * as Drawfunctions from "./drawfunctions";

function sineWave(y, timeDelta) {
  return y + 0.5 * Curry._1(Utils.PUtils[/* sin */33], 1.5 * timeDelta / 20);
}

function setup(env) {
  Curry._3(Drawfunctions.P[/* size */17], 256, 256, env);
  var flappyBase = Curry._2(Drawfunctions.P[/* loadImage */19], env, "./sprites/padded_lala2.png");
  var bg = Curry._2(Drawfunctions.P[/* loadImage */19], env, "./sprites/bg2.png");
  var grass = Curry._2(Drawfunctions.P[/* loadImage */19], env, "./sprites/grass2.png");
  var upper = Curry._2(Drawfunctions.P[/* loadImage */19], env, "./sprites/upper.png");
  var lower = Curry._2(Drawfunctions.P[/* loadImage */19], env, "./sprites/lower2.png");
  return /* record */[
          /* imageTable : record */[
            /* flappyBase */flappyBase,
            /* bg */bg,
            /* grass */grass,
            /* upper */upper,
            /* lower */lower
          ],
          /* flappyY */100,
          /* timeDelta */0,
          /* currentTime */0.0,
          /* jumpCount */0,
          /* jumpStart */0,
          /* pillars : [] */0,
          /* started : false */0
        ];
}

function translate(startPos, vel, time) {
  return Math.floor(startPos + time * vel);
}

function updatePillars(state) {
  var match = state[/* started */7];
  if (match !== 0) {
    var pillars = List.map(function (pillar) {
          var nexPos = translate(pillar[/* posX */1], -0.005, state[/* currentTime */3] - pillar[/* startTime */0]);
          return /* float array */[
                  pillar[/* startTime */0],
                  nexPos,
                  pillar[/* gap */2],
                  pillar[/* posY */3]
                ];
        }, List.filter(function (param) {
                return +(param[/* posX */1] > -20);
              })(state[/* pillars */6]));
    var match$1 = +(List.length(state[/* pillars */6]) < 3);
    var newPillars;
    if (match$1 !== 0) {
      var match$2 = state[/* pillars */6];
      var initialPosition = match$2 ? match$2[0][/* posX */1] + 120 : 300;
      var gap = Random.$$float(15);
      var posY = Random.$$float(40);
      newPillars = /* :: */[
        /* float array */[
          state[/* currentTime */3],
          initialPosition,
          gap,
          posY
        ],
        pillars
      ];
    } else {
      newPillars = pillars;
    }
    var newrecord = state.slice();
    newrecord[/* pillars */6] = newPillars;
    return newrecord;
  } else {
    return state;
  }
}

function updateFlappy(state) {
  var match = +(state[/* jumpCount */4] === 0);
  var flappyY;
  if (match !== 0) {
    flappyY = sineWave(state[/* flappyY */1], state[/* timeDelta */2]);
  } else {
    var z = 2.9 - state[/* timeDelta */2] * 0.09;
    flappyY = state[/* flappyY */1] - z;
  }
  var newrecord = state.slice();
  newrecord[/* flappyY */1] = flappyY;
  return newrecord;
}

function updateTime(state) {
  var timestamp = state[/* currentTime */3] + 1;
  var timeDelta = timestamp - state[/* jumpStart */5];
  var newrecord = state.slice();
  newrecord[/* timeDelta */2] = timeDelta;
  newrecord[/* currentTime */3] = timestamp;
  return newrecord;
}

function flappy(flappyBase, flappyY, env) {
  var match = +(flappyY > 188);
  var y = match !== 0 ? 187 : flappyY | 0;
  return Curry._4(Drawfunctions.P[/* image */20], flappyBase, 105, y, env);
}

function draw(st, env) {
  Curry._2(Drawfunctions.P[/* background */39], Utils.PConstants[/* white */0], env);
  Curry._4(Drawfunctions.P[/* image */20], st[/* imageTable */0][/* bg */1], -56, 0, env);
  Curry._4(Drawfunctions.P[/* image */20], st[/* imageTable */0][/* bg */1], 82, 0, env);
  List.iter(function (pillar) {
        var pos = pillar[/* posX */1] | 0;
        var g = pillar[/* gap */2] / 2 | 0;
        var startY = pillar[/* posY */3] | 0;
        Curry._4(Drawfunctions.P[/* image */20], st[/* imageTable */0][/* upper */3], pos, (-120 - startY | 0) - g | 0, env);
        return Curry._4(Drawfunctions.P[/* image */20], st[/* imageTable */0][/* lower */4], pos, (100 - startY | 0) + g | 0, env);
      }, st[/* pillars */6]);
  var movingGrass = translate(12, -1, st[/* currentTime */3]) % 168 | 0;
  Curry._4(Drawfunctions.P[/* image */20], st[/* imageTable */0][/* grass */2], -52 + movingGrass | 0, 196, env);
  Curry._4(Drawfunctions.P[/* image */20], st[/* imageTable */0][/* grass */2], 116 + movingGrass | 0, 196, env);
  Curry._4(Drawfunctions.P[/* image */20], st[/* imageTable */0][/* grass */2], 284 + movingGrass | 0, 196, env);
  flappy(st[/* imageTable */0][/* flappyBase */0], st[/* flappyY */1], env);
  return updatePillars(updateTime(updateFlappy(st)));
}

function keyPressed(state, env) {
  var match = Curry._1(Drawfunctions.P[/* keyCode */5], env);
  if (match !== 4) {
    return state;
  } else {
    console.log("space!");
    return /* record */[
            /* imageTable */state[/* imageTable */0],
            /* flappyY */state[/* flappyY */1],
            /* timeDelta */state[/* timeDelta */2],
            /* currentTime */state[/* currentTime */3],
            /* jumpCount */state[/* jumpCount */4] + 1,
            /* jumpStart */state[/* currentTime */3],
            /* pillars */state[/* pillars */6],
            /* started : true */1
          ];
  }
}

Curry.app(Reprocessing.ReProcessor[/* run */0], [
      setup,
      /* Some */[draw],
      /* None */0,
      /* None */0,
      /* None */0,
      /* None */0,
      /* Some */[keyPressed],
      /* None */0,
      /* None */0,
      /* () */0
    ]);

var initialVelocity = 2.9;

var gravity = 0.09;

var pillarSpacing = 120;

export {
  initialVelocity ,
  gravity         ,
  pillarSpacing   ,
  sineWave        ,
  setup           ,
  translate       ,
  updatePillars   ,
  updateFlappy    ,
  updateTime      ,
  flappy          ,
  draw            ,
  keyPressed      ,
  
}
/*  Not a pure module */
