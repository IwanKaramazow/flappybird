// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
'use strict';

var List          = require("bs-platform/lib/js/list");
var Curry         = require("bs-platform/lib/js/curry");
var Utils         = require("./utils");
var Caml_int32    = require("bs-platform/lib/js/caml_int32");
var Reprocessing  = require("./reprocessing");
var Drawfunctions = require("./drawfunctions");

function make(w, param, time) {
  var z = Curry._2(Utils.PUtils[/* random */17], 0, 20);
  return /* record */[
          /* x */Curry._2(Utils.PUtils[/* random */17], 0, w),
          /* y */Curry._2(Utils.PUtils[/* random */17], param[0], param[1]),
          /* z */z,
          /* len */Curry._5(Utils.PUtils[/* remap */14], z, 0, 20, 10, 20),
          /* yspeed */Curry._5(Utils.PUtils[/* remap */14], z, 0, 20, 5, 15),
          /* color */Curry._3(Utils.PUtils[/* lerpColor */25], Utils.PConstants[/* white */0], Curry._3(Utils.PUtils[/* color */1], 138, 43, 226), Curry._2(Utils.PUtils[/* randomf */16], 0.3, 1)),
          /* time */time
        ];
}

function init(n, f) {
  var _n = n;
  var f$1 = f;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var n$1 = _n;
    if (n$1 !== 0) {
      _acc = /* :: */[
        Curry._1(f$1, n$1),
        acc
      ];
      _n = n$1 - 1 | 0;
      continue ;
      
    } else {
      return List.rev(acc);
    }
  };
}

function setup(env) {
  Curry._3(Drawfunctions.P[/* size */17], 640, 360, env);
  Curry._2(Drawfunctions.P[/* fill */8], Curry._3(Utils.PUtils[/* color */1], 255, 0, 0), env);
  Curry._1(Drawfunctions.P[/* noStroke */11], env);
  var lst = init(500, function () {
        return make(Curry._1(Drawfunctions.P[/* width */0], env), /* tuple */[
                    -500,
                    -50
                  ], 0);
      });
  return /* record */[
          /* lst */lst,
          /* running : true */1,
          /* time */0
        ];
}

function draw(param, env) {
  var time = param[/* time */2];
  var running = param[/* running */1];
  Curry._2(Drawfunctions.P[/* background */39], Curry._3(Utils.PUtils[/* color */1], 230, 230, 250), env);
  Curry._2(Drawfunctions.P[/* fill */8], Curry._3(Utils.PUtils[/* color */1], 255, 0, 0), env);
  Curry._1(Utils.PUtils[/* randomSeed */18], time);
  var lst = List.map(function (drop) {
        var y = drop[/* y */1] + Caml_int32.imul(drop[/* yspeed */4], time - drop[/* time */6] | 0) | 0;
        if (y > (Curry._1(Drawfunctions.P[/* height */1], env) + 500 | 0)) {
          return make(Curry._1(Drawfunctions.P[/* width */0], env), /* tuple */[
                      -500,
                      -50
                    ], time);
        } else if (y < -500) {
          return make(Curry._1(Drawfunctions.P[/* width */0], env), /* tuple */[
                      Curry._1(Drawfunctions.P[/* height */1], env) + 50 | 0,
                      Curry._1(Drawfunctions.P[/* height */1], env) + 500 | 0
                    ], time);
        } else {
          return drop;
        }
      }, param[/* lst */0]);
  List.iter(function (drop) {
        Curry._2(Drawfunctions.P[/* fill */8], drop[/* color */5], env);
        return Curry._4(Drawfunctions.P[/* ellipse */25], /* tuple */[
                    drop[/* x */0],
                    drop[/* y */1] + Caml_int32.imul(drop[/* yspeed */4], time - drop[/* time */6] | 0) | 0
                  ], Curry._5(Utils.PUtils[/* remap */14], drop[/* z */2], 0, 20, 1, 3), drop[/* yspeed */4], env);
      }, lst);
  return /* record */[
          /* lst */lst,
          /* running */running,
          /* time */running !== 0 ? time + 1 | 0 : time
        ];
}

function mouseDown(state, _) {
  return /* record */[
          /* lst */state[/* lst */0],
          /* running : false */0,
          /* time */state[/* time */2]
        ];
}

function mouseUp(state, _) {
  return /* record */[
          /* lst */state[/* lst */0],
          /* running : true */1,
          /* time */state[/* time */2]
        ];
}

function mouseDragged(state, env) {
  var match = Curry._1(Drawfunctions.P[/* pmouse */3], env);
  var match$1 = Curry._1(Drawfunctions.P[/* mouse */2], env);
  var newTime = state[/* time */2] - (match[0] - match$1[0] | 0) | 0;
  return /* record */[
          /* lst */state[/* lst */0],
          /* running */state[/* running */1],
          /* time */newTime
        ];
}

Curry.app(Reprocessing.ReProcessor[/* run */0], [
      setup,
      /* Some */[draw],
      /* None */0,
      /* Some */[mouseDragged],
      /* Some */[mouseDown],
      /* Some */[mouseUp],
      /* None */0,
      /* None */0,
      /* None */0,
      /* () */0
    ]);

exports.make         = make;
exports.init         = init;
exports.setup        = setup;
exports.draw         = draw;
exports.mouseDown    = mouseDown;
exports.mouseUp      = mouseUp;
exports.mouseDragged = mouseDragged;
/*  Not a pure module */
