// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
'use strict';

var Block       = require("bs-platform/lib/js/block");
var Curry       = require("bs-platform/lib/js/curry");
var Printf      = require("bs-platform/lib/js/printf");
var Caml_array  = require("bs-platform/lib/js/caml_array");
var Pervasives  = require("bs-platform/lib/js/pervasives");
var LayoutValue = require("./layoutValue");

function indent(n) {
  for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
    Pervasives.print_string("  ");
  }
  return /* () */0;
}

function print_number_0(param) {
  var number = param[2];
  if (/* false */0 || number !== LayoutValue.zero) {
    indent(param[0]);
    return Curry._2(Printf.printf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ": ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    ",\n",
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "%s: %s,\n"
                  ]), param[1], LayoutValue.scalarToString(number));
  } else {
    return 0;
  }
}

function print_number_nan(param) {
  var number = param[2];
  if (/* false */0 || !LayoutValue.isUndefined(number)) {
    indent(param[0]);
    return Curry._2(Printf.printf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ": ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    ",\n",
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "%s: %s,\n"
                  ]), param[1], LayoutValue.scalarToString(number));
  } else {
    return 0;
  }
}

function layoutStr(layout) {
  return "{left:" + (LayoutValue.scalarToString(layout[/* left */0]) + (", top:" + (LayoutValue.scalarToString(layout[/* top */1]) + (", width:" + (LayoutValue.scalarToString(layout[/* width */4]) + (", height:" + (LayoutValue.scalarToString(layout[/* height */5]) + "}")))))));
}

function printCssNodeRec(param) {
  var level = param[2];
  var options = param[1];
  var node = param[0];
  indent(level);
  Printf.printf(/* Format */[
        /* String_literal */Block.__(11, [
            "{\n",
            /* End_of_format */0
          ]),
        "{\n"
      ]);
  var match = node[/* print */5];
  if (match) {
    Curry._1(match[0], node[/* context */8]);
  }
  if (options[/* printLayout */0]) {
    indent(level + 1 | 0);
    Printf.printf(/* Format */[
          /* String_literal */Block.__(11, [
              "layout: {\n",
              /* End_of_format */0
            ]),
          "layout: {\n"
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "width",
          node[/* layout */1][/* width */4]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "height",
          node[/* layout */1][/* height */5]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "measuredWidth",
          node[/* layout */1][/* measuredWidth */18]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "measuredHeight",
          node[/* layout */1][/* measuredHeight */19]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "top",
          node[/* layout */1][/* top */1]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "left",
          node[/* layout */1][/* left */0]
        ]);
    indent(level + 1 | 0);
    Printf.printf(/* Format */[
          /* String_literal */Block.__(11, [
              "},\n",
              /* End_of_format */0
            ]),
          "},\n"
        ]);
  }
  if (options[/* printStyle */1]) {
    indent(level + 1 | 0);
    Printf.printf(/* Format */[
          /* String_literal */Block.__(11, [
              "style: {\n",
              /* End_of_format */0
            ]),
          "style: {\n"
        ]);
    if (node[/* style */0][/* flexDirection */1] === /* CssFlexDirectionColumn */2) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "flexDirection: 'column',\n",
                /* End_of_format */0
              ]),
            "flexDirection: 'column',\n"
          ]);
    } else if (node[/* style */0][/* flexDirection */1] === /* CssFlexDirectionColumnReverse */3) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "flexDirection: 'column-reverse',\n",
                /* End_of_format */0
              ]),
            "flexDirection: 'column-reverse',\n"
          ]);
    } else if (node[/* style */0][/* flexDirection */1]) {
      if (node[/* style */0][/* flexDirection */1] === /* CssFlexDirectionRowReverse */1) {
        indent(level + 2 | 0);
        Printf.printf(/* Format */[
              /* String_literal */Block.__(11, [
                  "flexDirection: 'row-reverse',\n",
                  /* End_of_format */0
                ]),
              "flexDirection: 'row-reverse',\n"
            ]);
      }
      
    } else {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "flexDirection: 'row',\n",
                /* End_of_format */0
              ]),
            "flexDirection: 'row',\n"
          ]);
    }
    if (node[/* style */0][/* justifyContent */2] === /* CssJustifyCenter */1) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "justifyContent: 'center',\n",
                /* End_of_format */0
              ]),
            "justifyContent: 'center',\n"
          ]);
    } else if (node[/* style */0][/* justifyContent */2] === /* CssJustifyFlexEnd */2) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "justifyContent: 'flex-end',\n",
                /* End_of_format */0
              ]),
            "justifyContent: 'flex-end',\n"
          ]);
    } else if (node[/* style */0][/* justifyContent */2] === /* CssJustifySpaceAround */4) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "justifyContent: 'space-around',\n",
                /* End_of_format */0
              ]),
            "justifyContent: 'space-around',\n"
          ]);
    } else if (node[/* style */0][/* justifyContent */2] === /* CssJustifySpaceBetween */3) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "justifyContent: 'space-between',\n",
                /* End_of_format */0
              ]),
            "justifyContent: 'space-between',\n"
          ]);
    }
    if (node[/* style */0][/* alignItems */4] === /* CssAlignCenter */2) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignItems: 'center',\n",
                /* End_of_format */0
              ]),
            "alignItems: 'center',\n"
          ]);
    } else if (node[/* style */0][/* alignItems */4] === /* CssAlignFlexEnd */3) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignItems: 'flex-end',\n",
                /* End_of_format */0
              ]),
            "alignItems: 'flex-end',\n"
          ]);
    } else if (node[/* style */0][/* alignItems */4] === /* CssAlignStretch */4) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignItems: 'stretch',\n",
                /* End_of_format */0
              ]),
            "alignItems: 'stretch',\n"
          ]);
    }
    if (node[/* style */0][/* alignContent */3] === /* CssAlignCenter */2) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignContent: 'center',\n",
                /* End_of_format */0
              ]),
            "alignContent: 'center',\n"
          ]);
    } else if (node[/* style */0][/* alignContent */3] === /* CssAlignFlexEnd */3) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignContent: 'flex-end',\n",
                /* End_of_format */0
              ]),
            "alignContent: 'flex-end',\n"
          ]);
    } else if (node[/* style */0][/* alignContent */3] === /* CssAlignStretch */4) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignContent: 'stretch',\n",
                /* End_of_format */0
              ]),
            "alignContent: 'stretch',\n"
          ]);
    }
    if (node[/* style */0][/* alignSelf */5] === /* CssAlignFlexStart */1) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignSelf: 'flex-start',\n",
                /* End_of_format */0
              ]),
            "alignSelf: 'flex-start',\n"
          ]);
    } else if (node[/* style */0][/* alignSelf */5] === /* CssAlignCenter */2) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignSelf: 'center',\n",
                /* End_of_format */0
              ]),
            "alignSelf: 'center',\n"
          ]);
    } else if (node[/* style */0][/* alignSelf */5] === /* CssAlignFlexEnd */3) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignSelf: 'flex-end',\n",
                /* End_of_format */0
              ]),
            "alignSelf: 'flex-end',\n"
          ]);
    } else if (node[/* style */0][/* alignSelf */5] === /* CssAlignStretch */4) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "alignSelf: 'stretch',\n",
                /* End_of_format */0
              ]),
            "alignSelf: 'stretch',\n"
          ]);
    }
    if (node[/* style */0][/* overflow */8] === /* Hidden */2) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "overflow: 'hidden',\n",
                /* End_of_format */0
              ]),
            "overflow: 'hidden',\n"
          ]);
    } else if (node[/* style */0][/* overflow */8]) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "overflow: 'scroll',\n",
                /* End_of_format */0
              ]),
            "overflow: 'scroll',\n"
          ]);
    } else {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "overflow: 'visible',\n",
                /* End_of_format */0
              ]),
            "overflow: 'visible',\n"
          ]);
    }
    print_number_0(/* tuple */[
          level + 2 | 0,
          "marginLeft",
          node[/* style */0][/* marginLeft */12]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "marginRight",
          node[/* style */0][/* marginRight */14]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "marginTop",
          node[/* style */0][/* marginTop */13]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "marginBottom",
          node[/* style */0][/* marginBottom */15]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "paddingLeft",
          node[/* style */0][/* paddingLeft */30]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "paddingRight",
          node[/* style */0][/* paddingRight */32]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "paddingTop",
          node[/* style */0][/* paddingTop */31]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "paddingBottom",
          node[/* style */0][/* paddingBottom */33]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "borderLeftWidth",
          node[/* style */0][/* borderLeft */36]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "borderRightWidth",
          node[/* style */0][/* borderRight */38]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "borderTopWidth",
          node[/* style */0][/* borderTop */37]
        ]);
    print_number_0(/* tuple */[
          level + 2 | 0,
          "borderBottomWidth",
          node[/* style */0][/* borderBottom */39]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "borderStartWidth",
          node[/* style */0][/* borderStart */40]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "borderEndWidth",
          node[/* style */0][/* borderEnd */41]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "paddingStart",
          node[/* style */0][/* paddingStart */34]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "paddingEnd",
          node[/* style */0][/* paddingEnd */35]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "marginStart",
          node[/* style */0][/* marginStart */16]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "marginEnd",
          node[/* style */0][/* marginEnd */17]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "width",
          node[/* style */0][/* width */18]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "height",
          node[/* style */0][/* height */19]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "maxWidth",
          node[/* style */0][/* maxWidth */22]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "maxHeight",
          node[/* style */0][/* maxHeight */23]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "minWidth",
          node[/* style */0][/* minWidth */20]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "minHeight",
          node[/* style */0][/* minHeight */21]
        ]);
    if (node[/* style */0][/* positionType */6] === /* CssPositionAbsolute */1) {
      indent(level + 2 | 0);
      Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "position: 'absolute', ",
                /* End_of_format */0
              ]),
            "position: 'absolute', "
          ]);
    }
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "left",
          node[/* style */0][/* left */24]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "right",
          node[/* style */0][/* right */26]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "top",
          node[/* style */0][/* top */25]
        ]);
    print_number_nan(/* tuple */[
          level + 2 | 0,
          "bottom",
          node[/* style */0][/* bottom */27]
        ]);
    indent(level + 1 | 0);
    Printf.printf(/* Format */[
          /* String_literal */Block.__(11, [
              "},\n",
              /* End_of_format */0
            ]),
          "},\n"
        ]);
  }
  if (options[/* printChildren */2] && node[/* children */6].length > 0) {
    indent(level + 1 | 0);
    Printf.printf(/* Format */[
          /* String_literal */Block.__(11, [
              "children: [\n",
              /* End_of_format */0
            ]),
          "children: [\n"
        ]);
    for(var i = 0 ,i_finish = node[/* children */6].length - 1 | 0; i <= i_finish; ++i){
      printCssNodeRec(/* tuple */[
            Caml_array.caml_array_get(node[/* children */6], i),
            options,
            level + 2 | 0
          ]);
    }
    indent(level + 1 | 0);
    return Printf.printf(/* Format */[
                /* String_literal */Block.__(11, [
                    "]},\n",
                    /* End_of_format */0
                  ]),
                "]},\n"
              ]);
  } else {
    indent(level);
    return Printf.printf(/* Format */[
                /* String_literal */Block.__(11, [
                    "},\n",
                    /* End_of_format */0
                  ]),
                "},\n"
              ]);
  }
}

function printCssNode(param) {
  return printCssNodeRec(/* tuple */[
              param[0],
              param[1],
              0
            ]);
}

var shouldFilter = /* true */1;

exports.shouldFilter     = shouldFilter;
exports.indent           = indent;
exports.print_number_0   = print_number_0;
exports.print_number_nan = print_number_nan;
exports.layoutStr        = layoutStr;
exports.printCssNodeRec  = printCssNodeRec;
exports.printCssNode     = printCssNode;
/* No side effect */
