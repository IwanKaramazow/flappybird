// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
'use strict';

var Sys           = require("bs-platform/lib/js/sys");
var Curry         = require("bs-platform/lib/js/curry");
var Utils         = require("./utils");
var Matrix        = require("./matrix");
var Random        = require("bs-platform/lib/js/random");
var WGLWebgl      = require("reasongl-web/lib/js/src/wGLWebgl");
var Glhelpers     = require("./glhelpers");
var RGLConstants  = require("reasongl-interface/lib/js/src/rGLConstants");
var Drawfunctions = require("./drawfunctions");

function afterDraw(f, env) {
  var rate = 1000 / f | 0;
  env[/* mouse */12][/* prevPos */1] = env[/* mouse */12][/* pos */0];
  env[/* frame */15] = /* record */[
    /* count */env[/* frame */15][/* count */0] + 1 | 0,
    /* rate */rate
  ];
  Matrix.copyInto(Matrix.identity, env[/* matrix */16]);
  if (env[/* batch */10][/* elementPtr */3] > 0) {
    return Glhelpers.flushGlobalBatch(env);
  } else {
    return 0;
  }
}

function run(setup, draw, mouseMove, mouseDragged, mouseDown, mouseUp, keyPressed, keyReleased, keyTyped, _) {
  Random.self_init(/* () */0);
  Curry._1(Utils.PUtils[/* noiseSeed */37], Random.$$int(Curry._2(Utils.PUtils[/* pow */11], 2, 30) - 1 | 0));
  var env = Glhelpers.createCanvas(Curry._1(WGLWebgl.Gl[/* Window */2][/* init */2], Sys.argv), 200, 200);
  var userState = [Curry._1(setup, env)];
  var width = Curry._1(WGLWebgl.Gl[/* Window */2][/* getWidth */0], env[/* window */1]);
  var height = Curry._1(WGLWebgl.Gl[/* Window */2][/* getHeight */1], env[/* window */1]);
  var data = Curry._5(WGLWebgl.Gl[/* readPixelsRGBA */27], env[/* gl */2], 0, 0, width, height);
  var textureBuffer = Curry._1(WGLWebgl.Gl[/* createTexture */16], env[/* gl */2]);
  Curry._3(WGLWebgl.Gl[/* bindTexture */18], env[/* gl */2], RGLConstants.texture_2d, textureBuffer);
  Curry.app(WGLWebgl.Gl[/* texImage2D */32], [
        env[/* gl */2],
        RGLConstants.texture_2d,
        0,
        RGLConstants.rgba,
        width,
        height,
        RGLConstants.rgba,
        RGLConstants.unsigned_byte,
        data
      ]);
  Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_mag_filter, RGLConstants.linear);
  Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_min_filter, RGLConstants.linear);
  Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_wrap_s, RGLConstants.clamp_to_edge);
  Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_wrap_t, RGLConstants.clamp_to_edge);
  var reDrawPreviousBufferOnSecondFrame = function () {
    var match_000 = 0 + width | 0;
    var match_000$1 = 0 + width | 0;
    var match_001 = 0 + height | 0;
    var match_001$1 = 0 + height | 0;
    var verticesColorAndTexture = /* float array */[
      match_000,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      1,
      1.0,
      1.0,
      0,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      1,
      0.0,
      1.0,
      match_000$1,
      match_001,
      0.0,
      0.0,
      0.0,
      0.0,
      1,
      1.0,
      0.0,
      0,
      match_001$1,
      0.0,
      0.0,
      0.0,
      0.0,
      1,
      0.0,
      0.0
    ];
    return Glhelpers.drawGeometry(Curry._2(WGLWebgl.Gl[/* Bigarray */36][/* of_array */1], /* Float32 */1, verticesColorAndTexture), Curry._2(WGLWebgl.Gl[/* Bigarray */36][/* of_array */1], /* Uint16 */3, /* array */[
                    0,
                    1,
                    2,
                    1,
                    2,
                    3
                  ]), RGLConstants.triangles, 6, textureBuffer, env);
  };
  return Curry.app(WGLWebgl.Gl[/* render */4], [
              env[/* window */1],
              /* Some */[function (_, _$1, x, y) {
                  env[/* mouse */12][/* pos */0] = /* tuple */[
                    x,
                    y
                  ];
                  env[/* mouse */12][/* pressed */2] = /* true */1;
                  if (mouseDown) {
                    userState[0] = Curry._2(mouseDown[0], userState[0], env);
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                }],
              /* Some */[function (_, _$1, x, y) {
                  env[/* mouse */12][/* pos */0] = /* tuple */[
                    x,
                    y
                  ];
                  env[/* mouse */12][/* pressed */2] = /* false */0;
                  if (mouseUp) {
                    userState[0] = Curry._2(mouseUp[0], userState[0], env);
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                }],
              /* Some */[function (x, y) {
                  env[/* mouse */12][/* pos */0] = /* tuple */[
                    x,
                    y
                  ];
                  if (env[/* mouse */12][/* pressed */2]) {
                    if (mouseDragged) {
                      userState[0] = Curry._2(mouseDragged[0], userState[0], env);
                      return /* () */0;
                    } else {
                      return /* () */0;
                    }
                  } else if (mouseMove) {
                    userState[0] = Curry._2(mouseMove[0], userState[0], env);
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                }],
              /* Some */[function (keycode, repeat) {
                  env[/* keyboard */11][/* keyCode */0] = keycode;
                  if (!repeat) {
                    if (keyPressed) {
                      userState[0] = Curry._2(keyPressed[0], userState[0], env);
                    }
                    
                  }
                  if (keyTyped) {
                    userState[0] = Curry._2(keyTyped[0], userState[0], env);
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                }],
              /* Some */[function (keycode) {
                  env[/* keyboard */11][/* keyCode */0] = keycode;
                  if (keyReleased) {
                    userState[0] = Curry._2(keyReleased[0], userState[0], env);
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                }],
              /* Some */[function () {
                  if (env[/* size */18][/* resizeable */2]) {
                    var height = Curry._1(WGLWebgl.Gl[/* Window */2][/* getHeight */1], env[/* window */1]);
                    var width = Curry._1(WGLWebgl.Gl[/* Window */2][/* getWidth */0], env[/* window */1]);
                    return Glhelpers.resetSize(env, width, height);
                  } else {
                    return Curry._3(Drawfunctions.P[/* size */17], Curry._1(Drawfunctions.P[/* width */0], env), Curry._1(Drawfunctions.P[/* height */1], env), env);
                  }
                }],
              function (f) {
                if (env[/* frame */15][/* count */0] === 2) {
                  reDrawPreviousBufferOnSecondFrame(/* () */0);
                }
                if (draw) {
                  userState[0] = Curry._2(draw[0], userState[0], env);
                }
                return afterDraw(f, env);
              },
              /* () */0
            ]);
}

var ReProcessor = /* module */[/* run */run];

var PUtils = 0;

var PConstants = 0;

var P = 0;

exports.PUtils      = PUtils;
exports.PConstants  = PConstants;
exports.P           = P;
exports.afterDraw   = afterDraw;
exports.ReProcessor = ReProcessor;
/* Utils Not a pure module */
