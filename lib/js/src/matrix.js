// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
'use strict';

var Caml_array              = require("bs-platform/lib/js/caml_array");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions");

var identity = /* float array */[
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1
];

function createIdentity() {
  return /* float array */[
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1
        ];
}

function createTranslation(dx, dy) {
  return /* float array */[
          1,
          0,
          dx,
          0,
          1,
          dy,
          0,
          0,
          1
        ];
}

function createRotation(theta) {
  return /* float array */[
          Math.cos(theta),
          -Math.sin(theta),
          0,
          Math.sin(theta),
          Math.cos(theta),
          0,
          0,
          0,
          1
        ];
}

function copyInto(src, dst) {
  Caml_array.caml_array_set(dst, 0, Caml_array.caml_array_get(src, 0));
  Caml_array.caml_array_set(dst, 1, Caml_array.caml_array_get(src, 1));
  Caml_array.caml_array_set(dst, 2, Caml_array.caml_array_get(src, 2));
  Caml_array.caml_array_set(dst, 3, Caml_array.caml_array_get(src, 3));
  Caml_array.caml_array_set(dst, 4, Caml_array.caml_array_get(src, 4));
  Caml_array.caml_array_set(dst, 5, Caml_array.caml_array_get(src, 5));
  Caml_array.caml_array_set(dst, 6, Caml_array.caml_array_get(src, 6));
  Caml_array.caml_array_set(dst, 7, Caml_array.caml_array_get(src, 7));
  return Caml_array.caml_array_set(dst, 8, Caml_array.caml_array_get(src, 8));
}

function matmatmul(mat1, mat2) {
  if (mat1.length !== 9) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/Iwan/Development/reprocessing/src/matrix.re",
            28,
            6
          ]
        ];
  } else {
    var m0 = mat1[0];
    var m1 = mat1[1];
    var m2 = mat1[2];
    var m3 = mat1[3];
    var m4 = mat1[4];
    var m5 = mat1[5];
    var m6 = mat1[6];
    var m7 = mat1[7];
    var m8 = mat1[8];
    if (mat2.length !== 9) {
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "/Users/Iwan/Development/reprocessing/src/matrix.re",
              29,
              6
            ]
          ];
    } else {
      var ma = mat2[0];
      var mb = mat2[1];
      var mc = mat2[2];
      var md = mat2[3];
      var me = mat2[4];
      var mf = mat2[5];
      var mg = mat2[6];
      var mh = mat2[7];
      var mi = mat2[8];
      Caml_array.caml_array_set(mat1, 0, ma * m0 + md * m1 + mg * m2);
      Caml_array.caml_array_set(mat1, 1, mb * m0 + me * m1 + mh * m2);
      Caml_array.caml_array_set(mat1, 2, mc * m0 + mf * m1 + mi * m2);
      Caml_array.caml_array_set(mat1, 3, ma * m3 + md * m4 + mg * m5);
      Caml_array.caml_array_set(mat1, 4, mb * m3 + me * m4 + mh * m5);
      Caml_array.caml_array_set(mat1, 5, mc * m3 + mf * m4 + mi * m5);
      Caml_array.caml_array_set(mat1, 6, ma * m6 + md * m7 + mg * m8);
      Caml_array.caml_array_set(mat1, 7, mb * m6 + me * m7 + mh * m8);
      return Caml_array.caml_array_set(mat1, 8, mc * m6 + mf * m7 + mi * m8);
    }
  }
}

function matvecmul(m, v) {
  var a = Caml_array.caml_array_get(v, 0);
  var b = Caml_array.caml_array_get(v, 1);
  var c = Caml_array.caml_array_get(v, 2);
  Caml_array.caml_array_set(v, 0, a * Caml_array.caml_array_get(m, 0) + b * Caml_array.caml_array_get(m, 1) + c * Caml_array.caml_array_get(m, 2));
  Caml_array.caml_array_set(v, 1, a * Caml_array.caml_array_get(m, 3) + b * Caml_array.caml_array_get(m, 4) + c * Caml_array.caml_array_get(m, 5));
  return Caml_array.caml_array_set(v, 2, a * Caml_array.caml_array_get(m, 6) + b * Caml_array.caml_array_get(m, 7) + c * Caml_array.caml_array_get(m, 8));
}

function matptmul(m, param) {
  var y = param[1];
  var x = param[0];
  return /* tuple */[
          x * Caml_array.caml_array_get(m, 0) + y * Caml_array.caml_array_get(m, 1) + Caml_array.caml_array_get(m, 2),
          x * Caml_array.caml_array_get(m, 3) + y * Caml_array.caml_array_get(m, 4) + Caml_array.caml_array_get(m, 5)
        ];
}

exports.identity          = identity;
exports.createIdentity    = createIdentity;
exports.createTranslation = createTranslation;
exports.createRotation    = createRotation;
exports.copyInto          = copyInto;
exports.matmatmul         = matmatmul;
exports.matvecmul         = matvecmul;
exports.matptmul          = matptmul;
/* No side effect */
