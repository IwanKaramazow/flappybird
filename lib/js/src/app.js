/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************************!*\
  !*** ./lib/js/src/flappy.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var Curry         = __webpack_require__(/*! bs-platform/lib/js/curry */ 1);
	var Utils         = __webpack_require__(/*! ./utils */ 4);
	var Reprocessing  = __webpack_require__(/*! ./reprocessing */ 31);
	var Drawfunctions = __webpack_require__(/*! ./drawfunctions */ 38);
	
	function setup() {
	  return /* record */[/* x */230];
	}
	
	function draw(_, env) {
	  Curry._2(Drawfunctions.P[/* background */39], Curry._3(Utils.PUtils[/* color */1], 200, 30, 70), env);
	  Curry._2(Drawfunctions.P[/* fill */8], Curry._3(Utils.PUtils[/* color */1], 255, 0, 0), env);
	  return /* record */[/* x */230];
	}
	
	Curry.app(Reprocessing.ReProcessor[/* run */0], [
	      setup,
	      /* Some */[draw],
	      /* None */0,
	      /* None */0,
	      /* None */0,
	      /* None */0,
	      /* None */0,
	      /* None */0,
	      /* None */0,
	      /* () */0
	    ]);
	
	exports.setup = setup;
	exports.draw  = draw;
	/*  Not a pure module */


/***/ },
/* 1 */
/*!***************************************!*\
  !*** ./~/bs-platform/lib/js/curry.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_array = __webpack_require__(/*! ./caml_array */ 2);
	
	function app(_f, _args) {
	  while(true) {
	    var args = _args;
	    var f = _f;
	    var arity = f.length;
	    var arity$1 = arity ? arity : 1;
	    var len = args.length;
	    var d = arity$1 - len | 0;
	    if (d) {
	      if (d < 0) {
	        _args = Caml_array.caml_array_sub(args, arity$1, -d | 0);
	        _f = f.apply(null, Caml_array.caml_array_sub(args, 0, arity$1));
	        continue ;
	        
	      } else {
	        return (function(f,args){
	        return function (x) {
	          return app(f, args.concat(/* array */[x]));
	        }
	        }(f,args));
	      }
	    } else {
	      return f.apply(null, args);
	    }
	  };
	}
	
	function curry_1(o, a0, arity) {
	  if (arity > 7 || arity < 0) {
	    return app(o, /* array */[a0]);
	  } else {
	    switch (arity) {
	      case 0 : 
	      case 1 : 
	          return o(a0);
	      case 2 : 
	          return function (param) {
	            return o(a0, param);
	          };
	      case 3 : 
	          return function (param, param$1) {
	            return o(a0, param, param$1);
	          };
	      case 4 : 
	          return function (param, param$1, param$2) {
	            return o(a0, param, param$1, param$2);
	          };
	      case 5 : 
	          return function (param, param$1, param$2, param$3) {
	            return o(a0, param, param$1, param$2, param$3);
	          };
	      case 6 : 
	          return function (param, param$1, param$2, param$3, param$4) {
	            return o(a0, param, param$1, param$2, param$3, param$4);
	          };
	      case 7 : 
	          return function (param, param$1, param$2, param$3, param$4, param$5) {
	            return o(a0, param, param$1, param$2, param$3, param$4, param$5);
	          };
	      
	    }
	  }
	}
	
	function _1(o, a0) {
	  var arity = o.length;
	  if (arity === 1) {
	    return o(a0);
	  } else {
	    return curry_1(o, a0, arity);
	  }
	}
	
	function __1(o) {
	  var arity = o.length;
	  if (arity === 1) {
	    return o;
	  } else {
	    return function (a0) {
	      return _1(o, a0);
	    };
	  }
	}
	
	function curry_2(o, a0, a1, arity) {
	  if (arity > 7 || arity < 0) {
	    return app(o, /* array */[
	                a0,
	                a1
	              ]);
	  } else {
	    switch (arity) {
	      case 0 : 
	      case 1 : 
	          return app(o(a0), /* array */[a1]);
	      case 2 : 
	          return o(a0, a1);
	      case 3 : 
	          return function (param) {
	            return o(a0, a1, param);
	          };
	      case 4 : 
	          return function (param, param$1) {
	            return o(a0, a1, param, param$1);
	          };
	      case 5 : 
	          return function (param, param$1, param$2) {
	            return o(a0, a1, param, param$1, param$2);
	          };
	      case 6 : 
	          return function (param, param$1, param$2, param$3) {
	            return o(a0, a1, param, param$1, param$2, param$3);
	          };
	      case 7 : 
	          return function (param, param$1, param$2, param$3, param$4) {
	            return o(a0, a1, param, param$1, param$2, param$3, param$4);
	          };
	      
	    }
	  }
	}
	
	function _2(o, a0, a1) {
	  var arity = o.length;
	  if (arity === 2) {
	    return o(a0, a1);
	  } else {
	    return curry_2(o, a0, a1, arity);
	  }
	}
	
	function __2(o) {
	  var arity = o.length;
	  if (arity === 2) {
	    return o;
	  } else {
	    return function (a0, a1) {
	      return _2(o, a0, a1);
	    };
	  }
	}
	
	function curry_3(o, a0, a1, a2, arity) {
	  var exit = 0;
	  if (arity > 7 || arity < 0) {
	    return app(o, /* array */[
	                a0,
	                a1,
	                a2
	              ]);
	  } else {
	    switch (arity) {
	      case 0 : 
	      case 1 : 
	          exit = 1;
	          break;
	      case 2 : 
	          return app(o(a0, a1), /* array */[a2]);
	      case 3 : 
	          return o(a0, a1, a2);
	      case 4 : 
	          return function (param) {
	            return o(a0, a1, a2, param);
	          };
	      case 5 : 
	          return function (param, param$1) {
	            return o(a0, a1, a2, param, param$1);
	          };
	      case 6 : 
	          return function (param, param$1, param$2) {
	            return o(a0, a1, a2, param, param$1, param$2);
	          };
	      case 7 : 
	          return function (param, param$1, param$2, param$3) {
	            return o(a0, a1, a2, param, param$1, param$2, param$3);
	          };
	      
	    }
	  }
	  if (exit === 1) {
	    return app(o(a0), /* array */[
	                a1,
	                a2
	              ]);
	  }
	  
	}
	
	function _3(o, a0, a1, a2) {
	  var arity = o.length;
	  if (arity === 3) {
	    return o(a0, a1, a2);
	  } else {
	    return curry_3(o, a0, a1, a2, arity);
	  }
	}
	
	function __3(o) {
	  var arity = o.length;
	  if (arity === 3) {
	    return o;
	  } else {
	    return function (a0, a1, a2) {
	      return _3(o, a0, a1, a2);
	    };
	  }
	}
	
	function curry_4(o, a0, a1, a2, a3, arity) {
	  var exit = 0;
	  if (arity > 7 || arity < 0) {
	    return app(o, /* array */[
	                a0,
	                a1,
	                a2,
	                a3
	              ]);
	  } else {
	    switch (arity) {
	      case 0 : 
	      case 1 : 
	          exit = 1;
	          break;
	      case 2 : 
	          return app(o(a0, a1), /* array */[
	                      a2,
	                      a3
	                    ]);
	      case 3 : 
	          return app(o(a0, a1, a2), /* array */[a3]);
	      case 4 : 
	          return o(a0, a1, a2, a3);
	      case 5 : 
	          return function (param) {
	            return o(a0, a1, a2, a3, param);
	          };
	      case 6 : 
	          return function (param, param$1) {
	            return o(a0, a1, a2, a3, param, param$1);
	          };
	      case 7 : 
	          return function (param, param$1, param$2) {
	            return o(a0, a1, a2, a3, param, param$1, param$2);
	          };
	      
	    }
	  }
	  if (exit === 1) {
	    return app(o(a0), /* array */[
	                a1,
	                a2,
	                a3
	              ]);
	  }
	  
	}
	
	function _4(o, a0, a1, a2, a3) {
	  var arity = o.length;
	  if (arity === 4) {
	    return o(a0, a1, a2, a3);
	  } else {
	    return curry_4(o, a0, a1, a2, a3, arity);
	  }
	}
	
	function __4(o) {
	  var arity = o.length;
	  if (arity === 4) {
	    return o;
	  } else {
	    return function (a0, a1, a2, a3) {
	      return _4(o, a0, a1, a2, a3);
	    };
	  }
	}
	
	function curry_5(o, a0, a1, a2, a3, a4, arity) {
	  var exit = 0;
	  if (arity > 7 || arity < 0) {
	    return app(o, /* array */[
	                a0,
	                a1,
	                a2,
	                a3,
	                a4
	              ]);
	  } else {
	    switch (arity) {
	      case 0 : 
	      case 1 : 
	          exit = 1;
	          break;
	      case 2 : 
	          return app(o(a0, a1), /* array */[
	                      a2,
	                      a3,
	                      a4
	                    ]);
	      case 3 : 
	          return app(o(a0, a1, a2), /* array */[
	                      a3,
	                      a4
	                    ]);
	      case 4 : 
	          return app(o(a0, a1, a2, a3), /* array */[a4]);
	      case 5 : 
	          return o(a0, a1, a2, a3, a4);
	      case 6 : 
	          return function (param) {
	            return o(a0, a1, a2, a3, a4, param);
	          };
	      case 7 : 
	          return function (param, param$1) {
	            return o(a0, a1, a2, a3, a4, param, param$1);
	          };
	      
	    }
	  }
	  if (exit === 1) {
	    return app(o(a0), /* array */[
	                a1,
	                a2,
	                a3,
	                a4
	              ]);
	  }
	  
	}
	
	function _5(o, a0, a1, a2, a3, a4) {
	  var arity = o.length;
	  if (arity === 5) {
	    return o(a0, a1, a2, a3, a4);
	  } else {
	    return curry_5(o, a0, a1, a2, a3, a4, arity);
	  }
	}
	
	function __5(o) {
	  var arity = o.length;
	  if (arity === 5) {
	    return o;
	  } else {
	    return function (a0, a1, a2, a3, a4) {
	      return _5(o, a0, a1, a2, a3, a4);
	    };
	  }
	}
	
	function curry_6(o, a0, a1, a2, a3, a4, a5, arity) {
	  var exit = 0;
	  if (arity > 7 || arity < 0) {
	    return app(o, /* array */[
	                a0,
	                a1,
	                a2,
	                a3,
	                a4,
	                a5
	              ]);
	  } else {
	    switch (arity) {
	      case 0 : 
	      case 1 : 
	          exit = 1;
	          break;
	      case 2 : 
	          return app(o(a0, a1), /* array */[
	                      a2,
	                      a3,
	                      a4,
	                      a5
	                    ]);
	      case 3 : 
	          return app(o(a0, a1, a2), /* array */[
	                      a3,
	                      a4,
	                      a5
	                    ]);
	      case 4 : 
	          return app(o(a0, a1, a2, a3), /* array */[
	                      a4,
	                      a5
	                    ]);
	      case 5 : 
	          return app(o(a0, a1, a2, a3, a4), /* array */[a5]);
	      case 6 : 
	          return o(a0, a1, a2, a3, a4, a5);
	      case 7 : 
	          return function (param) {
	            return o(a0, a1, a2, a3, a4, a5, param);
	          };
	      
	    }
	  }
	  if (exit === 1) {
	    return app(o(a0), /* array */[
	                a1,
	                a2,
	                a3,
	                a4,
	                a5
	              ]);
	  }
	  
	}
	
	function _6(o, a0, a1, a2, a3, a4, a5) {
	  var arity = o.length;
	  if (arity === 6) {
	    return o(a0, a1, a2, a3, a4, a5);
	  } else {
	    return curry_6(o, a0, a1, a2, a3, a4, a5, arity);
	  }
	}
	
	function __6(o) {
	  var arity = o.length;
	  if (arity === 6) {
	    return o;
	  } else {
	    return function (a0, a1, a2, a3, a4, a5) {
	      return _6(o, a0, a1, a2, a3, a4, a5);
	    };
	  }
	}
	
	function curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity) {
	  var exit = 0;
	  if (arity > 7 || arity < 0) {
	    return app(o, /* array */[
	                a0,
	                a1,
	                a2,
	                a3,
	                a4,
	                a5,
	                a6
	              ]);
	  } else {
	    switch (arity) {
	      case 0 : 
	      case 1 : 
	          exit = 1;
	          break;
	      case 2 : 
	          return app(o(a0, a1), /* array */[
	                      a2,
	                      a3,
	                      a4,
	                      a5,
	                      a6
	                    ]);
	      case 3 : 
	          return app(o(a0, a1, a2), /* array */[
	                      a3,
	                      a4,
	                      a5,
	                      a6
	                    ]);
	      case 4 : 
	          return app(o(a0, a1, a2, a3), /* array */[
	                      a4,
	                      a5,
	                      a6
	                    ]);
	      case 5 : 
	          return app(o(a0, a1, a2, a3, a4), /* array */[
	                      a5,
	                      a6
	                    ]);
	      case 6 : 
	          return app(o(a0, a1, a2, a3, a4, a5), /* array */[a6]);
	      case 7 : 
	          return o(a0, a1, a2, a3, a4, a5, a6);
	      
	    }
	  }
	  if (exit === 1) {
	    return app(o(a0), /* array */[
	                a1,
	                a2,
	                a3,
	                a4,
	                a5,
	                a6
	              ]);
	  }
	  
	}
	
	function _7(o, a0, a1, a2, a3, a4, a5, a6) {
	  var arity = o.length;
	  if (arity === 7) {
	    return o(a0, a1, a2, a3, a4, a5, a6);
	  } else {
	    return curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity);
	  }
	}
	
	function __7(o) {
	  var arity = o.length;
	  if (arity === 7) {
	    return o;
	  } else {
	    return function (a0, a1, a2, a3, a4, a5, a6) {
	      return _7(o, a0, a1, a2, a3, a4, a5, a6);
	    };
	  }
	}
	
	function curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity) {
	  var exit = 0;
	  if (arity > 7 || arity < 0) {
	    return app(o, /* array */[
	                a0,
	                a1,
	                a2,
	                a3,
	                a4,
	                a5,
	                a6,
	                a7
	              ]);
	  } else {
	    switch (arity) {
	      case 0 : 
	      case 1 : 
	          exit = 1;
	          break;
	      case 2 : 
	          return app(o(a0, a1), /* array */[
	                      a2,
	                      a3,
	                      a4,
	                      a5,
	                      a6,
	                      a7
	                    ]);
	      case 3 : 
	          return app(o(a0, a1, a2), /* array */[
	                      a3,
	                      a4,
	                      a5,
	                      a6,
	                      a7
	                    ]);
	      case 4 : 
	          return app(o(a0, a1, a2, a3), /* array */[
	                      a4,
	                      a5,
	                      a6,
	                      a7
	                    ]);
	      case 5 : 
	          return app(o(a0, a1, a2, a3, a4), /* array */[
	                      a5,
	                      a6,
	                      a7
	                    ]);
	      case 6 : 
	          return app(o(a0, a1, a2, a3, a4, a5), /* array */[
	                      a6,
	                      a7
	                    ]);
	      case 7 : 
	          return app(o(a0, a1, a2, a3, a4, a5, a6), /* array */[a7]);
	      
	    }
	  }
	  if (exit === 1) {
	    return app(o(a0), /* array */[
	                a1,
	                a2,
	                a3,
	                a4,
	                a5,
	                a6,
	                a7
	              ]);
	  }
	  
	}
	
	function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
	  var arity = o.length;
	  if (arity === 8) {
	    return o(a0, a1, a2, a3, a4, a5, a6, a7);
	  } else {
	    return curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity);
	  }
	}
	
	function __8(o) {
	  var arity = o.length;
	  if (arity === 8) {
	    return o;
	  } else {
	    return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	      return _8(o, a0, a1, a2, a3, a4, a5, a6, a7);
	    };
	  }
	}
	
	exports.app     = app;
	exports.curry_1 = curry_1;
	exports._1      = _1;
	exports.__1     = __1;
	exports.curry_2 = curry_2;
	exports._2      = _2;
	exports.__2     = __2;
	exports.curry_3 = curry_3;
	exports._3      = _3;
	exports.__3     = __3;
	exports.curry_4 = curry_4;
	exports._4      = _4;
	exports.__4     = __4;
	exports.curry_5 = curry_5;
	exports._5      = _5;
	exports.__5     = __5;
	exports.curry_6 = curry_6;
	exports._6      = _6;
	exports.__6     = __6;
	exports.curry_7 = curry_7;
	exports._7      = _7;
	exports.__7     = __7;
	exports.curry_8 = curry_8;
	exports._8      = _8;
	exports.__8     = __8;
	/* No side effect */


/***/ },
/* 2 */
/*!********************************************!*\
  !*** ./~/bs-platform/lib/js/caml_array.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function caml_array_sub(x, offset, len) {
	  var result = new Array(len);
	  var j = 0;
	  var i = offset;
	  while(j < len) {
	    result[j] = x[i];
	    j = j + 1 | 0;
	    i = i + 1 | 0;
	  };
	  return result;
	}
	
	function len(_acc, _l) {
	  while(true) {
	    var l = _l;
	    var acc = _acc;
	    if (l) {
	      _l = l[1];
	      _acc = l[0].length + acc | 0;
	      continue ;
	      
	    } else {
	      return acc;
	    }
	  };
	}
	
	function fill(arr, _i, _l) {
	  while(true) {
	    var l = _l;
	    var i = _i;
	    if (l) {
	      var x = l[0];
	      var l$1 = x.length;
	      var k = i;
	      var j = 0;
	      while(j < l$1) {
	        arr[k] = x[j];
	        k = k + 1 | 0;
	        j = j + 1 | 0;
	      };
	      _l = l[1];
	      _i = k;
	      continue ;
	      
	    } else {
	      return /* () */0;
	    }
	  };
	}
	
	function caml_array_concat(l) {
	  var v = len(0, l);
	  var result = new Array(v);
	  fill(result, 0, l);
	  return result;
	}
	
	function caml_array_set(xs, index, newval) {
	  if (index < 0 || index >= xs.length) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "index out of bounds"
	        ];
	  } else {
	    xs[index] = newval;
	    return /* () */0;
	  }
	}
	
	function caml_array_get(xs, index) {
	  if (index < 0 || index >= xs.length) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "index out of bounds"
	        ];
	  } else {
	    return xs[index];
	  }
	}
	
	function caml_make_vect(len, init) {
	  var b = new Array(len);
	  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	    b[i] = init;
	  }
	  return b;
	}
	
	function caml_array_blit(a1, i1, a2, i2, len) {
	  if (i2 <= i1) {
	    for(var j = 0 ,j_finish = len - 1 | 0; j <= j_finish; ++j){
	      a2[j + i2 | 0] = a1[j + i1 | 0];
	    }
	    return /* () */0;
	  } else {
	    for(var j$1 = len - 1 | 0; j$1 >= 0; --j$1){
	      a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];
	    }
	    return /* () */0;
	  }
	}
	
	exports.caml_array_sub    = caml_array_sub;
	exports.caml_array_concat = caml_array_concat;
	exports.caml_make_vect    = caml_make_vect;
	exports.caml_array_blit   = caml_array_blit;
	exports.caml_array_get    = caml_array_get;
	exports.caml_array_set    = caml_array_set;
	/* No side effect */


/***/ },
/* 3 */
/*!*********************************************************!*\
  !*** ./~/bs-platform/lib/js/caml_builtin_exceptions.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	'use strict';
	
	
	var out_of_memory = /* tuple */[
	  "Out_of_memory",
	  0
	];
	
	var sys_error = /* tuple */[
	  "Sys_error",
	  -1
	];
	
	var failure = /* tuple */[
	  "Failure",
	  -2
	];
	
	var invalid_argument = /* tuple */[
	  "Invalid_argument",
	  -3
	];
	
	var end_of_file = /* tuple */[
	  "End_of_file",
	  -4
	];
	
	var division_by_zero = /* tuple */[
	  "Division_by_zero",
	  -5
	];
	
	var not_found = /* tuple */[
	  "Not_found",
	  -6
	];
	
	var match_failure = /* tuple */[
	  "Match_failure",
	  -7
	];
	
	var stack_overflow = /* tuple */[
	  "Stack_overflow",
	  -8
	];
	
	var sys_blocked_io = /* tuple */[
	  "Sys_blocked_io",
	  -9
	];
	
	var assert_failure = /* tuple */[
	  "Assert_failure",
	  -10
	];
	
	var undefined_recursive_module = /* tuple */[
	  "Undefined_recursive_module",
	  -11
	];
	
	exports.out_of_memory              = out_of_memory;
	exports.sys_error                  = sys_error;
	exports.failure                    = failure;
	exports.invalid_argument           = invalid_argument;
	exports.end_of_file                = end_of_file;
	exports.division_by_zero           = division_by_zero;
	exports.not_found                  = not_found;
	exports.match_failure              = match_failure;
	exports.stack_overflow             = stack_overflow;
	exports.sys_blocked_io             = sys_blocked_io;
	exports.assert_failure             = assert_failure;
	exports.undefined_recursive_module = undefined_recursive_module;
	/* No side effect */


/***/ },
/* 4 */
/*!*****************************!*\
  !*** ./lib/js/src/utils.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var List       = __webpack_require__(/*! bs-platform/lib/js/list */ 5);
	var $$Array    = __webpack_require__(/*! bs-platform/lib/js/array */ 18);
	var Curry      = __webpack_require__(/*! bs-platform/lib/js/curry */ 1);
	var Common     = __webpack_require__(/*! ./common */ 19);
	var Random     = __webpack_require__(/*! bs-platform/lib/js/random */ 23);
	var Caml_array = __webpack_require__(/*! bs-platform/lib/js/caml_array */ 2);
	var Caml_int32 = __webpack_require__(/*! bs-platform/lib/js/caml_int32 */ 12);
	var Pervasives = __webpack_require__(/*! bs-platform/lib/js/pervasives */ 8);
	
	var pi = 4.0 * Math.atan(1.0);
	
	var two_pi = 2.0 * pi;
	
	var half_pi = 0.5 * pi;
	
	var quarter_pi = 0.25 * pi;
	
	var PConstants_000 = /* white : record */[
	  /* r */255,
	  /* g */255,
	  /* b */255
	];
	
	var PConstants_001 = /* black : record */[
	  /* r */0,
	  /* g */0,
	  /* b */0
	];
	
	var PConstants = /* module */[
	  PConstants_000,
	  PConstants_001,
	  /* pi */pi,
	  /* two_pi */two_pi,
	  /* half_pi */half_pi,
	  /* quarter_pi */quarter_pi,
	  /* tau */two_pi
	];
	
	var lookup_table = [/* int array */[]];
	
	function color(r, g, b) {
	  return /* record */[
	          /* r */r,
	          /* g */g,
	          /* b */b
	        ];
	}
	
	function round(i) {
	  return Math.floor(i + 0.5);
	}
	
	function sqrt(prim) {
	  return Math.sqrt(prim);
	}
	
	function ceil(prim) {
	  return Math.ceil(prim);
	}
	
	function exp(prim) {
	  return Math.exp(prim);
	}
	
	function log(prim) {
	  return Math.log(prim);
	}
	
	function sq(x) {
	  return Caml_int32.imul(x, x);
	}
	
	function pow(a, n) {
	  if (n !== 0) {
	    if (n !== 1) {
	      var b = pow(a, n / 2 | 0);
	      return Caml_int32.imul(Caml_int32.imul(b, b), n % 2 ? a : 1);
	    } else {
	      return a;
	    }
	  } else {
	    return 1;
	  }
	}
	
	function constrain(amt, low, high) {
	  return Pervasives.max(Pervasives.min(amt, high), low);
	}
	
	function remapf(value, istart, istop, ostart, ostop) {
	  return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
	}
	
	function remap(x, a, b, c, d) {
	  return remapf(x, a, b, c, d) | 0;
	}
	
	function norm(value, low, high) {
	  return remapf(value, low, high, 0, 1);
	}
	
	function randomf(low, high) {
	  return Random.$$float(high - low) + low;
	}
	
	function random(low, high) {
	  return Random.$$int(high - low | 0) + low | 0;
	}
	
	var randomSeed = Random.init;
	
	function randomGaussian() {
	  var u1 = 0.0;
	  var u2 = 0.0;
	  while(u1 <= Pervasives.min_float) {
	    u1 = Random.$$float(1.0);
	    u2 = Random.$$float(1.0);
	  };
	  return Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(two_pi * u2);
	}
	
	function lerpf(start, stop, amt) {
	  return remapf(amt, 0, 1, start, stop);
	}
	
	function lerp(start, stop, amt) {
	  return lerpf(start, stop, amt) | 0;
	}
	
	function distf(param, param$1) {
	  var dx = param$1[0] - param[0];
	  var dy = param$1[1] - param[1];
	  return Math.sqrt(dx * dx + dy * dy);
	}
	
	function dist(param, param$1) {
	  return distf(/* tuple */[
	              param[0],
	              param[1]
	            ], /* tuple */[
	              param$1[0],
	              param$1[1]
	            ]);
	}
	
	function mag(vec) {
	  return dist(/* tuple */[
	              0,
	              0
	            ], vec);
	}
	
	function lerpColor(low, high, amt) {
	  return /* record */[
	          /* r */lerp(low[/* r */0], high[/* r */0], amt),
	          /* g */lerp(low[/* g */1], high[/* g */1], amt),
	          /* b */lerp(low[/* b */2], high[/* b */2], amt)
	        ];
	}
	
	function acos(prim) {
	  return Math.acos(prim);
	}
	
	function asin(prim) {
	  return Math.asin(prim);
	}
	
	function atan(prim) {
	  return Math.atan(prim);
	}
	
	function atan2(prim, prim$1) {
	  return Math.atan2(prim, prim$1);
	}
	
	function cos(prim) {
	  return Math.cos(prim);
	}
	
	function degrees(x) {
	  return 180.0 / pi * x;
	}
	
	function radians(x) {
	  return pi / 180.0 * x;
	}
	
	function sin(prim) {
	  return Math.sin(prim);
	}
	
	function tan(prim) {
	  return Math.tan(prim);
	}
	
	function noise(x, y, z) {
	  var p = lookup_table[0];
	  var fade = function (t) {
	    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
	  };
	  var grad = function (hash, x, y, z) {
	    var match = hash & 15;
	    if (match > 15 || match < 0) {
	      return 0.0;
	    } else {
	      switch (match) {
	        case 0 : 
	            return x + y;
	        case 1 : 
	            return -x + y;
	        case 2 : 
	            return x - y;
	        case 3 : 
	            return -x - y;
	        case 4 : 
	            return x + z;
	        case 5 : 
	            return -x + z;
	        case 6 : 
	            return x - z;
	        case 7 : 
	            return -x - z;
	        case 8 : 
	            return y + z;
	        case 10 : 
	            return y - z;
	        case 12 : 
	            return y + x;
	        case 9 : 
	        case 13 : 
	            return -y + z;
	        case 14 : 
	            return y - x;
	        case 11 : 
	        case 15 : 
	            return -y - z;
	        
	      }
	    }
	  };
	  var xi = x & 255;
	  var yi = y & 255;
	  var zi = z & 255;
	  var xf = x - Math.floor(x);
	  var yf = y - Math.floor(y);
	  var zf = z - Math.floor(z);
	  var u = fade(xf);
	  var v = fade(yf);
	  var w = fade(zf);
	  var aaa = Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, xi) + yi | 0) + zi | 0);
	  var aba = Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, xi) + (yi + 1 | 0) | 0) + zi | 0);
	  var aab = Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, xi) + yi | 0) + (zi + 1 | 0) | 0);
	  var abb = Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, xi) + (yi + 1 | 0) | 0) + (zi + 1 | 0) | 0);
	  var baa = Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, xi + 1 | 0) + yi | 0) + zi | 0);
	  var bba = Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, xi + 1 | 0) + (yi + 1 | 0) | 0) + zi | 0);
	  var bab = Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, xi + 1 | 0) + yi | 0) + (zi + 1 | 0) | 0);
	  var bbb = Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, Caml_array.caml_array_get(p, xi + 1 | 0) + (yi + 1 | 0) | 0) + (zi + 1 | 0) | 0);
	  var x1 = lerpf(grad(aaa, xf, yf, zf), grad(baa, xf - 1.0, yf, zf), u);
	  var x2 = lerpf(grad(aba, xf, yf - 1.0, zf), grad(bba, xf - 1.0, yf - 1.0, zf), u);
	  var y1 = lerpf(x1, x2, v);
	  var x1$1 = lerpf(grad(aab, xf, yf, zf - 1.0), grad(bab, xf - 1.0, yf, zf - 1.0), u);
	  var x2$1 = lerpf(grad(abb, xf, yf - 1.0, zf - 1.0), grad(bbb, xf - 1.0, yf - 1.0, zf - 1.0), u);
	  var y2 = lerpf(x1$1, x2$1, v);
	  return (lerpf(y1, y2, w) + 1.0) / 2.0;
	}
	
	function shuffle(array) {
	  var array$1 = $$Array.copy(array);
	  var length = array$1.length;
	  for(var i = 0; i <= 255; ++i){
	    var j = Random.$$int(length - i | 0);
	    var tmp = Caml_array.caml_array_get(array$1, i);
	    Caml_array.caml_array_set(array$1, i, Caml_array.caml_array_get(array$1, i + j | 0));
	    Caml_array.caml_array_set(array$1, i + j | 0, tmp);
	  }
	  return array$1;
	}
	
	function noiseSeed(seed) {
	  var state = Random.get_state(/* () */0);
	  Random.init(seed);
	  var array = Caml_array.caml_make_vect(256, 0);
	  var array$1 = $$Array.mapi(function (i, _) {
	        return i;
	      }, array);
	  var array$2 = shuffle(array$1);
	  var double_array = $$Array.append(array$2, array$2);
	  lookup_table[0] = double_array;
	  return Random.set_state(state);
	}
	
	function split(str, sep) {
	  var _stream = Curry._1(Common.Stream[/* create */7], str);
	  var sep$1 = sep;
	  var _accstr = "";
	  var _acc = /* [] */0;
	  while(true) {
	    var acc = _acc;
	    var accstr = _accstr;
	    var stream = _stream;
	    var match = Curry._1(Common.Stream[/* peekch */1], stream);
	    if (match) {
	      var c = match[0];
	      if (c === sep$1) {
	        _acc = /* :: */[
	          accstr,
	          acc
	        ];
	        _accstr = "";
	        _stream = Curry._1(Common.Stream[/* popch */2], stream);
	        continue ;
	        
	      } else {
	        _accstr = Common.append_char(accstr, c);
	        _stream = Curry._1(Common.Stream[/* popch */2], stream);
	        continue ;
	        
	      }
	    } else {
	      return List.rev(/* :: */[
	                  accstr,
	                  acc
	                ]);
	    }
	  };
	}
	
	var PUtils = /* module */[
	  /* lookup_table */lookup_table,
	  /* color */color,
	  /* round */round,
	  /* max */Pervasives.max,
	  /* min */Pervasives.min,
	  /* sqrt */sqrt,
	  /* abs */Pervasives.abs,
	  /* ceil */ceil,
	  /* exp */exp,
	  /* log */log,
	  /* sq */sq,
	  /* pow */pow,
	  /* constrain */constrain,
	  /* remapf */remapf,
	  /* remap */remap,
	  /* norm */norm,
	  /* randomf */randomf,
	  /* random */random,
	  /* randomSeed */randomSeed,
	  /* randomGaussian */randomGaussian,
	  /* lerpf */lerpf,
	  /* lerp */lerp,
	  /* distf */distf,
	  /* dist */dist,
	  /* mag */mag,
	  /* lerpColor */lerpColor,
	  /* acos */acos,
	  /* asin */asin,
	  /* atan */atan,
	  /* atan2 */atan2,
	  /* cos */cos,
	  /* degrees */degrees,
	  /* radians */radians,
	  /* sin */sin,
	  /* tan */tan,
	  /* noise */noise,
	  /* shuffle */shuffle,
	  /* noiseSeed */noiseSeed,
	  /* split */split
	];
	
	exports.PConstants = PConstants;
	exports.PUtils     = PUtils;
	/* pi Not a pure module */


/***/ },
/* 5 */
/*!**************************************!*\
  !*** ./~/bs-platform/lib/js/list.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Curry                   = __webpack_require__(/*! ./curry */ 1);
	var Caml_obj                = __webpack_require__(/*! ./caml_obj */ 6);
	var Pervasives              = __webpack_require__(/*! ./pervasives */ 8);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function length(l) {
	  var _len = 0;
	  var _param = l;
	  while(true) {
	    var param = _param;
	    var len = _len;
	    if (param) {
	      _param = param[1];
	      _len = len + 1 | 0;
	      continue ;
	      
	    } else {
	      return len;
	    }
	  };
	}
	
	function hd(param) {
	  if (param) {
	    return param[0];
	  } else {
	    throw [
	          Caml_builtin_exceptions.failure,
	          "hd"
	        ];
	  }
	}
	
	function tl(param) {
	  if (param) {
	    return param[1];
	  } else {
	    throw [
	          Caml_builtin_exceptions.failure,
	          "tl"
	        ];
	  }
	}
	
	function nth(l, n) {
	  if (n < 0) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "List.nth"
	        ];
	  } else {
	    var _l = l;
	    var _n = n;
	    while(true) {
	      var n$1 = _n;
	      var l$1 = _l;
	      if (l$1) {
	        if (n$1) {
	          _n = n$1 - 1 | 0;
	          _l = l$1[1];
	          continue ;
	          
	        } else {
	          return l$1[0];
	        }
	      } else {
	        throw [
	              Caml_builtin_exceptions.failure,
	              "nth"
	            ];
	      }
	    };
	  }
	}
	
	function rev_append(_l1, _l2) {
	  while(true) {
	    var l2 = _l2;
	    var l1 = _l1;
	    if (l1) {
	      _l2 = /* :: */[
	        l1[0],
	        l2
	      ];
	      _l1 = l1[1];
	      continue ;
	      
	    } else {
	      return l2;
	    }
	  };
	}
	
	function rev(l) {
	  return rev_append(l, /* [] */0);
	}
	
	function flatten(param) {
	  if (param) {
	    return Pervasives.$at(param[0], flatten(param[1]));
	  } else {
	    return /* [] */0;
	  }
	}
	
	function map(f, param) {
	  if (param) {
	    var r = Curry._1(f, param[0]);
	    return /* :: */[
	            r,
	            map(f, param[1])
	          ];
	  } else {
	    return /* [] */0;
	  }
	}
	
	function mapi(i, f, param) {
	  if (param) {
	    var r = Curry._2(f, i, param[0]);
	    return /* :: */[
	            r,
	            mapi(i + 1 | 0, f, param[1])
	          ];
	  } else {
	    return /* [] */0;
	  }
	}
	
	function mapi$1(f, l) {
	  return mapi(0, f, l);
	}
	
	function rev_map(f, l) {
	  var _accu = /* [] */0;
	  var _param = l;
	  while(true) {
	    var param = _param;
	    var accu = _accu;
	    if (param) {
	      _param = param[1];
	      _accu = /* :: */[
	        Curry._1(f, param[0]),
	        accu
	      ];
	      continue ;
	      
	    } else {
	      return accu;
	    }
	  };
	}
	
	function iter(f, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      Curry._1(f, param[0]);
	      _param = param[1];
	      continue ;
	      
	    } else {
	      return /* () */0;
	    }
	  };
	}
	
	function iteri(f, l) {
	  var _i = 0;
	  var f$1 = f;
	  var _param = l;
	  while(true) {
	    var param = _param;
	    var i = _i;
	    if (param) {
	      Curry._2(f$1, i, param[0]);
	      _param = param[1];
	      _i = i + 1 | 0;
	      continue ;
	      
	    } else {
	      return /* () */0;
	    }
	  };
	}
	
	function fold_left(f, _accu, _l) {
	  while(true) {
	    var l = _l;
	    var accu = _accu;
	    if (l) {
	      _l = l[1];
	      _accu = Curry._2(f, accu, l[0]);
	      continue ;
	      
	    } else {
	      return accu;
	    }
	  };
	}
	
	function fold_right(f, l, accu) {
	  if (l) {
	    return Curry._2(f, l[0], fold_right(f, l[1], accu));
	  } else {
	    return accu;
	  }
	}
	
	function map2(f, l1, l2) {
	  if (l1) {
	    if (l2) {
	      var r = Curry._2(f, l1[0], l2[0]);
	      return /* :: */[
	              r,
	              map2(f, l1[1], l2[1])
	            ];
	    } else {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "List.map2"
	          ];
	    }
	  } else if (l2) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "List.map2"
	        ];
	  } else {
	    return /* [] */0;
	  }
	}
	
	function rev_map2(f, l1, l2) {
	  var _accu = /* [] */0;
	  var _l1 = l1;
	  var _l2 = l2;
	  while(true) {
	    var l2$1 = _l2;
	    var l1$1 = _l1;
	    var accu = _accu;
	    if (l1$1) {
	      if (l2$1) {
	        _l2 = l2$1[1];
	        _l1 = l1$1[1];
	        _accu = /* :: */[
	          Curry._2(f, l1$1[0], l2$1[0]),
	          accu
	        ];
	        continue ;
	        
	      } else {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "List.rev_map2"
	            ];
	      }
	    } else if (l2$1) {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "List.rev_map2"
	          ];
	    } else {
	      return accu;
	    }
	  };
	}
	
	function iter2(f, _l1, _l2) {
	  while(true) {
	    var l2 = _l2;
	    var l1 = _l1;
	    if (l1) {
	      if (l2) {
	        Curry._2(f, l1[0], l2[0]);
	        _l2 = l2[1];
	        _l1 = l1[1];
	        continue ;
	        
	      } else {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "List.iter2"
	            ];
	      }
	    } else if (l2) {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "List.iter2"
	          ];
	    } else {
	      return /* () */0;
	    }
	  };
	}
	
	function fold_left2(f, _accu, _l1, _l2) {
	  while(true) {
	    var l2 = _l2;
	    var l1 = _l1;
	    var accu = _accu;
	    if (l1) {
	      if (l2) {
	        _l2 = l2[1];
	        _l1 = l1[1];
	        _accu = Curry._3(f, accu, l1[0], l2[0]);
	        continue ;
	        
	      } else {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "List.fold_left2"
	            ];
	      }
	    } else if (l2) {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "List.fold_left2"
	          ];
	    } else {
	      return accu;
	    }
	  };
	}
	
	function fold_right2(f, l1, l2, accu) {
	  if (l1) {
	    if (l2) {
	      return Curry._3(f, l1[0], l2[0], fold_right2(f, l1[1], l2[1], accu));
	    } else {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "List.fold_right2"
	          ];
	    }
	  } else if (l2) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "List.fold_right2"
	        ];
	  } else {
	    return accu;
	  }
	}
	
	function for_all(p, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      if (Curry._1(p, param[0])) {
	        _param = param[1];
	        continue ;
	        
	      } else {
	        return /* false */0;
	      }
	    } else {
	      return /* true */1;
	    }
	  };
	}
	
	function exists(p, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      if (Curry._1(p, param[0])) {
	        return /* true */1;
	      } else {
	        _param = param[1];
	        continue ;
	        
	      }
	    } else {
	      return /* false */0;
	    }
	  };
	}
	
	function for_all2(p, _l1, _l2) {
	  while(true) {
	    var l2 = _l2;
	    var l1 = _l1;
	    if (l1) {
	      if (l2) {
	        if (Curry._2(p, l1[0], l2[0])) {
	          _l2 = l2[1];
	          _l1 = l1[1];
	          continue ;
	          
	        } else {
	          return /* false */0;
	        }
	      } else {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "List.for_all2"
	            ];
	      }
	    } else if (l2) {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "List.for_all2"
	          ];
	    } else {
	      return /* true */1;
	    }
	  };
	}
	
	function exists2(p, _l1, _l2) {
	  while(true) {
	    var l2 = _l2;
	    var l1 = _l1;
	    if (l1) {
	      if (l2) {
	        if (Curry._2(p, l1[0], l2[0])) {
	          return /* true */1;
	        } else {
	          _l2 = l2[1];
	          _l1 = l1[1];
	          continue ;
	          
	        }
	      } else {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "List.exists2"
	            ];
	      }
	    } else if (l2) {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "List.exists2"
	          ];
	    } else {
	      return /* false */0;
	    }
	  };
	}
	
	function mem(x, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      if (Caml_obj.caml_compare(param[0], x)) {
	        _param = param[1];
	        continue ;
	        
	      } else {
	        return /* true */1;
	      }
	    } else {
	      return /* false */0;
	    }
	  };
	}
	
	function memq(x, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      if (param[0] === x) {
	        return /* true */1;
	      } else {
	        _param = param[1];
	        continue ;
	        
	      }
	    } else {
	      return /* false */0;
	    }
	  };
	}
	
	function assoc(x, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      var match = param[0];
	      if (Caml_obj.caml_compare(match[0], x)) {
	        _param = param[1];
	        continue ;
	        
	      } else {
	        return match[1];
	      }
	    } else {
	      throw Caml_builtin_exceptions.not_found;
	    }
	  };
	}
	
	function assq(x, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      var match = param[0];
	      if (match[0] === x) {
	        return match[1];
	      } else {
	        _param = param[1];
	        continue ;
	        
	      }
	    } else {
	      throw Caml_builtin_exceptions.not_found;
	    }
	  };
	}
	
	function mem_assoc(x, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      if (Caml_obj.caml_compare(param[0][0], x)) {
	        _param = param[1];
	        continue ;
	        
	      } else {
	        return /* true */1;
	      }
	    } else {
	      return /* false */0;
	    }
	  };
	}
	
	function mem_assq(x, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      if (param[0][0] === x) {
	        return /* true */1;
	      } else {
	        _param = param[1];
	        continue ;
	        
	      }
	    } else {
	      return /* false */0;
	    }
	  };
	}
	
	function remove_assoc(x, param) {
	  if (param) {
	    var l = param[1];
	    var pair = param[0];
	    if (Caml_obj.caml_compare(pair[0], x)) {
	      return /* :: */[
	              pair,
	              remove_assoc(x, l)
	            ];
	    } else {
	      return l;
	    }
	  } else {
	    return /* [] */0;
	  }
	}
	
	function remove_assq(x, param) {
	  if (param) {
	    var l = param[1];
	    var pair = param[0];
	    if (pair[0] === x) {
	      return l;
	    } else {
	      return /* :: */[
	              pair,
	              remove_assq(x, l)
	            ];
	    }
	  } else {
	    return /* [] */0;
	  }
	}
	
	function find(p, _param) {
	  while(true) {
	    var param = _param;
	    if (param) {
	      var x = param[0];
	      if (Curry._1(p, x)) {
	        return x;
	      } else {
	        _param = param[1];
	        continue ;
	        
	      }
	    } else {
	      throw Caml_builtin_exceptions.not_found;
	    }
	  };
	}
	
	function find_all(p) {
	  return function (param) {
	    var _accu = /* [] */0;
	    var _param = param;
	    while(true) {
	      var param$1 = _param;
	      var accu = _accu;
	      if (param$1) {
	        var l = param$1[1];
	        var x = param$1[0];
	        if (Curry._1(p, x)) {
	          _param = l;
	          _accu = /* :: */[
	            x,
	            accu
	          ];
	          continue ;
	          
	        } else {
	          _param = l;
	          continue ;
	          
	        }
	      } else {
	        return rev_append(accu, /* [] */0);
	      }
	    };
	  };
	}
	
	function partition(p, l) {
	  var _yes = /* [] */0;
	  var _no = /* [] */0;
	  var _param = l;
	  while(true) {
	    var param = _param;
	    var no = _no;
	    var yes = _yes;
	    if (param) {
	      var l$1 = param[1];
	      var x = param[0];
	      if (Curry._1(p, x)) {
	        _param = l$1;
	        _yes = /* :: */[
	          x,
	          yes
	        ];
	        continue ;
	        
	      } else {
	        _param = l$1;
	        _no = /* :: */[
	          x,
	          no
	        ];
	        continue ;
	        
	      }
	    } else {
	      return /* tuple */[
	              rev_append(yes, /* [] */0),
	              rev_append(no, /* [] */0)
	            ];
	    }
	  };
	}
	
	function split(param) {
	  if (param) {
	    var match = param[0];
	    var match$1 = split(param[1]);
	    return /* tuple */[
	            /* :: */[
	              match[0],
	              match$1[0]
	            ],
	            /* :: */[
	              match[1],
	              match$1[1]
	            ]
	          ];
	  } else {
	    return /* tuple */[
	            /* [] */0,
	            /* [] */0
	          ];
	  }
	}
	
	function combine(l1, l2) {
	  if (l1) {
	    if (l2) {
	      return /* :: */[
	              /* tuple */[
	                l1[0],
	                l2[0]
	              ],
	              combine(l1[1], l2[1])
	            ];
	    } else {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "List.combine"
	          ];
	    }
	  } else if (l2) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "List.combine"
	        ];
	  } else {
	    return /* [] */0;
	  }
	}
	
	function merge(cmp, l1, l2) {
	  if (l1) {
	    if (l2) {
	      var h2 = l2[0];
	      var h1 = l1[0];
	      if (Curry._2(cmp, h1, h2) <= 0) {
	        return /* :: */[
	                h1,
	                merge(cmp, l1[1], l2)
	              ];
	      } else {
	        return /* :: */[
	                h2,
	                merge(cmp, l1, l2[1])
	              ];
	      }
	    } else {
	      return l1;
	    }
	  } else {
	    return l2;
	  }
	}
	
	function chop(_k, _l) {
	  while(true) {
	    var l = _l;
	    var k = _k;
	    if (k) {
	      if (l) {
	        _l = l[1];
	        _k = k - 1 | 0;
	        continue ;
	        
	      } else {
	        throw [
	              Caml_builtin_exceptions.assert_failure,
	              [
	                "list.ml",
	                223,
	                11
	              ]
	            ];
	      }
	    } else {
	      return l;
	    }
	  };
	}
	
	function stable_sort(cmp, l) {
	  var sort = function (n, l) {
	    var exit = 0;
	    if (n !== 2) {
	      if (n !== 3) {
	        exit = 1;
	      } else if (l) {
	        var match = l[1];
	        if (match) {
	          var match$1 = match[1];
	          if (match$1) {
	            var x3 = match$1[0];
	            var x2 = match[0];
	            var x1 = l[0];
	            if (Curry._2(cmp, x1, x2) <= 0) {
	              if (Curry._2(cmp, x2, x3) <= 0) {
	                return /* :: */[
	                        x1,
	                        /* :: */[
	                          x2,
	                          /* :: */[
	                            x3,
	                            /* [] */0
	                          ]
	                        ]
	                      ];
	              } else if (Curry._2(cmp, x1, x3) <= 0) {
	                return /* :: */[
	                        x1,
	                        /* :: */[
	                          x3,
	                          /* :: */[
	                            x2,
	                            /* [] */0
	                          ]
	                        ]
	                      ];
	              } else {
	                return /* :: */[
	                        x3,
	                        /* :: */[
	                          x1,
	                          /* :: */[
	                            x2,
	                            /* [] */0
	                          ]
	                        ]
	                      ];
	              }
	            } else if (Curry._2(cmp, x1, x3) <= 0) {
	              return /* :: */[
	                      x2,
	                      /* :: */[
	                        x1,
	                        /* :: */[
	                          x3,
	                          /* [] */0
	                        ]
	                      ]
	                    ];
	            } else if (Curry._2(cmp, x2, x3) <= 0) {
	              return /* :: */[
	                      x2,
	                      /* :: */[
	                        x3,
	                        /* :: */[
	                          x1,
	                          /* [] */0
	                        ]
	                      ]
	                    ];
	            } else {
	              return /* :: */[
	                      x3,
	                      /* :: */[
	                        x2,
	                        /* :: */[
	                          x1,
	                          /* [] */0
	                        ]
	                      ]
	                    ];
	            }
	          } else {
	            exit = 1;
	          }
	        } else {
	          exit = 1;
	        }
	      } else {
	        exit = 1;
	      }
	    } else if (l) {
	      var match$2 = l[1];
	      if (match$2) {
	        var x2$1 = match$2[0];
	        var x1$1 = l[0];
	        if (Curry._2(cmp, x1$1, x2$1) <= 0) {
	          return /* :: */[
	                  x1$1,
	                  /* :: */[
	                    x2$1,
	                    /* [] */0
	                  ]
	                ];
	        } else {
	          return /* :: */[
	                  x2$1,
	                  /* :: */[
	                    x1$1,
	                    /* [] */0
	                  ]
	                ];
	        }
	      } else {
	        exit = 1;
	      }
	    } else {
	      exit = 1;
	    }
	    if (exit === 1) {
	      var n1 = (n >> 1);
	      var n2 = n - n1 | 0;
	      var l2 = chop(n1, l);
	      var s1 = rev_sort(n1, l);
	      var s2 = rev_sort(n2, l2);
	      var _l1 = s1;
	      var _l2 = s2;
	      var _accu = /* [] */0;
	      while(true) {
	        var accu = _accu;
	        var l2$1 = _l2;
	        var l1 = _l1;
	        if (l1) {
	          if (l2$1) {
	            var h2 = l2$1[0];
	            var h1 = l1[0];
	            if (Curry._2(cmp, h1, h2) > 0) {
	              _accu = /* :: */[
	                h1,
	                accu
	              ];
	              _l1 = l1[1];
	              continue ;
	              
	            } else {
	              _accu = /* :: */[
	                h2,
	                accu
	              ];
	              _l2 = l2$1[1];
	              continue ;
	              
	            }
	          } else {
	            return rev_append(l1, accu);
	          }
	        } else {
	          return rev_append(l2$1, accu);
	        }
	      };
	    }
	    
	  };
	  var rev_sort = function (n, l) {
	    var exit = 0;
	    if (n !== 2) {
	      if (n !== 3) {
	        exit = 1;
	      } else if (l) {
	        var match = l[1];
	        if (match) {
	          var match$1 = match[1];
	          if (match$1) {
	            var x3 = match$1[0];
	            var x2 = match[0];
	            var x1 = l[0];
	            if (Curry._2(cmp, x1, x2) > 0) {
	              if (Curry._2(cmp, x2, x3) > 0) {
	                return /* :: */[
	                        x1,
	                        /* :: */[
	                          x2,
	                          /* :: */[
	                            x3,
	                            /* [] */0
	                          ]
	                        ]
	                      ];
	              } else if (Curry._2(cmp, x1, x3) > 0) {
	                return /* :: */[
	                        x1,
	                        /* :: */[
	                          x3,
	                          /* :: */[
	                            x2,
	                            /* [] */0
	                          ]
	                        ]
	                      ];
	              } else {
	                return /* :: */[
	                        x3,
	                        /* :: */[
	                          x1,
	                          /* :: */[
	                            x2,
	                            /* [] */0
	                          ]
	                        ]
	                      ];
	              }
	            } else if (Curry._2(cmp, x1, x3) > 0) {
	              return /* :: */[
	                      x2,
	                      /* :: */[
	                        x1,
	                        /* :: */[
	                          x3,
	                          /* [] */0
	                        ]
	                      ]
	                    ];
	            } else if (Curry._2(cmp, x2, x3) > 0) {
	              return /* :: */[
	                      x2,
	                      /* :: */[
	                        x3,
	                        /* :: */[
	                          x1,
	                          /* [] */0
	                        ]
	                      ]
	                    ];
	            } else {
	              return /* :: */[
	                      x3,
	                      /* :: */[
	                        x2,
	                        /* :: */[
	                          x1,
	                          /* [] */0
	                        ]
	                      ]
	                    ];
	            }
	          } else {
	            exit = 1;
	          }
	        } else {
	          exit = 1;
	        }
	      } else {
	        exit = 1;
	      }
	    } else if (l) {
	      var match$2 = l[1];
	      if (match$2) {
	        var x2$1 = match$2[0];
	        var x1$1 = l[0];
	        if (Curry._2(cmp, x1$1, x2$1) > 0) {
	          return /* :: */[
	                  x1$1,
	                  /* :: */[
	                    x2$1,
	                    /* [] */0
	                  ]
	                ];
	        } else {
	          return /* :: */[
	                  x2$1,
	                  /* :: */[
	                    x1$1,
	                    /* [] */0
	                  ]
	                ];
	        }
	      } else {
	        exit = 1;
	      }
	    } else {
	      exit = 1;
	    }
	    if (exit === 1) {
	      var n1 = (n >> 1);
	      var n2 = n - n1 | 0;
	      var l2 = chop(n1, l);
	      var s1 = sort(n1, l);
	      var s2 = sort(n2, l2);
	      var _l1 = s1;
	      var _l2 = s2;
	      var _accu = /* [] */0;
	      while(true) {
	        var accu = _accu;
	        var l2$1 = _l2;
	        var l1 = _l1;
	        if (l1) {
	          if (l2$1) {
	            var h2 = l2$1[0];
	            var h1 = l1[0];
	            if (Curry._2(cmp, h1, h2) <= 0) {
	              _accu = /* :: */[
	                h1,
	                accu
	              ];
	              _l1 = l1[1];
	              continue ;
	              
	            } else {
	              _accu = /* :: */[
	                h2,
	                accu
	              ];
	              _l2 = l2$1[1];
	              continue ;
	              
	            }
	          } else {
	            return rev_append(l1, accu);
	          }
	        } else {
	          return rev_append(l2$1, accu);
	        }
	      };
	    }
	    
	  };
	  var len = length(l);
	  if (len < 2) {
	    return l;
	  } else {
	    return sort(len, l);
	  }
	}
	
	function sort_uniq(cmp, l) {
	  var sort = function (n, l) {
	    var exit = 0;
	    if (n !== 2) {
	      if (n !== 3) {
	        exit = 1;
	      } else if (l) {
	        var match = l[1];
	        if (match) {
	          var match$1 = match[1];
	          if (match$1) {
	            var x3 = match$1[0];
	            var x2 = match[0];
	            var x1 = l[0];
	            var c = Curry._2(cmp, x1, x2);
	            if (c) {
	              if (c < 0) {
	                var c$1 = Curry._2(cmp, x2, x3);
	                if (c$1) {
	                  if (c$1 < 0) {
	                    return /* :: */[
	                            x1,
	                            /* :: */[
	                              x2,
	                              /* :: */[
	                                x3,
	                                /* [] */0
	                              ]
	                            ]
	                          ];
	                  } else {
	                    var c$2 = Curry._2(cmp, x1, x3);
	                    if (c$2) {
	                      if (c$2 < 0) {
	                        return /* :: */[
	                                x1,
	                                /* :: */[
	                                  x3,
	                                  /* :: */[
	                                    x2,
	                                    /* [] */0
	                                  ]
	                                ]
	                              ];
	                      } else {
	                        return /* :: */[
	                                x3,
	                                /* :: */[
	                                  x1,
	                                  /* :: */[
	                                    x2,
	                                    /* [] */0
	                                  ]
	                                ]
	                              ];
	                      }
	                    } else {
	                      return /* :: */[
	                              x1,
	                              /* :: */[
	                                x2,
	                                /* [] */0
	                              ]
	                            ];
	                    }
	                  }
	                } else {
	                  return /* :: */[
	                          x1,
	                          /* :: */[
	                            x2,
	                            /* [] */0
	                          ]
	                        ];
	                }
	              } else {
	                var c$3 = Curry._2(cmp, x1, x3);
	                if (c$3) {
	                  if (c$3 < 0) {
	                    return /* :: */[
	                            x2,
	                            /* :: */[
	                              x1,
	                              /* :: */[
	                                x3,
	                                /* [] */0
	                              ]
	                            ]
	                          ];
	                  } else {
	                    var c$4 = Curry._2(cmp, x2, x3);
	                    if (c$4) {
	                      if (c$4 < 0) {
	                        return /* :: */[
	                                x2,
	                                /* :: */[
	                                  x3,
	                                  /* :: */[
	                                    x1,
	                                    /* [] */0
	                                  ]
	                                ]
	                              ];
	                      } else {
	                        return /* :: */[
	                                x3,
	                                /* :: */[
	                                  x2,
	                                  /* :: */[
	                                    x1,
	                                    /* [] */0
	                                  ]
	                                ]
	                              ];
	                      }
	                    } else {
	                      return /* :: */[
	                              x2,
	                              /* :: */[
	                                x1,
	                                /* [] */0
	                              ]
	                            ];
	                    }
	                  }
	                } else {
	                  return /* :: */[
	                          x2,
	                          /* :: */[
	                            x1,
	                            /* [] */0
	                          ]
	                        ];
	                }
	              }
	            } else {
	              var c$5 = Curry._2(cmp, x2, x3);
	              if (c$5) {
	                if (c$5 < 0) {
	                  return /* :: */[
	                          x2,
	                          /* :: */[
	                            x3,
	                            /* [] */0
	                          ]
	                        ];
	                } else {
	                  return /* :: */[
	                          x3,
	                          /* :: */[
	                            x2,
	                            /* [] */0
	                          ]
	                        ];
	                }
	              } else {
	                return /* :: */[
	                        x2,
	                        /* [] */0
	                      ];
	              }
	            }
	          } else {
	            exit = 1;
	          }
	        } else {
	          exit = 1;
	        }
	      } else {
	        exit = 1;
	      }
	    } else if (l) {
	      var match$2 = l[1];
	      if (match$2) {
	        var x2$1 = match$2[0];
	        var x1$1 = l[0];
	        var c$6 = Curry._2(cmp, x1$1, x2$1);
	        if (c$6) {
	          if (c$6 < 0) {
	            return /* :: */[
	                    x1$1,
	                    /* :: */[
	                      x2$1,
	                      /* [] */0
	                    ]
	                  ];
	          } else {
	            return /* :: */[
	                    x2$1,
	                    /* :: */[
	                      x1$1,
	                      /* [] */0
	                    ]
	                  ];
	          }
	        } else {
	          return /* :: */[
	                  x1$1,
	                  /* [] */0
	                ];
	        }
	      } else {
	        exit = 1;
	      }
	    } else {
	      exit = 1;
	    }
	    if (exit === 1) {
	      var n1 = (n >> 1);
	      var n2 = n - n1 | 0;
	      var l2 = chop(n1, l);
	      var s1 = rev_sort(n1, l);
	      var s2 = rev_sort(n2, l2);
	      var _l1 = s1;
	      var _l2 = s2;
	      var _accu = /* [] */0;
	      while(true) {
	        var accu = _accu;
	        var l2$1 = _l2;
	        var l1 = _l1;
	        if (l1) {
	          if (l2$1) {
	            var t2 = l2$1[1];
	            var h2 = l2$1[0];
	            var t1 = l1[1];
	            var h1 = l1[0];
	            var c$7 = Curry._2(cmp, h1, h2);
	            if (c$7) {
	              if (c$7 > 0) {
	                _accu = /* :: */[
	                  h1,
	                  accu
	                ];
	                _l1 = t1;
	                continue ;
	                
	              } else {
	                _accu = /* :: */[
	                  h2,
	                  accu
	                ];
	                _l2 = t2;
	                continue ;
	                
	              }
	            } else {
	              _accu = /* :: */[
	                h1,
	                accu
	              ];
	              _l2 = t2;
	              _l1 = t1;
	              continue ;
	              
	            }
	          } else {
	            return rev_append(l1, accu);
	          }
	        } else {
	          return rev_append(l2$1, accu);
	        }
	      };
	    }
	    
	  };
	  var rev_sort = function (n, l) {
	    var exit = 0;
	    if (n !== 2) {
	      if (n !== 3) {
	        exit = 1;
	      } else if (l) {
	        var match = l[1];
	        if (match) {
	          var match$1 = match[1];
	          if (match$1) {
	            var x3 = match$1[0];
	            var x2 = match[0];
	            var x1 = l[0];
	            var c = Curry._2(cmp, x1, x2);
	            if (c) {
	              if (c > 0) {
	                var c$1 = Curry._2(cmp, x2, x3);
	                if (c$1) {
	                  if (c$1 > 0) {
	                    return /* :: */[
	                            x1,
	                            /* :: */[
	                              x2,
	                              /* :: */[
	                                x3,
	                                /* [] */0
	                              ]
	                            ]
	                          ];
	                  } else {
	                    var c$2 = Curry._2(cmp, x1, x3);
	                    if (c$2) {
	                      if (c$2 > 0) {
	                        return /* :: */[
	                                x1,
	                                /* :: */[
	                                  x3,
	                                  /* :: */[
	                                    x2,
	                                    /* [] */0
	                                  ]
	                                ]
	                              ];
	                      } else {
	                        return /* :: */[
	                                x3,
	                                /* :: */[
	                                  x1,
	                                  /* :: */[
	                                    x2,
	                                    /* [] */0
	                                  ]
	                                ]
	                              ];
	                      }
	                    } else {
	                      return /* :: */[
	                              x1,
	                              /* :: */[
	                                x2,
	                                /* [] */0
	                              ]
	                            ];
	                    }
	                  }
	                } else {
	                  return /* :: */[
	                          x1,
	                          /* :: */[
	                            x2,
	                            /* [] */0
	                          ]
	                        ];
	                }
	              } else {
	                var c$3 = Curry._2(cmp, x1, x3);
	                if (c$3) {
	                  if (c$3 > 0) {
	                    return /* :: */[
	                            x2,
	                            /* :: */[
	                              x1,
	                              /* :: */[
	                                x3,
	                                /* [] */0
	                              ]
	                            ]
	                          ];
	                  } else {
	                    var c$4 = Curry._2(cmp, x2, x3);
	                    if (c$4) {
	                      if (c$4 > 0) {
	                        return /* :: */[
	                                x2,
	                                /* :: */[
	                                  x3,
	                                  /* :: */[
	                                    x1,
	                                    /* [] */0
	                                  ]
	                                ]
	                              ];
	                      } else {
	                        return /* :: */[
	                                x3,
	                                /* :: */[
	                                  x2,
	                                  /* :: */[
	                                    x1,
	                                    /* [] */0
	                                  ]
	                                ]
	                              ];
	                      }
	                    } else {
	                      return /* :: */[
	                              x2,
	                              /* :: */[
	                                x1,
	                                /* [] */0
	                              ]
	                            ];
	                    }
	                  }
	                } else {
	                  return /* :: */[
	                          x2,
	                          /* :: */[
	                            x1,
	                            /* [] */0
	                          ]
	                        ];
	                }
	              }
	            } else {
	              var c$5 = Curry._2(cmp, x2, x3);
	              if (c$5) {
	                if (c$5 > 0) {
	                  return /* :: */[
	                          x2,
	                          /* :: */[
	                            x3,
	                            /* [] */0
	                          ]
	                        ];
	                } else {
	                  return /* :: */[
	                          x3,
	                          /* :: */[
	                            x2,
	                            /* [] */0
	                          ]
	                        ];
	                }
	              } else {
	                return /* :: */[
	                        x2,
	                        /* [] */0
	                      ];
	              }
	            }
	          } else {
	            exit = 1;
	          }
	        } else {
	          exit = 1;
	        }
	      } else {
	        exit = 1;
	      }
	    } else if (l) {
	      var match$2 = l[1];
	      if (match$2) {
	        var x2$1 = match$2[0];
	        var x1$1 = l[0];
	        var c$6 = Curry._2(cmp, x1$1, x2$1);
	        if (c$6) {
	          if (c$6 > 0) {
	            return /* :: */[
	                    x1$1,
	                    /* :: */[
	                      x2$1,
	                      /* [] */0
	                    ]
	                  ];
	          } else {
	            return /* :: */[
	                    x2$1,
	                    /* :: */[
	                      x1$1,
	                      /* [] */0
	                    ]
	                  ];
	          }
	        } else {
	          return /* :: */[
	                  x1$1,
	                  /* [] */0
	                ];
	        }
	      } else {
	        exit = 1;
	      }
	    } else {
	      exit = 1;
	    }
	    if (exit === 1) {
	      var n1 = (n >> 1);
	      var n2 = n - n1 | 0;
	      var l2 = chop(n1, l);
	      var s1 = sort(n1, l);
	      var s2 = sort(n2, l2);
	      var _l1 = s1;
	      var _l2 = s2;
	      var _accu = /* [] */0;
	      while(true) {
	        var accu = _accu;
	        var l2$1 = _l2;
	        var l1 = _l1;
	        if (l1) {
	          if (l2$1) {
	            var t2 = l2$1[1];
	            var h2 = l2$1[0];
	            var t1 = l1[1];
	            var h1 = l1[0];
	            var c$7 = Curry._2(cmp, h1, h2);
	            if (c$7) {
	              if (c$7 < 0) {
	                _accu = /* :: */[
	                  h1,
	                  accu
	                ];
	                _l1 = t1;
	                continue ;
	                
	              } else {
	                _accu = /* :: */[
	                  h2,
	                  accu
	                ];
	                _l2 = t2;
	                continue ;
	                
	              }
	            } else {
	              _accu = /* :: */[
	                h1,
	                accu
	              ];
	              _l2 = t2;
	              _l1 = t1;
	              continue ;
	              
	            }
	          } else {
	            return rev_append(l1, accu);
	          }
	        } else {
	          return rev_append(l2$1, accu);
	        }
	      };
	    }
	    
	  };
	  var len = length(l);
	  if (len < 2) {
	    return l;
	  } else {
	    return sort(len, l);
	  }
	}
	
	var append = Pervasives.$at;
	
	var concat = flatten;
	
	var filter = find_all;
	
	var sort = stable_sort;
	
	var fast_sort = stable_sort;
	
	exports.length       = length;
	exports.hd           = hd;
	exports.tl           = tl;
	exports.nth          = nth;
	exports.rev          = rev;
	exports.append       = append;
	exports.rev_append   = rev_append;
	exports.concat       = concat;
	exports.flatten      = flatten;
	exports.iter         = iter;
	exports.iteri        = iteri;
	exports.map          = map;
	exports.mapi         = mapi$1;
	exports.rev_map      = rev_map;
	exports.fold_left    = fold_left;
	exports.fold_right   = fold_right;
	exports.iter2        = iter2;
	exports.map2         = map2;
	exports.rev_map2     = rev_map2;
	exports.fold_left2   = fold_left2;
	exports.fold_right2  = fold_right2;
	exports.for_all      = for_all;
	exports.exists       = exists;
	exports.for_all2     = for_all2;
	exports.exists2      = exists2;
	exports.mem          = mem;
	exports.memq         = memq;
	exports.find         = find;
	exports.filter       = filter;
	exports.find_all     = find_all;
	exports.partition    = partition;
	exports.assoc        = assoc;
	exports.assq         = assq;
	exports.mem_assoc    = mem_assoc;
	exports.mem_assq     = mem_assq;
	exports.remove_assoc = remove_assoc;
	exports.remove_assq  = remove_assq;
	exports.split        = split;
	exports.combine      = combine;
	exports.sort         = sort;
	exports.stable_sort  = stable_sort;
	exports.fast_sort    = fast_sort;
	exports.sort_uniq    = sort_uniq;
	exports.merge        = merge;
	/* No side effect */


/***/ },
/* 6 */
/*!******************************************!*\
  !*** ./~/bs-platform/lib/js/caml_obj.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Block                   = __webpack_require__(/*! ./block */ 7);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function caml_obj_dup(x) {
	  var len = x.length;
	  var v = new Array(len);
	  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	    v[i] = x[i];
	  }
	  v.tag = x.tag | 0;
	  return v;
	}
	
	function caml_obj_truncate(x, new_size) {
	  var len = x.length;
	  if (new_size <= 0 || new_size > len) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Obj.truncate"
	        ];
	  } else if (len !== new_size) {
	    for(var i = new_size ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	      x[i] = 0;
	    }
	    x.length = new_size;
	    return /* () */0;
	  } else {
	    return 0;
	  }
	}
	
	function caml_lazy_make_forward(x) {
	  return Block.__(250, [x]);
	}
	
	function caml_update_dummy(x, y) {
	  var len = y.length;
	  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	    x[i] = y[i];
	  }
	  var y_tag = y.tag | 0;
	  if (y_tag !== 0) {
	    x.tag = y_tag;
	    return /* () */0;
	  } else {
	    return 0;
	  }
	}
	
	function caml_int_compare(x, y) {
	  if (x < y) {
	    return -1;
	  } else if (x === y) {
	    return 0;
	  } else {
	    return 1;
	  }
	}
	
	function caml_compare(_a, _b) {
	  while(true) {
	    var b = _b;
	    var a = _a;
	    var a_type = typeof a;
	    var b_type = typeof b;
	    if (a_type === "string") {
	      var x = a;
	      var y = b;
	      if (x < y) {
	        return -1;
	      } else if (x === y) {
	        return 0;
	      } else {
	        return 1;
	      }
	    } else {
	      var is_a_number = +(a_type === "number");
	      var is_b_number = +(b_type === "number");
	      if (is_a_number !== 0) {
	        if (is_b_number !== 0) {
	          return caml_int_compare(a, b);
	        } else {
	          return -1;
	        }
	      } else if (is_b_number !== 0) {
	        return 1;
	      } else if (a_type === "boolean" || a_type === "null" || a_type === "undefined") {
	        var x$1 = a;
	        var y$1 = b;
	        if (x$1 === y$1) {
	          return 0;
	        } else if (x$1 < y$1) {
	          return -1;
	        } else {
	          return 1;
	        }
	      } else if (a_type === "function" || b_type === "function") {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "compare: functional value"
	            ];
	      } else {
	        var tag_a = a.tag | 0;
	        var tag_b = b.tag | 0;
	        if (tag_a === 250) {
	          _a = a[0];
	          continue ;
	          
	        } else if (tag_b === 250) {
	          _b = b[0];
	          continue ;
	          
	        } else if (tag_a === 248) {
	          return caml_int_compare(a[1], b[1]);
	        } else if (tag_a === 251) {
	          throw [
	                Caml_builtin_exceptions.invalid_argument,
	                "equal: abstract value"
	              ];
	        } else if (tag_a !== tag_b) {
	          if (tag_a < tag_b) {
	            return -1;
	          } else {
	            return 1;
	          }
	        } else {
	          var len_a = a.length;
	          var len_b = b.length;
	          if (len_a === len_b) {
	            var a$1 = a;
	            var b$1 = b;
	            var _i = 0;
	            var same_length = len_a;
	            while(true) {
	              var i = _i;
	              if (i === same_length) {
	                return 0;
	              } else {
	                var res = caml_compare(a$1[i], b$1[i]);
	                if (res !== 0) {
	                  return res;
	                } else {
	                  _i = i + 1 | 0;
	                  continue ;
	                  
	                }
	              }
	            };
	          } else if (len_a < len_b) {
	            var a$2 = a;
	            var b$2 = b;
	            var _i$1 = 0;
	            var short_length = len_a;
	            while(true) {
	              var i$1 = _i$1;
	              if (i$1 === short_length) {
	                return -1;
	              } else {
	                var res$1 = caml_compare(a$2[i$1], b$2[i$1]);
	                if (res$1 !== 0) {
	                  return res$1;
	                } else {
	                  _i$1 = i$1 + 1 | 0;
	                  continue ;
	                  
	                }
	              }
	            };
	          } else {
	            var a$3 = a;
	            var b$3 = b;
	            var _i$2 = 0;
	            var short_length$1 = len_b;
	            while(true) {
	              var i$2 = _i$2;
	              if (i$2 === short_length$1) {
	                return 1;
	              } else {
	                var res$2 = caml_compare(a$3[i$2], b$3[i$2]);
	                if (res$2 !== 0) {
	                  return res$2;
	                } else {
	                  _i$2 = i$2 + 1 | 0;
	                  continue ;
	                  
	                }
	              }
	            };
	          }
	        }
	      }
	    }
	  };
	}
	
	function caml_equal(_a, _b) {
	  while(true) {
	    var b = _b;
	    var a = _a;
	    if (a === b) {
	      return /* true */1;
	    } else {
	      var a_type = typeof a;
	      if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a_type === "null") {
	        return /* false */0;
	      } else {
	        var b_type = typeof b;
	        if (a_type === "function" || b_type === "function") {
	          throw [
	                Caml_builtin_exceptions.invalid_argument,
	                "equal: functional value"
	              ];
	        } else if (b_type === "number" || b_type === "null" || b_type === "undefined") {
	          return /* false */0;
	        } else {
	          var tag_a = a.tag | 0;
	          var tag_b = b.tag | 0;
	          if (tag_a === 250) {
	            _a = a[0];
	            continue ;
	            
	          } else if (tag_b === 250) {
	            _b = b[0];
	            continue ;
	            
	          } else if (tag_a === 248) {
	            return +(a[1] === b[1]);
	          } else if (tag_a === 251) {
	            throw [
	                  Caml_builtin_exceptions.invalid_argument,
	                  "equal: abstract value"
	                ];
	          } else if (tag_a !== tag_b) {
	            return /* false */0;
	          } else {
	            var len_a = a.length;
	            var len_b = b.length;
	            if (len_a === len_b) {
	              var a$1 = a;
	              var b$1 = b;
	              var _i = 0;
	              var same_length = len_a;
	              while(true) {
	                var i = _i;
	                if (i === same_length) {
	                  return /* true */1;
	                } else if (caml_equal(a$1[i], b$1[i])) {
	                  _i = i + 1 | 0;
	                  continue ;
	                  
	                } else {
	                  return /* false */0;
	                }
	              };
	            } else {
	              return /* false */0;
	            }
	          }
	        }
	      }
	    }
	  };
	}
	
	function caml_notequal(a, b) {
	  return 1 - caml_equal(a, b);
	}
	
	function caml_greaterequal(a, b) {
	  return +(caml_compare(a, b) >= 0);
	}
	
	function caml_greaterthan(a, b) {
	  return +(caml_compare(a, b) > 0);
	}
	
	function caml_lessequal(a, b) {
	  return +(caml_compare(a, b) <= 0);
	}
	
	function caml_lessthan(a, b) {
	  return +(caml_compare(a, b) < 0);
	}
	
	var caml_int32_compare = caml_int_compare;
	
	var caml_nativeint_compare = caml_int_compare;
	
	exports.caml_obj_dup           = caml_obj_dup;
	exports.caml_obj_truncate      = caml_obj_truncate;
	exports.caml_lazy_make_forward = caml_lazy_make_forward;
	exports.caml_update_dummy      = caml_update_dummy;
	exports.caml_int_compare       = caml_int_compare;
	exports.caml_int32_compare     = caml_int32_compare;
	exports.caml_nativeint_compare = caml_nativeint_compare;
	exports.caml_compare           = caml_compare;
	exports.caml_equal             = caml_equal;
	exports.caml_notequal          = caml_notequal;
	exports.caml_greaterequal      = caml_greaterequal;
	exports.caml_greaterthan       = caml_greaterthan;
	exports.caml_lessthan          = caml_lessthan;
	exports.caml_lessequal         = caml_lessequal;
	/* No side effect */


/***/ },
/* 7 */
/*!***************************************!*\
  !*** ./~/bs-platform/lib/js/block.js ***!
  \***************************************/
/***/ function(module, exports) {

	'use strict';
	
	
	function __(tag, block) {
	  block.tag = tag;
	  return block;
	}
	
	exports.__ = __;
	/* No side effect */


/***/ },
/* 8 */
/*!********************************************!*\
  !*** ./~/bs-platform/lib/js/pervasives.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Curry                    = __webpack_require__(/*! ./curry */ 1);
	var Caml_io                  = __webpack_require__(/*! ./caml_io */ 9);
	var Caml_obj                 = __webpack_require__(/*! ./caml_obj */ 6);
	var Caml_format              = __webpack_require__(/*! ./caml_format */ 11);
	var Caml_string              = __webpack_require__(/*! ./caml_string */ 15);
	var Caml_exceptions          = __webpack_require__(/*! ./caml_exceptions */ 16);
	var Caml_builtin_exceptions  = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	var CamlinternalFormatBasics = __webpack_require__(/*! ./camlinternalFormatBasics */ 17);
	
	function failwith(s) {
	  throw [
	        Caml_builtin_exceptions.failure,
	        s
	      ];
	}
	
	function invalid_arg(s) {
	  throw [
	        Caml_builtin_exceptions.invalid_argument,
	        s
	      ];
	}
	
	var Exit = Caml_exceptions.create("Pervasives.Exit");
	
	function min(x, y) {
	  if (Caml_obj.caml_lessequal(x, y)) {
	    return x;
	  } else {
	    return y;
	  }
	}
	
	function max(x, y) {
	  if (Caml_obj.caml_greaterequal(x, y)) {
	    return x;
	  } else {
	    return y;
	  }
	}
	
	function abs(x) {
	  if (x >= 0) {
	    return x;
	  } else {
	    return -x | 0;
	  }
	}
	
	function lnot(x) {
	  return x ^ -1;
	}
	
	var min_int = -2147483648;
	
	function $caret(a, b) {
	  return a + b;
	}
	
	function char_of_int(n) {
	  if (n < 0 || n > 255) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "char_of_int"
	        ];
	  } else {
	    return n;
	  }
	}
	
	function string_of_bool(b) {
	  if (b) {
	    return "true";
	  } else {
	    return "false";
	  }
	}
	
	function bool_of_string(param) {
	  switch (param) {
	    case "false" : 
	        return /* false */0;
	    case "true" : 
	        return /* true */1;
	    default:
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "bool_of_string"
	          ];
	  }
	}
	
	function string_of_int(param) {
	  return "" + param;
	}
	
	function valid_float_lexem(s) {
	  var l = s.length;
	  var _i = 0;
	  while(true) {
	    var i = _i;
	    if (i >= l) {
	      return $caret(s, ".");
	    } else {
	      var match = Caml_string.get(s, i);
	      if (match >= 48) {
	        if (match >= 58) {
	          return s;
	        } else {
	          _i = i + 1 | 0;
	          continue ;
	          
	        }
	      } else if (match !== 45) {
	        return s;
	      } else {
	        _i = i + 1 | 0;
	        continue ;
	        
	      }
	    }
	  };
	}
	
	function string_of_float(f) {
	  return valid_float_lexem(Caml_format.caml_format_float("%.12g", f));
	}
	
	function $at(l1, l2) {
	  if (l1) {
	    return /* :: */[
	            l1[0],
	            $at(l1[1], l2)
	          ];
	  } else {
	    return l2;
	  }
	}
	
	var stdin = Caml_io.stdin;
	
	var stdout = Caml_io.stdout;
	
	var stderr = Caml_io.stderr;
	
	function open_out_gen(_, _$1, _$2) {
	  return Caml_io.caml_ml_open_descriptor_out(function () {
	                throw "caml_sys_open not implemented by bucklescript yet\n";
	              }());
	}
	
	function open_out(name) {
	  return open_out_gen(/* :: */[
	              /* Open_wronly */1,
	              /* :: */[
	                /* Open_creat */3,
	                /* :: */[
	                  /* Open_trunc */4,
	                  /* :: */[
	                    /* Open_text */7,
	                    /* [] */0
	                  ]
	                ]
	              ]
	            ], 438, name);
	}
	
	function open_out_bin(name) {
	  return open_out_gen(/* :: */[
	              /* Open_wronly */1,
	              /* :: */[
	                /* Open_creat */3,
	                /* :: */[
	                  /* Open_trunc */4,
	                  /* :: */[
	                    /* Open_binary */6,
	                    /* [] */0
	                  ]
	                ]
	              ]
	            ], 438, name);
	}
	
	function flush_all() {
	  var _param = Caml_io.caml_ml_out_channels_list(/* () */0);
	  while(true) {
	    var param = _param;
	    if (param) {
	      try {
	        Caml_io.caml_ml_flush(param[0]);
	      }
	      catch (exn){
	        
	      }
	      _param = param[1];
	      continue ;
	      
	    } else {
	      return /* () */0;
	    }
	  };
	}
	
	function output_bytes(oc, s) {
	  return Caml_io.caml_ml_output(oc, s, 0, s.length);
	}
	
	function output_string(oc, s) {
	  return Caml_io.caml_ml_output(oc, s, 0, s.length);
	}
	
	function output(oc, s, ofs, len) {
	  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "output"
	        ];
	  } else {
	    return Caml_io.caml_ml_output(oc, s, ofs, len);
	  }
	}
	
	function output_substring(oc, s, ofs, len) {
	  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "output_substring"
	        ];
	  } else {
	    return Caml_io.caml_ml_output(oc, s, ofs, len);
	  }
	}
	
	function output_value(_, _$1) {
	  return function () {
	            throw "caml_output_value not implemented by bucklescript yet\n";
	          }();
	}
	
	function close_out(oc) {
	  Caml_io.caml_ml_flush(oc);
	  return function () {
	            throw "caml_ml_close_channel not implemented by bucklescript yet\n";
	          }();
	}
	
	function close_out_noerr(oc) {
	  try {
	    Caml_io.caml_ml_flush(oc);
	  }
	  catch (exn){
	    
	  }
	  try {
	    return function () {
	              throw "caml_ml_close_channel not implemented by bucklescript yet\n";
	            }();
	  }
	  catch (exn$1){
	    return /* () */0;
	  }
	}
	
	function open_in_gen(_, _$1, _$2) {
	  return Caml_io.caml_ml_open_descriptor_in(function () {
	                throw "caml_sys_open not implemented by bucklescript yet\n";
	              }());
	}
	
	function open_in(name) {
	  return open_in_gen(/* :: */[
	              /* Open_rdonly */0,
	              /* :: */[
	                /* Open_text */7,
	                /* [] */0
	              ]
	            ], 0, name);
	}
	
	function open_in_bin(name) {
	  return open_in_gen(/* :: */[
	              /* Open_rdonly */0,
	              /* :: */[
	                /* Open_binary */6,
	                /* [] */0
	              ]
	            ], 0, name);
	}
	
	function input(_, s, ofs, len) {
	  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "input"
	        ];
	  } else {
	    return function () {
	              throw "caml_ml_input not implemented by bucklescript yet\n";
	            }();
	  }
	}
	
	function unsafe_really_input(_, _$1, _ofs, _len) {
	  while(true) {
	    var len = _len;
	    var ofs = _ofs;
	    if (len <= 0) {
	      return /* () */0;
	    } else {
	      var r = function () {
	          throw "caml_ml_input not implemented by bucklescript yet\n";
	        }();
	      if (r) {
	        _len = len - r | 0;
	        _ofs = ofs + r | 0;
	        continue ;
	        
	      } else {
	        throw Caml_builtin_exceptions.end_of_file;
	      }
	    }
	  };
	}
	
	function really_input(ic, s, ofs, len) {
	  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "really_input"
	        ];
	  } else {
	    return unsafe_really_input(ic, s, ofs, len);
	  }
	}
	
	function really_input_string(ic, len) {
	  var s = Caml_string.caml_create_string(len);
	  really_input(ic, s, 0, len);
	  return Caml_string.bytes_to_string(s);
	}
	
	function input_line(chan) {
	  var build_result = function (buf, _pos, _param) {
	    while(true) {
	      var param = _param;
	      var pos = _pos;
	      if (param) {
	        var hd = param[0];
	        var len = hd.length;
	        Caml_string.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);
	        _param = param[1];
	        _pos = pos - len | 0;
	        continue ;
	        
	      } else {
	        return buf;
	      }
	    };
	  };
	  var scan = function (_accu, _len) {
	    while(true) {
	      var len = _len;
	      var accu = _accu;
	      var n = function () {
	          throw "caml_ml_input_scan_line not implemented by bucklescript yet\n";
	        }();
	      if (n) {
	        if (n > 0) {
	          var res = Caml_string.caml_create_string(n - 1 | 0);
	          (function () {
	                throw "caml_ml_input not implemented by bucklescript yet\n";
	              }());
	          Caml_io.caml_ml_input_char(chan);
	          if (accu) {
	            var len$1 = (len + n | 0) - 1 | 0;
	            return build_result(Caml_string.caml_create_string(len$1), len$1, /* :: */[
	                        res,
	                        accu
	                      ]);
	          } else {
	            return res;
	          }
	        } else {
	          var beg = Caml_string.caml_create_string(-n | 0);
	          (function () {
	                throw "caml_ml_input not implemented by bucklescript yet\n";
	              }());
	          _len = len - n | 0;
	          _accu = /* :: */[
	            beg,
	            accu
	          ];
	          continue ;
	          
	        }
	      } else if (accu) {
	        return build_result(Caml_string.caml_create_string(len), len, accu);
	      } else {
	        throw Caml_builtin_exceptions.end_of_file;
	      }
	    };
	  };
	  return Caml_string.bytes_to_string(scan(/* [] */0, 0));
	}
	
	function close_in_noerr() {
	  try {
	    return function () {
	              throw "caml_ml_close_channel not implemented by bucklescript yet\n";
	            }();
	  }
	  catch (exn){
	    return /* () */0;
	  }
	}
	
	function print_char(c) {
	  return Caml_io.caml_ml_output_char(stdout, c);
	}
	
	function print_string(s) {
	  return output_string(stdout, s);
	}
	
	function print_bytes(s) {
	  return output_bytes(stdout, s);
	}
	
	function print_int(i) {
	  return output_string(stdout, "" + i);
	}
	
	function print_float(f) {
	  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
	}
	
	function print_endline(param) {
	  console.log(param);
	  return 0;
	}
	
	function print_newline() {
	  Caml_io.caml_ml_output_char(stdout, /* "\n" */10);
	  return Caml_io.caml_ml_flush(stdout);
	}
	
	function prerr_char(c) {
	  return Caml_io.caml_ml_output_char(stderr, c);
	}
	
	function prerr_string(s) {
	  return output_string(stderr, s);
	}
	
	function prerr_bytes(s) {
	  return output_bytes(stderr, s);
	}
	
	function prerr_int(i) {
	  return output_string(stderr, "" + i);
	}
	
	function prerr_float(f) {
	  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
	}
	
	function prerr_endline(param) {
	  console.error(param);
	  return 0;
	}
	
	function prerr_newline() {
	  Caml_io.caml_ml_output_char(stderr, /* "\n" */10);
	  return Caml_io.caml_ml_flush(stderr);
	}
	
	function read_line() {
	  Caml_io.caml_ml_flush(stdout);
	  return input_line(stdin);
	}
	
	function read_int() {
	  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
	}
	
	function read_float() {
	  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
	}
	
	function string_of_format(param) {
	  return param[1];
	}
	
	function $caret$caret(param, param$1) {
	  return /* Format */[
	          CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]),
	          $caret(param[1], $caret("%,", param$1[1]))
	        ];
	}
	
	var exit_function = [flush_all];
	
	function at_exit(f) {
	  var g = exit_function[0];
	  exit_function[0] = function () {
	    Curry._1(f, /* () */0);
	    return Curry._1(g, /* () */0);
	  };
	  return /* () */0;
	}
	
	function do_at_exit() {
	  return Curry._1(exit_function[0], /* () */0);
	}
	
	function exit() {
	  do_at_exit(/* () */0);
	  return function () {
	            throw "caml_sys_exit not implemented by bucklescript yet\n";
	          }();
	}
	
	var max_int = 2147483647;
	
	var infinity = Infinity;
	
	var neg_infinity = -Infinity;
	
	var nan = NaN;
	
	var max_float = Number.MAX_VALUE;
	
	var min_float = Number.MIN_VALUE;
	
	var epsilon_float = 2.220446049250313e-16;
	
	var flush = Caml_io.caml_ml_flush;
	
	var output_char = Caml_io.caml_ml_output_char;
	
	var output_byte = Caml_io.caml_ml_output_char;
	
	function output_binary_int(_, _$1) {
	  return function () {
	            throw "caml_ml_output_int not implemented by bucklescript yet\n";
	          }();
	}
	
	function seek_out(_, _$1) {
	  return function () {
	            throw "caml_ml_seek_out not implemented by bucklescript yet\n";
	          }();
	}
	
	function pos_out() {
	  return function () {
	            throw "caml_ml_pos_out not implemented by bucklescript yet\n";
	          }();
	}
	
	function out_channel_length() {
	  return function () {
	            throw "caml_ml_channel_size not implemented by bucklescript yet\n";
	          }();
	}
	
	function set_binary_mode_out(_, _$1) {
	  return function () {
	            throw "caml_ml_set_binary_mode not implemented by bucklescript yet\n";
	          }();
	}
	
	var input_char = Caml_io.caml_ml_input_char;
	
	var input_byte = Caml_io.caml_ml_input_char;
	
	function input_binary_int() {
	  return function () {
	            throw "caml_ml_input_int not implemented by bucklescript yet\n";
	          }();
	}
	
	function input_value() {
	  return function () {
	            throw "caml_input_value not implemented by bucklescript yet\n";
	          }();
	}
	
	function seek_in(_, _$1) {
	  return function () {
	            throw "caml_ml_seek_in not implemented by bucklescript yet\n";
	          }();
	}
	
	function pos_in() {
	  return function () {
	            throw "caml_ml_pos_in not implemented by bucklescript yet\n";
	          }();
	}
	
	function in_channel_length() {
	  return function () {
	            throw "caml_ml_channel_size not implemented by bucklescript yet\n";
	          }();
	}
	
	function close_in() {
	  return function () {
	            throw "caml_ml_close_channel not implemented by bucklescript yet\n";
	          }();
	}
	
	function set_binary_mode_in(_, _$1) {
	  return function () {
	            throw "caml_ml_set_binary_mode not implemented by bucklescript yet\n";
	          }();
	}
	
	function LargeFile_000(_, _$1) {
	  return function () {
	            throw "caml_ml_seek_out_64 not implemented by bucklescript yet\n";
	          }();
	}
	
	function LargeFile_001() {
	  return function () {
	            throw "caml_ml_pos_out_64 not implemented by bucklescript yet\n";
	          }();
	}
	
	function LargeFile_002() {
	  return function () {
	            throw "caml_ml_channel_size_64 not implemented by bucklescript yet\n";
	          }();
	}
	
	function LargeFile_003(_, _$1) {
	  return function () {
	            throw "caml_ml_seek_in_64 not implemented by bucklescript yet\n";
	          }();
	}
	
	function LargeFile_004() {
	  return function () {
	            throw "caml_ml_pos_in_64 not implemented by bucklescript yet\n";
	          }();
	}
	
	function LargeFile_005() {
	  return function () {
	            throw "caml_ml_channel_size_64 not implemented by bucklescript yet\n";
	          }();
	}
	
	var LargeFile = [
	  LargeFile_000,
	  LargeFile_001,
	  LargeFile_002,
	  LargeFile_003,
	  LargeFile_004,
	  LargeFile_005
	];
	
	exports.invalid_arg         = invalid_arg;
	exports.failwith            = failwith;
	exports.Exit                = Exit;
	exports.min                 = min;
	exports.max                 = max;
	exports.abs                 = abs;
	exports.max_int             = max_int;
	exports.min_int             = min_int;
	exports.lnot                = lnot;
	exports.infinity            = infinity;
	exports.neg_infinity        = neg_infinity;
	exports.nan                 = nan;
	exports.max_float           = max_float;
	exports.min_float           = min_float;
	exports.epsilon_float       = epsilon_float;
	exports.$caret              = $caret;
	exports.char_of_int         = char_of_int;
	exports.string_of_bool      = string_of_bool;
	exports.bool_of_string      = bool_of_string;
	exports.string_of_int       = string_of_int;
	exports.string_of_float     = string_of_float;
	exports.$at                 = $at;
	exports.stdin               = stdin;
	exports.stdout              = stdout;
	exports.stderr              = stderr;
	exports.print_char          = print_char;
	exports.print_string        = print_string;
	exports.print_bytes         = print_bytes;
	exports.print_int           = print_int;
	exports.print_float         = print_float;
	exports.print_endline       = print_endline;
	exports.print_newline       = print_newline;
	exports.prerr_char          = prerr_char;
	exports.prerr_string        = prerr_string;
	exports.prerr_bytes         = prerr_bytes;
	exports.prerr_int           = prerr_int;
	exports.prerr_float         = prerr_float;
	exports.prerr_endline       = prerr_endline;
	exports.prerr_newline       = prerr_newline;
	exports.read_line           = read_line;
	exports.read_int            = read_int;
	exports.read_float          = read_float;
	exports.open_out            = open_out;
	exports.open_out_bin        = open_out_bin;
	exports.open_out_gen        = open_out_gen;
	exports.flush               = flush;
	exports.flush_all           = flush_all;
	exports.output_char         = output_char;
	exports.output_string       = output_string;
	exports.output_bytes        = output_bytes;
	exports.output              = output;
	exports.output_substring    = output_substring;
	exports.output_byte         = output_byte;
	exports.output_binary_int   = output_binary_int;
	exports.output_value        = output_value;
	exports.seek_out            = seek_out;
	exports.pos_out             = pos_out;
	exports.out_channel_length  = out_channel_length;
	exports.close_out           = close_out;
	exports.close_out_noerr     = close_out_noerr;
	exports.set_binary_mode_out = set_binary_mode_out;
	exports.open_in             = open_in;
	exports.open_in_bin         = open_in_bin;
	exports.open_in_gen         = open_in_gen;
	exports.input_char          = input_char;
	exports.input_line          = input_line;
	exports.input               = input;
	exports.really_input        = really_input;
	exports.really_input_string = really_input_string;
	exports.input_byte          = input_byte;
	exports.input_binary_int    = input_binary_int;
	exports.input_value         = input_value;
	exports.seek_in             = seek_in;
	exports.pos_in              = pos_in;
	exports.in_channel_length   = in_channel_length;
	exports.close_in            = close_in;
	exports.close_in_noerr      = close_in_noerr;
	exports.set_binary_mode_in  = set_binary_mode_in;
	exports.LargeFile           = LargeFile;
	exports.string_of_format    = string_of_format;
	exports.$caret$caret        = $caret$caret;
	exports.exit                = exit;
	exports.at_exit             = at_exit;
	exports.valid_float_lexem   = valid_float_lexem;
	exports.unsafe_really_input = unsafe_really_input;
	exports.do_at_exit          = do_at_exit;
	/* No side effect */


/***/ },
/* 9 */
/*!*****************************************!*\
  !*** ./~/bs-platform/lib/js/caml_io.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var Curry                   = __webpack_require__(/*! ./curry */ 1);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function $caret(prim, prim$1) {
	  return prim + prim$1;
	}
	
	var stdin = undefined;
	
	var stdout = /* record */[
	  /* buffer */"",
	  /* output */function (_, s) {
	    var v = s.length - 1 | 0;
	    if (( (typeof process !== "undefined") && process.stdout && process.stdout.write)) {
	      return ( process.stdout.write )(s);
	    } else if (s[v] === "\n") {
	      console.log(s.slice(0, v));
	      return /* () */0;
	    } else {
	      console.log(s);
	      return /* () */0;
	    }
	  }
	];
	
	var stderr = /* record */[
	  /* buffer */"",
	  /* output */function (_, s) {
	    var v = s.length - 1 | 0;
	    if (s[v] === "\n") {
	      console.log(s.slice(0, v));
	      return /* () */0;
	    } else {
	      console.log(s);
	      return /* () */0;
	    }
	  }
	];
	
	function caml_ml_open_descriptor_in() {
	  throw [
	        Caml_builtin_exceptions.failure,
	        "caml_ml_open_descriptor_in not implemented"
	      ];
	}
	
	function caml_ml_open_descriptor_out() {
	  throw [
	        Caml_builtin_exceptions.failure,
	        "caml_ml_open_descriptor_out not implemented"
	      ];
	}
	
	function caml_ml_flush(oc) {
	  if (oc[/* buffer */0] !== "") {
	    Curry._2(oc[/* output */1], oc, oc[/* buffer */0]);
	    oc[/* buffer */0] = "";
	    return /* () */0;
	  } else {
	    return 0;
	  }
	}
	
	var node_std_output = (function (s){
	   return (typeof process !== "undefined") && process.stdout && (process.stdout.write(s), true);
	   }
	);
	
	function caml_ml_output(oc, str, offset, len) {
	  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);
	  if (( (typeof process !== "undefined") && process.stdout && process.stdout.write ) && oc === stdout) {
	    return ( process.stdout.write )(str$1);
	  } else {
	    var id = str$1.lastIndexOf("\n");
	    if (id < 0) {
	      oc[/* buffer */0] = oc[/* buffer */0] + str$1;
	      return /* () */0;
	    } else {
	      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(0, id + 1 | 0);
	      caml_ml_flush(oc);
	      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(id + 1 | 0);
	      return /* () */0;
	    }
	  }
	}
	
	function caml_ml_output_char(oc, $$char) {
	  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);
	}
	
	function caml_ml_input(_, _$1, _$2, _$3) {
	  throw [
	        Caml_builtin_exceptions.failure,
	        "caml_ml_input ic not implemented"
	      ];
	}
	
	function caml_ml_input_char() {
	  throw [
	        Caml_builtin_exceptions.failure,
	        "caml_ml_input_char not implemnted"
	      ];
	}
	
	function caml_ml_out_channels_list() {
	  return /* :: */[
	          stdout,
	          /* :: */[
	            stderr,
	            /* [] */0
	          ]
	        ];
	}
	
	exports.$caret                      = $caret;
	exports.stdin                       = stdin;
	exports.stdout                      = stdout;
	exports.stderr                      = stderr;
	exports.caml_ml_open_descriptor_in  = caml_ml_open_descriptor_in;
	exports.caml_ml_open_descriptor_out = caml_ml_open_descriptor_out;
	exports.caml_ml_flush               = caml_ml_flush;
	exports.node_std_output             = node_std_output;
	exports.caml_ml_output              = caml_ml_output;
	exports.caml_ml_output_char         = caml_ml_output_char;
	exports.caml_ml_input               = caml_ml_input;
	exports.caml_ml_input_char          = caml_ml_input_char;
	exports.caml_ml_out_channels_list   = caml_ml_out_channels_list;
	/* stdin Not a pure module */
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 10)))

/***/ },
/* 10 */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 11 */
/*!*********************************************!*\
  !*** ./~/bs-platform/lib/js/caml_format.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Curry                   = __webpack_require__(/*! ./curry */ 1);
	var Caml_int32              = __webpack_require__(/*! ./caml_int32 */ 12);
	var Caml_int64              = __webpack_require__(/*! ./caml_int64 */ 13);
	var Caml_utils              = __webpack_require__(/*! ./caml_utils */ 14);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function caml_failwith(s) {
	  throw [
	        Caml_builtin_exceptions.failure,
	        s
	      ];
	}
	
	function parse_digit(c) {
	  if (c >= 65) {
	    if (c >= 97) {
	      if (c >= 123) {
	        return -1;
	      } else {
	        return c - 87 | 0;
	      }
	    } else if (c >= 91) {
	      return -1;
	    } else {
	      return c - 55 | 0;
	    }
	  } else if (c > 57 || c < 48) {
	    return -1;
	  } else {
	    return c - /* "0" */48 | 0;
	  }
	}
	
	function int_of_string_base(param) {
	  switch (param) {
	    case 0 : 
	        return 8;
	    case 1 : 
	        return 16;
	    case 2 : 
	        return 10;
	    case 3 : 
	        return 2;
	    
	  }
	}
	
	function parse_sign_and_base(s) {
	  var sign = 1;
	  var base = /* Dec */2;
	  var i = 0;
	  if (s[i] === "-") {
	    sign = -1;
	    i = i + 1 | 0;
	  }
	  var match = s.charCodeAt(i);
	  var match$1 = s.charCodeAt(i + 1 | 0);
	  if (match === 48) {
	    if (match$1 >= 89) {
	      if (match$1 !== 98) {
	        if (match$1 !== 111) {
	          if (match$1 === 120) {
	            base = /* Hex */1;
	            i = i + 2 | 0;
	          }
	          
	        } else {
	          base = /* Oct */0;
	          i = i + 2 | 0;
	        }
	      } else {
	        base = /* Bin */3;
	        i = i + 2 | 0;
	      }
	    } else if (match$1 !== 66) {
	      if (match$1 !== 79) {
	        if (match$1 >= 88) {
	          base = /* Hex */1;
	          i = i + 2 | 0;
	        }
	        
	      } else {
	        base = /* Oct */0;
	        i = i + 2 | 0;
	      }
	    } else {
	      base = /* Bin */3;
	      i = i + 2 | 0;
	    }
	  }
	  return /* tuple */[
	          i,
	          sign,
	          base
	        ];
	}
	
	function caml_int_of_string(s) {
	  var match = parse_sign_and_base(s);
	  var i = match[0];
	  var base = int_of_string_base(match[2]);
	  var threshold = 4294967295;
	  var len = s.length;
	  var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
	  var d = parse_digit(c);
	  if (d < 0 || d >= base) {
	    throw [
	          Caml_builtin_exceptions.failure,
	          "int_of_string"
	        ];
	  }
	  var aux = function (_acc, _k) {
	    while(true) {
	      var k = _k;
	      var acc = _acc;
	      if (k === len) {
	        return acc;
	      } else {
	        var a = s.charCodeAt(k);
	        if (a === /* "_" */95) {
	          _k = k + 1 | 0;
	          continue ;
	          
	        } else {
	          var v = parse_digit(a);
	          if (v < 0 || v >= base) {
	            throw [
	                  Caml_builtin_exceptions.failure,
	                  "int_of_string"
	                ];
	          } else {
	            var acc$1 = base * acc + v;
	            if (acc$1 > threshold) {
	              throw [
	                    Caml_builtin_exceptions.failure,
	                    "int_of_string"
	                  ];
	            } else {
	              _k = k + 1 | 0;
	              _acc = acc$1;
	              continue ;
	              
	            }
	          }
	        }
	      }
	    };
	  };
	  var res = match[1] * aux(d, i + 1 | 0);
	  var or_res = res | 0;
	  if (base === 10 && res !== or_res) {
	    throw [
	          Caml_builtin_exceptions.failure,
	          "int_of_string"
	        ];
	  }
	  return or_res;
	}
	
	function caml_int64_of_string(s) {
	  var match = parse_sign_and_base(s);
	  var hbase = match[2];
	  var i = match[0];
	  var base = Caml_int64.of_int32(int_of_string_base(hbase));
	  var sign = Caml_int64.of_int32(match[1]);
	  var threshold;
	  switch (hbase) {
	    case 0 : 
	        threshold = /* int64 */[
	          /* hi */536870911,
	          /* lo */4294967295
	        ];
	        break;
	    case 1 : 
	        threshold = /* int64 */[
	          /* hi */268435455,
	          /* lo */4294967295
	        ];
	        break;
	    case 2 : 
	        threshold = /* int64 */[
	          /* hi */429496729,
	          /* lo */2576980377
	        ];
	        break;
	    case 3 : 
	        threshold = /* int64 */[
	          /* hi */2147483647,
	          /* lo */4294967295
	        ];
	        break;
	    
	  }
	  var len = s.length;
	  var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
	  var d = Caml_int64.of_int32(parse_digit(c));
	  if (Caml_int64.lt(d, /* int64 */[
	          /* hi */0,
	          /* lo */0
	        ]) || Caml_int64.ge(d, base)) {
	    throw [
	          Caml_builtin_exceptions.failure,
	          "int64_of_string"
	        ];
	  }
	  var aux = function (_acc, _k) {
	    while(true) {
	      var k = _k;
	      var acc = _acc;
	      if (k === len) {
	        return acc;
	      } else {
	        var a = s.charCodeAt(k);
	        if (a === /* "_" */95) {
	          _k = k + 1 | 0;
	          continue ;
	          
	        } else {
	          var v = Caml_int64.of_int32(parse_digit(a));
	          if (Caml_int64.lt(v, /* int64 */[
	                  /* hi */0,
	                  /* lo */0
	                ]) || Caml_int64.ge(v, base)) {
	            throw [
	                  Caml_builtin_exceptions.failure,
	                  "int64_of_string"
	                ];
	          } else {
	            var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);
	            if (Caml_int64.gt(acc$1, threshold)) {
	              throw [
	                    Caml_builtin_exceptions.failure,
	                    "int64_of_string"
	                  ];
	            } else {
	              _k = k + 1 | 0;
	              _acc = acc$1;
	              continue ;
	              
	            }
	          }
	        }
	      }
	    };
	  };
	  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));
	  var or_res = Caml_int64.or_(res, /* int64 */[
	        /* hi */0,
	        /* lo */0
	      ]);
	  if (Caml_int64.eq(base, /* int64 */[
	          /* hi */0,
	          /* lo */10
	        ]) && Caml_int64.neq(res, or_res)) {
	    throw [
	          Caml_builtin_exceptions.failure,
	          "int64_of_string"
	        ];
	  }
	  return or_res;
	}
	
	function int_of_base(param) {
	  switch (param) {
	    case 0 : 
	        return 8;
	    case 1 : 
	        return 16;
	    case 2 : 
	        return 10;
	    
	  }
	}
	
	function lowercase(c) {
	  if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
	    return c + 32 | 0;
	  } else {
	    return c;
	  }
	}
	
	function parse_format(fmt) {
	  var len = fmt.length;
	  if (len > 31) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "format_int: format too long"
	        ];
	  }
	  var f = /* record */[
	    /* justify */"+",
	    /* signstyle */"-",
	    /* filter */" ",
	    /* alternate : false */0,
	    /* base : Dec */2,
	    /* signedconv : false */0,
	    /* width */0,
	    /* uppercase : false */0,
	    /* sign */1,
	    /* prec */-1,
	    /* conv */"f"
	  ];
	  var _i = 0;
	  while(true) {
	    var i = _i;
	    if (i >= len) {
	      return f;
	    } else {
	      var c = fmt.charCodeAt(i);
	      var exit = 0;
	      if (c >= 69) {
	        if (c >= 88) {
	          if (c >= 121) {
	            exit = 1;
	          } else {
	            switch (c - 88 | 0) {
	              case 0 : 
	                  f[/* base */4] = /* Hex */1;
	                  f[/* uppercase */7] = /* true */1;
	                  _i = i + 1 | 0;
	                  continue ;
	                  case 13 : 
	              case 14 : 
	              case 15 : 
	                  exit = 5;
	                  break;
	              case 12 : 
	              case 17 : 
	                  exit = 4;
	                  break;
	              case 23 : 
	                  f[/* base */4] = /* Oct */0;
	                  _i = i + 1 | 0;
	                  continue ;
	                  case 29 : 
	                  f[/* base */4] = /* Dec */2;
	                  _i = i + 1 | 0;
	                  continue ;
	                  case 1 : 
	              case 2 : 
	              case 3 : 
	              case 4 : 
	              case 5 : 
	              case 6 : 
	              case 7 : 
	              case 8 : 
	              case 9 : 
	              case 10 : 
	              case 11 : 
	              case 16 : 
	              case 18 : 
	              case 19 : 
	              case 20 : 
	              case 21 : 
	              case 22 : 
	              case 24 : 
	              case 25 : 
	              case 26 : 
	              case 27 : 
	              case 28 : 
	              case 30 : 
	              case 31 : 
	                  exit = 1;
	                  break;
	              case 32 : 
	                  f[/* base */4] = /* Hex */1;
	                  _i = i + 1 | 0;
	                  continue ;
	                  
	            }
	          }
	        } else if (c >= 72) {
	          exit = 1;
	        } else {
	          f[/* signedconv */5] = /* true */1;
	          f[/* uppercase */7] = /* true */1;
	          f[/* conv */10] = String.fromCharCode(lowercase(c));
	          _i = i + 1 | 0;
	          continue ;
	          
	        }
	      } else {
	        var switcher = c - 32 | 0;
	        if (switcher > 25 || switcher < 0) {
	          exit = 1;
	        } else {
	          switch (switcher) {
	            case 3 : 
	                f[/* alternate */3] = /* true */1;
	                _i = i + 1 | 0;
	                continue ;
	                case 0 : 
	            case 11 : 
	                exit = 2;
	                break;
	            case 13 : 
	                f[/* justify */0] = "-";
	                _i = i + 1 | 0;
	                continue ;
	                case 14 : 
	                f[/* prec */9] = 0;
	                var j = i + 1 | 0;
	                while((function(j){
	                    return function () {
	                      var w = fmt.charCodeAt(j) - /* "0" */48 | 0;
	                      return +(w >= 0 && w <= 9);
	                    }
	                    }(j))()) {
	                  f[/* prec */9] = (Caml_int32.imul(f[/* prec */9], 10) + fmt.charCodeAt(j) | 0) - /* "0" */48 | 0;
	                  j = j + 1 | 0;
	                };
	                _i = j;
	                continue ;
	                case 1 : 
	            case 2 : 
	            case 4 : 
	            case 5 : 
	            case 6 : 
	            case 7 : 
	            case 8 : 
	            case 9 : 
	            case 10 : 
	            case 12 : 
	            case 15 : 
	                exit = 1;
	                break;
	            case 16 : 
	                f[/* filter */2] = "0";
	                _i = i + 1 | 0;
	                continue ;
	                case 17 : 
	            case 18 : 
	            case 19 : 
	            case 20 : 
	            case 21 : 
	            case 22 : 
	            case 23 : 
	            case 24 : 
	            case 25 : 
	                exit = 3;
	                break;
	            
	          }
	        }
	      }
	      switch (exit) {
	        case 1 : 
	            _i = i + 1 | 0;
	            continue ;
	            case 2 : 
	            f[/* signstyle */1] = String.fromCharCode(c);
	            _i = i + 1 | 0;
	            continue ;
	            case 3 : 
	            f[/* width */6] = 0;
	            var j$1 = i;
	            while((function(j$1){
	                return function () {
	                  var w = fmt.charCodeAt(j$1) - /* "0" */48 | 0;
	                  return +(w >= 0 && w <= 9);
	                }
	                }(j$1))()) {
	              f[/* width */6] = (Caml_int32.imul(f[/* width */6], 10) + fmt.charCodeAt(j$1) | 0) - /* "0" */48 | 0;
	              j$1 = j$1 + 1 | 0;
	            };
	            _i = j$1;
	            continue ;
	            case 4 : 
	            f[/* signedconv */5] = /* true */1;
	            f[/* base */4] = /* Dec */2;
	            _i = i + 1 | 0;
	            continue ;
	            case 5 : 
	            f[/* signedconv */5] = /* true */1;
	            f[/* conv */10] = String.fromCharCode(c);
	            _i = i + 1 | 0;
	            continue ;
	            
	      }
	    }
	  };
	}
	
	function finish_formatting(param, rawbuffer) {
	  var justify = param[/* justify */0];
	  var signstyle = param[/* signstyle */1];
	  var filter = param[/* filter */2];
	  var alternate = param[/* alternate */3];
	  var base = param[/* base */4];
	  var signedconv = param[/* signedconv */5];
	  var width = param[/* width */6];
	  var uppercase = param[/* uppercase */7];
	  var sign = param[/* sign */8];
	  var len = rawbuffer.length;
	  if (signedconv && (sign < 0 || signstyle !== "-")) {
	    len = len + 1 | 0;
	  }
	  if (alternate) {
	    if (base) {
	      if (base === /* Hex */1) {
	        len = len + 2 | 0;
	      }
	      
	    } else {
	      len = len + 1 | 0;
	    }
	  }
	  var buffer = "";
	  if (justify === "+" && filter === " ") {
	    for(var i = len ,i_finish = width - 1 | 0; i <= i_finish; ++i){
	      buffer = buffer + filter;
	    }
	  }
	  if (signedconv) {
	    if (sign < 0) {
	      buffer = buffer + "-";
	    } else if (signstyle !== "-") {
	      buffer = buffer + signstyle;
	    }
	    
	  }
	  if (alternate && base === /* Oct */0) {
	    buffer = buffer + "0";
	  }
	  if (alternate && base === /* Hex */1) {
	    buffer = buffer + "0x";
	  }
	  if (justify === "+" && filter === "0") {
	    for(var i$1 = len ,i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1){
	      buffer = buffer + filter;
	    }
	  }
	  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;
	  if (justify === "-") {
	    for(var i$2 = len ,i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2){
	      buffer = buffer + " ";
	    }
	  }
	  return buffer;
	}
	
	function caml_format_int(fmt, i) {
	  if (fmt === "%d") {
	    return String(i);
	  } else {
	    var f = parse_format(fmt);
	    var f$1 = f;
	    var i$1 = i;
	    var i$2 = i$1 < 0 ? (
	        f$1[/* signedconv */5] ? (f$1[/* sign */8] = -1, -i$1) : (i$1 >>> 0)
	      ) : i$1;
	    var s = i$2.toString(int_of_base(f$1[/* base */4]));
	    if (f$1[/* prec */9] >= 0) {
	      f$1[/* filter */2] = " ";
	      var n = f$1[/* prec */9] - s.length | 0;
	      if (n > 0) {
	        s = Caml_utils.repeat(n, "0") + s;
	      }
	      
	    }
	    return finish_formatting(f$1, s);
	  }
	}
	
	function caml_int64_format(fmt, x) {
	  var f = parse_format(fmt);
	  var x$1 = f[/* signedconv */5] && Caml_int64.lt(x, /* int64 */[
	        /* hi */0,
	        /* lo */0
	      ]) ? (f[/* sign */8] = -1, Caml_int64.neg(x)) : x;
	  var s = "";
	  var match = f[/* base */4];
	  switch (match) {
	    case 0 : 
	        var wbase = /* int64 */[
	          /* hi */0,
	          /* lo */8
	        ];
	        var cvtbl = "01234567";
	        if (Caml_int64.lt(x$1, /* int64 */[
	                /* hi */0,
	                /* lo */0
	              ])) {
	          var y = Caml_int64.discard_sign(x$1);
	          var match$1 = Caml_int64.div_mod(y, wbase);
	          var quotient = Caml_int64.add(/* int64 */[
	                /* hi */268435456,
	                /* lo */0
	              ], match$1[0]);
	          var modulus = match$1[1];
	          s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;
	          while(Caml_int64.neq(quotient, /* int64 */[
	                  /* hi */0,
	                  /* lo */0
	                ])) {
	            var match$2 = Caml_int64.div_mod(quotient, wbase);
	            quotient = match$2[0];
	            modulus = match$2[1];
	            s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;
	          };
	        } else {
	          var match$3 = Caml_int64.div_mod(x$1, wbase);
	          var quotient$1 = match$3[0];
	          var modulus$1 = match$3[1];
	          s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;
	          while(Caml_int64.neq(quotient$1, /* int64 */[
	                  /* hi */0,
	                  /* lo */0
	                ])) {
	            var match$4 = Caml_int64.div_mod(quotient$1, wbase);
	            quotient$1 = match$4[0];
	            modulus$1 = match$4[1];
	            s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;
	          };
	        }
	        break;
	    case 1 : 
	        s = Caml_int64.to_hex(x$1) + s;
	        break;
	    case 2 : 
	        var wbase$1 = /* int64 */[
	          /* hi */0,
	          /* lo */10
	        ];
	        var cvtbl$1 = "0123456789";
	        if (Caml_int64.lt(x$1, /* int64 */[
	                /* hi */0,
	                /* lo */0
	              ])) {
	          var y$1 = Caml_int64.discard_sign(x$1);
	          var match$5 = Caml_int64.div_mod(y$1, wbase$1);
	          var match$6 = Caml_int64.div_mod(Caml_int64.add(/* int64 */[
	                    /* hi */0,
	                    /* lo */8
	                  ], match$5[1]), wbase$1);
	          var quotient$2 = Caml_int64.add(Caml_int64.add(/* int64 */[
	                    /* hi */214748364,
	                    /* lo */3435973836
	                  ], match$5[0]), match$6[0]);
	          var modulus$2 = match$6[1];
	          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;
	          while(Caml_int64.neq(quotient$2, /* int64 */[
	                  /* hi */0,
	                  /* lo */0
	                ])) {
	            var match$7 = Caml_int64.div_mod(quotient$2, wbase$1);
	            quotient$2 = match$7[0];
	            modulus$2 = match$7[1];
	            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;
	          };
	        } else {
	          var match$8 = Caml_int64.div_mod(x$1, wbase$1);
	          var quotient$3 = match$8[0];
	          var modulus$3 = match$8[1];
	          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;
	          while(Caml_int64.neq(quotient$3, /* int64 */[
	                  /* hi */0,
	                  /* lo */0
	                ])) {
	            var match$9 = Caml_int64.div_mod(quotient$3, wbase$1);
	            quotient$3 = match$9[0];
	            modulus$3 = match$9[1];
	            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;
	          };
	        }
	        break;
	    
	  }
	  if (f[/* prec */9] >= 0) {
	    f[/* filter */2] = " ";
	    var n = f[/* prec */9] - s.length | 0;
	    if (n > 0) {
	      s = Caml_utils.repeat(n, "0") + s;
	    }
	    
	  }
	  return finish_formatting(f, s);
	}
	
	function caml_format_float(fmt, x) {
	  var f = parse_format(fmt);
	  var prec = f[/* prec */9] < 0 ? 6 : f[/* prec */9];
	  var x$1 = x < 0 ? (f[/* sign */8] = -1, -x) : x;
	  var s = "";
	  if (isNaN(x$1)) {
	    s = "nan";
	    f[/* filter */2] = " ";
	  } else if (isFinite(x$1)) {
	    var match = f[/* conv */10];
	    switch (match) {
	      case "e" : 
	          s = x$1.toExponential(prec);
	          var i = s.length;
	          if (s[i - 3 | 0] === "e") {
	            s = s.slice(0, i - 1 | 0) + ("0" + s.slice(i - 1 | 0));
	          }
	          break;
	      case "f" : 
	          s = x$1.toFixed(prec);
	          break;
	      case "g" : 
	          var prec$1 = prec !== 0 ? prec : 1;
	          s = x$1.toExponential(prec$1 - 1 | 0);
	          var j = s.indexOf("e");
	          var exp = Number(s.slice(j + 1 | 0)) | 0;
	          if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {
	            var i$1 = j - 1 | 0;
	            while(s[i$1] === "0") {
	              i$1 = i$1 - 1 | 0;
	            };
	            if (s[i$1] === ".") {
	              i$1 = i$1 - 1 | 0;
	            }
	            s = s.slice(0, i$1 + 1 | 0) + s.slice(j);
	            var i$2 = s.length;
	            if (s[i$2 - 3 | 0] === "e") {
	              s = s.slice(0, i$2 - 1 | 0) + ("0" + s.slice(i$2 - 1 | 0));
	            }
	            
	          } else {
	            var p = prec$1;
	            if (exp < 0) {
	              p = p - (exp + 1 | 0) | 0;
	              s = x$1.toFixed(p);
	            } else {
	              while(function () {
	                    s = x$1.toFixed(p);
	                    return +(s.length > (prec$1 + 1 | 0));
	                  }()) {
	                p = p - 1 | 0;
	              };
	            }
	            if (p !== 0) {
	              var k = s.length - 1 | 0;
	              while(s[k] === "0") {
	                k = k - 1 | 0;
	              };
	              if (s[k] === ".") {
	                k = k - 1 | 0;
	              }
	              s = s.slice(0, k + 1 | 0);
	            }
	            
	          }
	          break;
	      default:
	        
	    }
	  } else {
	    s = "inf";
	    f[/* filter */2] = " ";
	  }
	  return finish_formatting(f, s);
	}
	
	var float_of_string = (
	  function (s, caml_failwith) {
	    var res = +s;
	    if ((s.length > 0) && (res === res))
	        return res;
	    s = s.replace(/_/g, "");
	    res = +s;
	    if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {
	        return res;
	    }
	    ;
	    if (/^ *0x[0-9a-f_]+p[+-]?[0-9_]+/i.test(s)) {
	        var pidx = s.indexOf('p');
	        pidx = (pidx == -1) ? s.indexOf('P') : pidx;
	        var exp = +s.substring(pidx + 1);
	        res = +s.substring(0, pidx);
	        return res * Math.pow(2, exp);
	    }
	    if (/^\+?inf(inity)?$/i.test(s))
	        return Infinity;
	    if (/^-inf(inity)?$/i.test(s))
	        return -Infinity;
	    caml_failwith("float_of_string");
	}
	
	);
	
	function caml_float_of_string(s) {
	  return Curry._2(float_of_string, s, caml_failwith);
	}
	
	var caml_nativeint_format = caml_format_int;
	
	var caml_int32_format = caml_format_int;
	
	var caml_int32_of_string = caml_int_of_string;
	
	var caml_nativeint_of_string = caml_int_of_string;
	
	exports.caml_format_float        = caml_format_float;
	exports.caml_format_int          = caml_format_int;
	exports.caml_nativeint_format    = caml_nativeint_format;
	exports.caml_int32_format        = caml_int32_format;
	exports.caml_float_of_string     = caml_float_of_string;
	exports.caml_int64_format        = caml_int64_format;
	exports.caml_int_of_string       = caml_int_of_string;
	exports.caml_int32_of_string     = caml_int32_of_string;
	exports.caml_int64_of_string     = caml_int64_of_string;
	exports.caml_nativeint_of_string = caml_nativeint_of_string;
	/* float_of_string Not a pure module */


/***/ },
/* 12 */
/*!********************************************!*\
  !*** ./~/bs-platform/lib/js/caml_int32.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function div(x, y) {
	  if (y === 0) {
	    throw Caml_builtin_exceptions.division_by_zero;
	  } else {
	    return x / y | 0;
	  }
	}
	
	function mod_(x, y) {
	  if (y === 0) {
	    throw Caml_builtin_exceptions.division_by_zero;
	  } else {
	    return x % y;
	  }
	}
	
	function caml_bswap16(x) {
	  return ((x & 255) << 8) | ((x & 65280) >>> 8);
	}
	
	function caml_int32_bswap(x) {
	  return ((x & 255) << 24) | ((x & 65280) << 8) | ((x & 16711680) >>> 8) | ((x & 4278190080) >>> 24);
	}
	
	var imul = ( Math.imul || function (x,y) {
	  y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; 
	}
	);
	
	var caml_nativeint_bswap = caml_int32_bswap;
	
	exports.div                  = div;
	exports.mod_                 = mod_;
	exports.caml_bswap16         = caml_bswap16;
	exports.caml_int32_bswap     = caml_int32_bswap;
	exports.caml_nativeint_bswap = caml_nativeint_bswap;
	exports.imul                 = imul;
	/* imul Not a pure module */


/***/ },
/* 13 */
/*!********************************************!*\
  !*** ./~/bs-platform/lib/js/caml_int64.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_obj                = __webpack_require__(/*! ./caml_obj */ 6);
	var Caml_int32              = __webpack_require__(/*! ./caml_int32 */ 12);
	var Caml_utils              = __webpack_require__(/*! ./caml_utils */ 14);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	var min_int = /* record */[
	  /* hi */-2147483648,
	  /* lo */0
	];
	
	var max_int = /* record */[
	  /* hi */134217727,
	  /* lo */1
	];
	
	var one = /* record */[
	  /* hi */0,
	  /* lo */1
	];
	
	var zero = /* record */[
	  /* hi */0,
	  /* lo */0
	];
	
	var neg_one = /* record */[
	  /* hi */-1,
	  /* lo */4294967295
	];
	
	function neg_signed(x) {
	  return +((x & 2147483648) !== 0);
	}
	
	function add(param, param$1) {
	  var other_low_ = param$1[/* lo */1];
	  var this_low_ = param[/* lo */1];
	  var lo = this_low_ + other_low_ & 4294967295;
	  var overflow = neg_signed(this_low_) && (neg_signed(other_low_) || !neg_signed(lo)) || neg_signed(other_low_) && !neg_signed(lo) ? 1 : 0;
	  var hi = param[/* hi */0] + param$1[/* hi */0] + overflow & 4294967295;
	  return /* record */[
	          /* hi */hi,
	          /* lo */(lo >>> 0)
	        ];
	}
	
	function not(param) {
	  var hi = param[/* hi */0] ^ -1;
	  var lo = param[/* lo */1] ^ -1;
	  return /* record */[
	          /* hi */hi,
	          /* lo */(lo >>> 0)
	        ];
	}
	
	function eq(x, y) {
	  if (x[/* hi */0] === y[/* hi */0]) {
	    return +(x[/* lo */1] === y[/* lo */1]);
	  } else {
	    return /* false */0;
	  }
	}
	
	function neg(x) {
	  if (eq(x, min_int)) {
	    return min_int;
	  } else {
	    return add(not(x), one);
	  }
	}
	
	function sub(x, y) {
	  return add(x, neg(y));
	}
	
	function lsl_(x, numBits) {
	  if (numBits) {
	    var lo = x[/* lo */1];
	    if (numBits >= 32) {
	      return /* record */[
	              /* hi */(lo << (numBits - 32 | 0)),
	              /* lo */0
	            ];
	    } else {
	      var hi = (lo >>> (32 - numBits | 0)) | (x[/* hi */0] << numBits);
	      return /* record */[
	              /* hi */hi,
	              /* lo */((lo << numBits) >>> 0)
	            ];
	    }
	  } else {
	    return x;
	  }
	}
	
	function lsr_(x, numBits) {
	  if (numBits) {
	    var hi = x[/* hi */0];
	    var offset = numBits - 32 | 0;
	    if (offset) {
	      if (offset > 0) {
	        var lo = (hi >>> offset);
	        return /* record */[
	                /* hi */0,
	                /* lo */(lo >>> 0)
	              ];
	      } else {
	        var hi$1 = (hi >>> numBits);
	        var lo$1 = (hi << (-offset | 0)) | (x[/* lo */1] >>> numBits);
	        return /* record */[
	                /* hi */hi$1,
	                /* lo */(lo$1 >>> 0)
	              ];
	      }
	    } else {
	      return /* record */[
	              /* hi */0,
	              /* lo */(hi >>> 0)
	            ];
	    }
	  } else {
	    return x;
	  }
	}
	
	function asr_(x, numBits) {
	  if (numBits) {
	    var hi = x[/* hi */0];
	    if (numBits < 32) {
	      var hi$1 = (hi >> numBits);
	      var lo = (hi << (32 - numBits | 0)) | (x[/* lo */1] >>> numBits);
	      return /* record */[
	              /* hi */hi$1,
	              /* lo */(lo >>> 0)
	            ];
	    } else {
	      var lo$1 = (hi >> (numBits - 32 | 0));
	      return /* record */[
	              /* hi */hi >= 0 ? 0 : -1,
	              /* lo */(lo$1 >>> 0)
	            ];
	    }
	  } else {
	    return x;
	  }
	}
	
	function is_zero(param) {
	  if (param[/* hi */0] !== 0 || param[/* lo */1] !== 0) {
	    return /* false */0;
	  } else {
	    return /* true */1;
	  }
	}
	
	function mul(_this, _other) {
	  while(true) {
	    var other = _other;
	    var $$this = _this;
	    var exit = 0;
	    var lo;
	    var this_hi = $$this[/* hi */0];
	    var exit$1 = 0;
	    var exit$2 = 0;
	    var exit$3 = 0;
	    if (this_hi !== 0) {
	      exit$3 = 4;
	    } else if ($$this[/* lo */1] !== 0) {
	      exit$3 = 4;
	    } else {
	      return zero;
	    }
	    if (exit$3 === 4) {
	      if (other[/* hi */0] !== 0) {
	        exit$2 = 3;
	      } else if (other[/* lo */1] !== 0) {
	        exit$2 = 3;
	      } else {
	        return zero;
	      }
	    }
	    if (exit$2 === 3) {
	      if (this_hi !== -2147483648) {
	        exit$1 = 2;
	      } else if ($$this[/* lo */1] !== 0) {
	        exit$1 = 2;
	      } else {
	        lo = other[/* lo */1];
	        exit = 1;
	      }
	    }
	    if (exit$1 === 2) {
	      var other_hi = other[/* hi */0];
	      var lo$1 = $$this[/* lo */1];
	      var exit$4 = 0;
	      if (other_hi !== -2147483648) {
	        exit$4 = 3;
	      } else if (other[/* lo */1] !== 0) {
	        exit$4 = 3;
	      } else {
	        lo = lo$1;
	        exit = 1;
	      }
	      if (exit$4 === 3) {
	        var other_lo = other[/* lo */1];
	        if (this_hi < 0) {
	          if (other_hi < 0) {
	            _other = neg(other);
	            _this = neg($$this);
	            continue ;
	            
	          } else {
	            return neg(mul(neg($$this), other));
	          }
	        } else if (other_hi < 0) {
	          return neg(mul($$this, neg(other)));
	        } else {
	          var a48 = (this_hi >>> 16);
	          var a32 = this_hi & 65535;
	          var a16 = (lo$1 >>> 16);
	          var a00 = lo$1 & 65535;
	          var b48 = (other_hi >>> 16);
	          var b32 = other_hi & 65535;
	          var b16 = (other_lo >>> 16);
	          var b00 = other_lo & 65535;
	          var c48 = 0;
	          var c32 = 0;
	          var c16 = 0;
	          var c00 = a00 * b00;
	          c16 = (c00 >>> 16) + a16 * b00;
	          c32 = (c16 >>> 16);
	          c16 = (c16 & 65535) + a00 * b16;
	          c32 = c32 + (c16 >>> 16) + a32 * b00;
	          c48 = (c32 >>> 16);
	          c32 = (c32 & 65535) + a16 * b16;
	          c48 += (c32 >>> 16);
	          c32 = (c32 & 65535) + a00 * b32;
	          c48 += (c32 >>> 16);
	          c32 = c32 & 65535;
	          c48 = c48 + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48) & 65535;
	          var hi = c32 | (c48 << 16);
	          var lo$2 = c00 & 65535 | ((c16 & 65535) << 16);
	          return /* record */[
	                  /* hi */hi,
	                  /* lo */(lo$2 >>> 0)
	                ];
	        }
	      }
	      
	    }
	    if (exit === 1) {
	      if ((lo & 1) === 0) {
	        return zero;
	      } else {
	        return min_int;
	      }
	    }
	    
	  };
	}
	
	function swap(param) {
	  var hi = Caml_int32.caml_int32_bswap(param[/* lo */1]);
	  var lo = Caml_int32.caml_int32_bswap(param[/* hi */0]);
	  return /* record */[
	          /* hi */hi,
	          /* lo */(lo >>> 0)
	        ];
	}
	
	function xor(param, param$1) {
	  return /* record */[
	          /* hi */param[/* hi */0] ^ param$1[/* hi */0],
	          /* lo */((param[/* lo */1] ^ param$1[/* lo */1]) >>> 0)
	        ];
	}
	
	function or_(param, param$1) {
	  return /* record */[
	          /* hi */param[/* hi */0] | param$1[/* hi */0],
	          /* lo */((param[/* lo */1] | param$1[/* lo */1]) >>> 0)
	        ];
	}
	
	function and_(param, param$1) {
	  return /* record */[
	          /* hi */param[/* hi */0] & param$1[/* hi */0],
	          /* lo */((param[/* lo */1] & param$1[/* lo */1]) >>> 0)
	        ];
	}
	
	function ge(param, param$1) {
	  var other_hi = param$1[/* hi */0];
	  var hi = param[/* hi */0];
	  if (hi > other_hi) {
	    return /* true */1;
	  } else if (hi < other_hi) {
	    return /* false */0;
	  } else {
	    return +(param[/* lo */1] >= param$1[/* lo */1]);
	  }
	}
	
	function neq(x, y) {
	  return 1 - eq(x, y);
	}
	
	function lt(x, y) {
	  return 1 - ge(x, y);
	}
	
	function gt(x, y) {
	  if (x[/* hi */0] > y[/* hi */0]) {
	    return /* true */1;
	  } else if (x[/* hi */0] < y[/* hi */0]) {
	    return /* false */0;
	  } else {
	    return +(x[/* lo */1] > y[/* lo */1]);
	  }
	}
	
	function le(x, y) {
	  return 1 - gt(x, y);
	}
	
	function to_float(param) {
	  return param[/* hi */0] * (0x100000000) + param[/* lo */1];
	}
	
	var two_ptr_32_dbl = Math.pow(2, 32);
	
	var two_ptr_63_dbl = Math.pow(2, 63);
	
	var neg_two_ptr_63 = -Math.pow(2, 63);
	
	function of_float(x) {
	  if (isNaN(x) || !isFinite(x)) {
	    return zero;
	  } else if (x <= neg_two_ptr_63) {
	    return min_int;
	  } else if (x + 1 >= two_ptr_63_dbl) {
	    return max_int;
	  } else if (x < 0) {
	    return neg(of_float(-x));
	  } else {
	    var hi = x / two_ptr_32_dbl | 0;
	    var lo = x % two_ptr_32_dbl | 0;
	    return /* record */[
	            /* hi */hi,
	            /* lo */(lo >>> 0)
	          ];
	  }
	}
	
	function div(_self, _other) {
	  while(true) {
	    var other = _other;
	    var self = _self;
	    var self_hi = self[/* hi */0];
	    var exit = 0;
	    var exit$1 = 0;
	    if (other[/* hi */0] !== 0) {
	      exit$1 = 2;
	    } else if (other[/* lo */1] !== 0) {
	      exit$1 = 2;
	    } else {
	      throw Caml_builtin_exceptions.division_by_zero;
	    }
	    if (exit$1 === 2) {
	      if (self_hi !== -2147483648) {
	        if (self_hi !== 0) {
	          exit = 1;
	        } else if (self[/* lo */1] !== 0) {
	          exit = 1;
	        } else {
	          return zero;
	        }
	      } else if (self[/* lo */1] !== 0) {
	        exit = 1;
	      } else if (eq(other, one) || eq(other, neg_one)) {
	        return self;
	      } else if (eq(other, min_int)) {
	        return one;
	      } else {
	        var other_hi = other[/* hi */0];
	        var half_this = asr_(self, 1);
	        var approx = lsl_(div(half_this, other), 1);
	        var exit$2 = 0;
	        if (approx[/* hi */0] !== 0) {
	          exit$2 = 3;
	        } else if (approx[/* lo */1] !== 0) {
	          exit$2 = 3;
	        } else if (other_hi < 0) {
	          return one;
	        } else {
	          return neg(one);
	        }
	        if (exit$2 === 3) {
	          var y = mul(other, approx);
	          var rem = add(self, neg(y));
	          return add(approx, div(rem, other));
	        }
	        
	      }
	    }
	    if (exit === 1) {
	      var other_hi$1 = other[/* hi */0];
	      var exit$3 = 0;
	      if (other_hi$1 !== -2147483648) {
	        exit$3 = 2;
	      } else if (other[/* lo */1] !== 0) {
	        exit$3 = 2;
	      } else {
	        return zero;
	      }
	      if (exit$3 === 2) {
	        if (self_hi < 0) {
	          if (other_hi$1 < 0) {
	            _other = neg(other);
	            _self = neg(self);
	            continue ;
	            
	          } else {
	            return neg(div(neg(self), other));
	          }
	        } else if (other_hi$1 < 0) {
	          return neg(div(self, neg(other)));
	        } else {
	          var res = zero;
	          var rem$1 = self;
	          while(ge(rem$1, other)) {
	            var approx$1 = Math.max(1, Math.floor(to_float(rem$1) / to_float(other)));
	            var log2 = Math.ceil(Math.log(approx$1) / Math.LN2);
	            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
	            var approxRes = of_float(approx$1);
	            var approxRem = mul(approxRes, other);
	            while(approxRem[/* hi */0] < 0 || gt(approxRem, rem$1)) {
	              approx$1 -= delta;
	              approxRes = of_float(approx$1);
	              approxRem = mul(approxRes, other);
	            };
	            if (is_zero(approxRes)) {
	              approxRes = one;
	            }
	            res = add(res, approxRes);
	            rem$1 = add(rem$1, neg(approxRem));
	          };
	          return res;
	        }
	      }
	      
	    }
	    
	  };
	}
	
	function mod_(self, other) {
	  var y = mul(div(self, other), other);
	  return add(self, neg(y));
	}
	
	function div_mod(self, other) {
	  var quotient = div(self, other);
	  var y = mul(quotient, other);
	  return /* tuple */[
	          quotient,
	          add(self, neg(y))
	        ];
	}
	
	function compare(self, other) {
	  var v = Caml_obj.caml_nativeint_compare(self[/* hi */0], other[/* hi */0]);
	  if (v) {
	    return v;
	  } else {
	    return Caml_obj.caml_nativeint_compare(self[/* lo */1], other[/* lo */1]);
	  }
	}
	
	function of_int32(lo) {
	  return /* record */[
	          /* hi */lo < 0 ? -1 : 0,
	          /* lo */(lo >>> 0)
	        ];
	}
	
	function to_int32(x) {
	  return x[/* lo */1] | 0;
	}
	
	function to_hex(x) {
	  var aux = function (v) {
	    return (v >>> 0).toString(16);
	  };
	  var match = x[/* hi */0];
	  var match$1 = x[/* lo */1];
	  var exit = 0;
	  if (match !== 0) {
	    exit = 1;
	  } else if (match$1 !== 0) {
	    exit = 1;
	  } else {
	    return "0";
	  }
	  if (exit === 1) {
	    if (match$1 !== 0) {
	      if (match !== 0) {
	        var lo = aux(x[/* lo */1]);
	        var pad = 8 - lo.length | 0;
	        if (pad <= 0) {
	          return aux(x[/* hi */0]) + lo;
	        } else {
	          return aux(x[/* hi */0]) + (Caml_utils.repeat(pad, "0") + lo);
	        }
	      } else {
	        return aux(x[/* lo */1]);
	      }
	    } else {
	      return aux(x[/* hi */0]) + "00000000";
	    }
	  }
	  
	}
	
	function discard_sign(x) {
	  return /* record */[
	          /* hi */2147483647 & x[/* hi */0],
	          /* lo */x[/* lo */1]
	        ];
	}
	
	function float_of_bits(x) {
	  var int32 = new Int32Array(/* array */[
	        x[/* lo */1],
	        x[/* hi */0]
	      ]);
	  return new Float64Array(int32.buffer)[0];
	}
	
	function bits_of_float(x) {
	  var u = new Float64Array(/* float array */[x]);
	  var int32 = new Int32Array(u.buffer);
	  var x$1 = int32[1];
	  var hi = x$1;
	  var x$2 = int32[0];
	  var lo = x$2;
	  return /* record */[
	          /* hi */hi,
	          /* lo */(lo >>> 0)
	        ];
	}
	
	function get64(s, i) {
	  var hi = (s.charCodeAt(i + 4 | 0) << 32) | (s.charCodeAt(i + 5 | 0) << 40) | (s.charCodeAt(i + 6 | 0) << 48) | (s.charCodeAt(i + 7 | 0) << 56);
	  var lo = s.charCodeAt(i) | (s.charCodeAt(i + 1 | 0) << 8) | (s.charCodeAt(i + 2 | 0) << 16) | (s.charCodeAt(i + 3 | 0) << 24);
	  return /* record */[
	          /* hi */hi,
	          /* lo */(lo >>> 0)
	        ];
	}
	
	exports.min_int       = min_int;
	exports.max_int       = max_int;
	exports.one           = one;
	exports.zero          = zero;
	exports.not           = not;
	exports.of_int32      = of_int32;
	exports.to_int32      = to_int32;
	exports.add           = add;
	exports.neg           = neg;
	exports.sub           = sub;
	exports.lsl_          = lsl_;
	exports.lsr_          = lsr_;
	exports.asr_          = asr_;
	exports.is_zero       = is_zero;
	exports.mul           = mul;
	exports.xor           = xor;
	exports.or_           = or_;
	exports.and_          = and_;
	exports.swap          = swap;
	exports.ge            = ge;
	exports.eq            = eq;
	exports.neq           = neq;
	exports.lt            = lt;
	exports.gt            = gt;
	exports.le            = le;
	exports.to_float      = to_float;
	exports.of_float      = of_float;
	exports.div           = div;
	exports.mod_          = mod_;
	exports.div_mod       = div_mod;
	exports.compare       = compare;
	exports.to_hex        = to_hex;
	exports.discard_sign  = discard_sign;
	exports.float_of_bits = float_of_bits;
	exports.bits_of_float = bits_of_float;
	exports.get64         = get64;
	/* two_ptr_32_dbl Not a pure module */


/***/ },
/* 14 */
/*!********************************************!*\
  !*** ./~/bs-platform/lib/js/caml_utils.js ***!
  \********************************************/
/***/ function(module, exports) {

	'use strict';
	
	
	var repeat = ( (String.prototype.repeat && function (count,self){return self.repeat(count)}) ||
	                                                  function(count , self) {
	        if (self.length == 0 || count == 0) {
	            return '';
	        }
	        // Ensuring count is a 31-bit integer allows us to heavily optimize the
	        // main part. But anyway, most current (August 2014) browsers can't handle
	        // strings 1 << 28 chars or longer, so:
	        if (self.length * count >= 1 << 28) {
	            throw new RangeError('repeat count must not overflow maximum string size');
	        }
	        var rpt = '';
	        for (;;) {
	            if ((count & 1) == 1) {
	                rpt += self;
	            }
	            count >>>= 1;
	            if (count == 0) {
	                break;
	            }
	            self += self;
	        }
	        return rpt;
	    }
	);
	
	exports.repeat = repeat;
	/* repeat Not a pure module */


/***/ },
/* 15 */
/*!*********************************************!*\
  !*** ./~/bs-platform/lib/js/caml_string.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function string_of_char(prim) {
	  return String.fromCharCode(prim);
	}
	
	function caml_string_get(s, i) {
	  if (i >= s.length || i < 0) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "index out of bounds"
	        ];
	  } else {
	    return s.charCodeAt(i);
	  }
	}
	
	function caml_create_string(len) {
	  if (len < 0) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "String.create"
	        ];
	  } else {
	    return new Array(len);
	  }
	}
	
	function caml_string_compare(s1, s2) {
	  if (s1 === s2) {
	    return 0;
	  } else if (s1 < s2) {
	    return -1;
	  } else {
	    return 1;
	  }
	}
	
	function caml_fill_string(s, i, l, c) {
	  if (l > 0) {
	    for(var k = i ,k_finish = (l + i | 0) - 1 | 0; k <= k_finish; ++k){
	      s[k] = c;
	    }
	    return /* () */0;
	  } else {
	    return 0;
	  }
	}
	
	function caml_blit_string(s1, i1, s2, i2, len) {
	  if (len > 0) {
	    var off1 = s1.length - i1 | 0;
	    if (len <= off1) {
	      for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);
	      }
	      return /* () */0;
	    } else {
	      for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){
	        s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);
	      }
	      for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){
	        s2[i2 + i$2 | 0] = /* "\000" */0;
	      }
	      return /* () */0;
	    }
	  } else {
	    return 0;
	  }
	}
	
	function caml_blit_bytes(s1, i1, s2, i2, len) {
	  if (len > 0) {
	    if (s1 === s2) {
	      var s1$1 = s1;
	      var i1$1 = i1;
	      var i2$1 = i2;
	      var len$1 = len;
	      if (i1$1 < i2$1) {
	        var range_a = (s1$1.length - i2$1 | 0) - 1 | 0;
	        var range_b = len$1 - 1 | 0;
	        var range = range_a > range_b ? range_b : range_a;
	        for(var j = range; j >= 0; --j){
	          s1$1[i2$1 + j | 0] = s1$1[i1$1 + j | 0];
	        }
	        return /* () */0;
	      } else if (i1$1 > i2$1) {
	        var range_a$1 = (s1$1.length - i1$1 | 0) - 1 | 0;
	        var range_b$1 = len$1 - 1 | 0;
	        var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;
	        for(var k = 0; k <= range$1; ++k){
	          s1$1[i2$1 + k | 0] = s1$1[i1$1 + k | 0];
	        }
	        return /* () */0;
	      } else {
	        return 0;
	      }
	    } else {
	      var off1 = s1.length - i1 | 0;
	      if (len <= off1) {
	        for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	          s2[i2 + i | 0] = s1[i1 + i | 0];
	        }
	        return /* () */0;
	      } else {
	        for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){
	          s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];
	        }
	        for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){
	          s2[i2 + i$2 | 0] = /* "\000" */0;
	        }
	        return /* () */0;
	      }
	    }
	  } else {
	    return 0;
	  }
	}
	
	function bytes_of_string(s) {
	  var len = s.length;
	  var res = new Array(len);
	  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	    res[i] = s.charCodeAt(i);
	  }
	  return res;
	}
	
	function bytes_to_string(a) {
	  var bytes = a;
	  var i = 0;
	  var len = a.length;
	  var s = "";
	  var s_len = len;
	  if (i === 0 && len <= 4096 && len === bytes.length) {
	    return String.fromCharCode.apply(null,bytes);
	  } else {
	    var offset = 0;
	    while(s_len > 0) {
	      var next = s_len < 1024 ? s_len : 1024;
	      var tmp_bytes = new Array(next);
	      caml_blit_bytes(bytes, offset, tmp_bytes, 0, next);
	      s = s + String.fromCharCode.apply(null,tmp_bytes);
	      s_len = s_len - next | 0;
	      offset = offset + next | 0;
	    };
	    return s;
	  }
	}
	
	function caml_string_of_char_array(chars) {
	  var len = chars.length;
	  var bytes = new Array(len);
	  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	    bytes[i] = chars[i];
	  }
	  return bytes_to_string(bytes);
	}
	
	function caml_is_printable(c) {
	  if (c > 31) {
	    return +(c < 127);
	  } else {
	    return /* false */0;
	  }
	}
	
	function caml_string_get16(s, i) {
	  return s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0;
	}
	
	function caml_string_get32(s, i) {
	  return ((s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0) + (s.charCodeAt(i + 2 | 0) << 16) | 0) + (s.charCodeAt(i + 3 | 0) << 24) | 0;
	}
	
	function get(s, i) {
	  if (i < 0 || i >= s.length) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "index out of bounds"
	        ];
	  } else {
	    return s.charCodeAt(i);
	  }
	}
	
	exports.bytes_of_string           = bytes_of_string;
	exports.bytes_to_string           = bytes_to_string;
	exports.caml_is_printable         = caml_is_printable;
	exports.caml_string_of_char_array = caml_string_of_char_array;
	exports.caml_string_get           = caml_string_get;
	exports.caml_string_compare       = caml_string_compare;
	exports.caml_create_string        = caml_create_string;
	exports.caml_fill_string          = caml_fill_string;
	exports.caml_blit_string          = caml_blit_string;
	exports.caml_blit_bytes           = caml_blit_bytes;
	exports.caml_string_get16         = caml_string_get16;
	exports.caml_string_get32         = caml_string_get32;
	exports.string_of_char            = string_of_char;
	exports.get                       = get;
	/* No side effect */


/***/ },
/* 16 */
/*!*************************************************!*\
  !*** ./~/bs-platform/lib/js/caml_exceptions.js ***!
  \*************************************************/
/***/ function(module, exports) {

	'use strict';
	
	
	var id = [0];
	
	function caml_set_oo_id(b) {
	  b[1] = id[0];
	  id[0] += 1;
	  return b;
	}
	
	function get_id() {
	  id[0] += 1;
	  return id[0];
	}
	
	function create(str) {
	  var v_001 = get_id(/* () */0);
	  var v = /* tuple */[
	    str,
	    v_001
	  ];
	  v.tag = 248;
	  return v;
	}
	
	exports.caml_set_oo_id = caml_set_oo_id;
	exports.get_id         = get_id;
	exports.create         = create;
	/* No side effect */


/***/ },
/* 17 */
/*!**********************************************************!*\
  !*** ./~/bs-platform/lib/js/camlinternalFormatBasics.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Block = __webpack_require__(/*! ./block */ 7);
	
	function erase_rel(param) {
	  if (typeof param === "number") {
	    return /* End_of_fmtty */0;
	  } else {
	    switch (param.tag | 0) {
	      case 0 : 
	          return /* Char_ty */Block.__(0, [erase_rel(param[0])]);
	      case 1 : 
	          return /* String_ty */Block.__(1, [erase_rel(param[0])]);
	      case 2 : 
	          return /* Int_ty */Block.__(2, [erase_rel(param[0])]);
	      case 3 : 
	          return /* Int32_ty */Block.__(3, [erase_rel(param[0])]);
	      case 4 : 
	          return /* Nativeint_ty */Block.__(4, [erase_rel(param[0])]);
	      case 5 : 
	          return /* Int64_ty */Block.__(5, [erase_rel(param[0])]);
	      case 6 : 
	          return /* Float_ty */Block.__(6, [erase_rel(param[0])]);
	      case 7 : 
	          return /* Bool_ty */Block.__(7, [erase_rel(param[0])]);
	      case 8 : 
	          return /* Format_arg_ty */Block.__(8, [
	                    param[0],
	                    erase_rel(param[1])
	                  ]);
	      case 9 : 
	          var ty1 = param[0];
	          return /* Format_subst_ty */Block.__(9, [
	                    ty1,
	                    ty1,
	                    erase_rel(param[2])
	                  ]);
	      case 10 : 
	          return /* Alpha_ty */Block.__(10, [erase_rel(param[0])]);
	      case 11 : 
	          return /* Theta_ty */Block.__(11, [erase_rel(param[0])]);
	      case 12 : 
	          return /* Any_ty */Block.__(12, [erase_rel(param[0])]);
	      case 13 : 
	          return /* Reader_ty */Block.__(13, [erase_rel(param[0])]);
	      case 14 : 
	          return /* Ignored_reader_ty */Block.__(14, [erase_rel(param[0])]);
	      
	    }
	  }
	}
	
	function concat_fmtty(fmtty1, fmtty2) {
	  if (typeof fmtty1 === "number") {
	    return fmtty2;
	  } else {
	    switch (fmtty1.tag | 0) {
	      case 0 : 
	          return /* Char_ty */Block.__(0, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 1 : 
	          return /* String_ty */Block.__(1, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 2 : 
	          return /* Int_ty */Block.__(2, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 3 : 
	          return /* Int32_ty */Block.__(3, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 4 : 
	          return /* Nativeint_ty */Block.__(4, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 5 : 
	          return /* Int64_ty */Block.__(5, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 6 : 
	          return /* Float_ty */Block.__(6, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 7 : 
	          return /* Bool_ty */Block.__(7, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 8 : 
	          return /* Format_arg_ty */Block.__(8, [
	                    fmtty1[0],
	                    concat_fmtty(fmtty1[1], fmtty2)
	                  ]);
	      case 9 : 
	          return /* Format_subst_ty */Block.__(9, [
	                    fmtty1[0],
	                    fmtty1[1],
	                    concat_fmtty(fmtty1[2], fmtty2)
	                  ]);
	      case 10 : 
	          return /* Alpha_ty */Block.__(10, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 11 : 
	          return /* Theta_ty */Block.__(11, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 12 : 
	          return /* Any_ty */Block.__(12, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 13 : 
	          return /* Reader_ty */Block.__(13, [concat_fmtty(fmtty1[0], fmtty2)]);
	      case 14 : 
	          return /* Ignored_reader_ty */Block.__(14, [concat_fmtty(fmtty1[0], fmtty2)]);
	      
	    }
	  }
	}
	
	function concat_fmt(fmt1, fmt2) {
	  if (typeof fmt1 === "number") {
	    return fmt2;
	  } else {
	    switch (fmt1.tag | 0) {
	      case 0 : 
	          return /* Char */Block.__(0, [concat_fmt(fmt1[0], fmt2)]);
	      case 1 : 
	          return /* Caml_char */Block.__(1, [concat_fmt(fmt1[0], fmt2)]);
	      case 2 : 
	          return /* String */Block.__(2, [
	                    fmt1[0],
	                    concat_fmt(fmt1[1], fmt2)
	                  ]);
	      case 3 : 
	          return /* Caml_string */Block.__(3, [
	                    fmt1[0],
	                    concat_fmt(fmt1[1], fmt2)
	                  ]);
	      case 4 : 
	          return /* Int */Block.__(4, [
	                    fmt1[0],
	                    fmt1[1],
	                    fmt1[2],
	                    concat_fmt(fmt1[3], fmt2)
	                  ]);
	      case 5 : 
	          return /* Int32 */Block.__(5, [
	                    fmt1[0],
	                    fmt1[1],
	                    fmt1[2],
	                    concat_fmt(fmt1[3], fmt2)
	                  ]);
	      case 6 : 
	          return /* Nativeint */Block.__(6, [
	                    fmt1[0],
	                    fmt1[1],
	                    fmt1[2],
	                    concat_fmt(fmt1[3], fmt2)
	                  ]);
	      case 7 : 
	          return /* Int64 */Block.__(7, [
	                    fmt1[0],
	                    fmt1[1],
	                    fmt1[2],
	                    concat_fmt(fmt1[3], fmt2)
	                  ]);
	      case 8 : 
	          return /* Float */Block.__(8, [
	                    fmt1[0],
	                    fmt1[1],
	                    fmt1[2],
	                    concat_fmt(fmt1[3], fmt2)
	                  ]);
	      case 9 : 
	          return /* Bool */Block.__(9, [concat_fmt(fmt1[0], fmt2)]);
	      case 10 : 
	          return /* Flush */Block.__(10, [concat_fmt(fmt1[0], fmt2)]);
	      case 11 : 
	          return /* String_literal */Block.__(11, [
	                    fmt1[0],
	                    concat_fmt(fmt1[1], fmt2)
	                  ]);
	      case 12 : 
	          return /* Char_literal */Block.__(12, [
	                    fmt1[0],
	                    concat_fmt(fmt1[1], fmt2)
	                  ]);
	      case 13 : 
	          return /* Format_arg */Block.__(13, [
	                    fmt1[0],
	                    fmt1[1],
	                    concat_fmt(fmt1[2], fmt2)
	                  ]);
	      case 14 : 
	          return /* Format_subst */Block.__(14, [
	                    fmt1[0],
	                    fmt1[1],
	                    concat_fmt(fmt1[2], fmt2)
	                  ]);
	      case 15 : 
	          return /* Alpha */Block.__(15, [concat_fmt(fmt1[0], fmt2)]);
	      case 16 : 
	          return /* Theta */Block.__(16, [concat_fmt(fmt1[0], fmt2)]);
	      case 17 : 
	          return /* Formatting_lit */Block.__(17, [
	                    fmt1[0],
	                    concat_fmt(fmt1[1], fmt2)
	                  ]);
	      case 18 : 
	          return /* Formatting_gen */Block.__(18, [
	                    fmt1[0],
	                    concat_fmt(fmt1[1], fmt2)
	                  ]);
	      case 19 : 
	          return /* Reader */Block.__(19, [concat_fmt(fmt1[0], fmt2)]);
	      case 20 : 
	          return /* Scan_char_set */Block.__(20, [
	                    fmt1[0],
	                    fmt1[1],
	                    concat_fmt(fmt1[2], fmt2)
	                  ]);
	      case 21 : 
	          return /* Scan_get_counter */Block.__(21, [
	                    fmt1[0],
	                    concat_fmt(fmt1[1], fmt2)
	                  ]);
	      case 22 : 
	          return /* Scan_next_char */Block.__(22, [concat_fmt(fmt1[0], fmt2)]);
	      case 23 : 
	          return /* Ignored_param */Block.__(23, [
	                    fmt1[0],
	                    concat_fmt(fmt1[1], fmt2)
	                  ]);
	      case 24 : 
	          return /* Custom */Block.__(24, [
	                    fmt1[0],
	                    fmt1[1],
	                    concat_fmt(fmt1[2], fmt2)
	                  ]);
	      
	    }
	  }
	}
	
	exports.concat_fmtty = concat_fmtty;
	exports.erase_rel    = erase_rel;
	exports.concat_fmt   = concat_fmt;
	/* No side effect */


/***/ },
/* 18 */
/*!***************************************!*\
  !*** ./~/bs-platform/lib/js/array.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Curry                   = __webpack_require__(/*! ./curry */ 1);
	var Caml_array              = __webpack_require__(/*! ./caml_array */ 2);
	var Caml_exceptions         = __webpack_require__(/*! ./caml_exceptions */ 16);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function init(l, f) {
	  if (l) {
	    if (l < 0) {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "Array.init"
	          ];
	    } else {
	      var res = Caml_array.caml_make_vect(l, Curry._1(f, 0));
	      for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
	        res[i] = Curry._1(f, i);
	      }
	      return res;
	    }
	  } else {
	    return /* array */[];
	  }
	}
	
	function make_matrix(sx, sy, init) {
	  var res = Caml_array.caml_make_vect(sx, /* array */[]);
	  for(var x = 0 ,x_finish = sx - 1 | 0; x <= x_finish; ++x){
	    res[x] = Caml_array.caml_make_vect(sy, init);
	  }
	  return res;
	}
	
	function copy(a) {
	  var l = a.length;
	  if (l) {
	    return Caml_array.caml_array_sub(a, 0, l);
	  } else {
	    return /* array */[];
	  }
	}
	
	function append(a1, a2) {
	  var l1 = a1.length;
	  if (l1) {
	    if (a2.length) {
	      return a1.concat(a2);
	    } else {
	      return Caml_array.caml_array_sub(a1, 0, l1);
	    }
	  } else {
	    return copy(a2);
	  }
	}
	
	function sub(a, ofs, len) {
	  if (len < 0 || ofs > (a.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Array.sub"
	        ];
	  } else {
	    return Caml_array.caml_array_sub(a, ofs, len);
	  }
	}
	
	function fill(a, ofs, len, v) {
	  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Array.fill"
	        ];
	  } else {
	    for(var i = ofs ,i_finish = (ofs + len | 0) - 1 | 0; i <= i_finish; ++i){
	      a[i] = v;
	    }
	    return /* () */0;
	  }
	}
	
	function blit(a1, ofs1, a2, ofs2, len) {
	  if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Array.blit"
	        ];
	  } else {
	    return Caml_array.caml_array_blit(a1, ofs1, a2, ofs2, len);
	  }
	}
	
	function iter(f, a) {
	  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
	    Curry._1(f, a[i]);
	  }
	  return /* () */0;
	}
	
	function map(f, a) {
	  var l = a.length;
	  if (l) {
	    var r = Caml_array.caml_make_vect(l, Curry._1(f, a[0]));
	    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
	      r[i] = Curry._1(f, a[i]);
	    }
	    return r;
	  } else {
	    return /* array */[];
	  }
	}
	
	function iteri(f, a) {
	  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
	    Curry._2(f, i, a[i]);
	  }
	  return /* () */0;
	}
	
	function mapi(f, a) {
	  var l = a.length;
	  if (l) {
	    var r = Caml_array.caml_make_vect(l, Curry._2(f, 0, a[0]));
	    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
	      r[i] = Curry._2(f, i, a[i]);
	    }
	    return r;
	  } else {
	    return /* array */[];
	  }
	}
	
	function to_list(a) {
	  var _i = a.length - 1 | 0;
	  var _res = /* [] */0;
	  while(true) {
	    var res = _res;
	    var i = _i;
	    if (i < 0) {
	      return res;
	    } else {
	      _res = /* :: */[
	        a[i],
	        res
	      ];
	      _i = i - 1 | 0;
	      continue ;
	      
	    }
	  };
	}
	
	function list_length(_accu, _param) {
	  while(true) {
	    var param = _param;
	    var accu = _accu;
	    if (param) {
	      _param = param[1];
	      _accu = accu + 1 | 0;
	      continue ;
	      
	    } else {
	      return accu;
	    }
	  };
	}
	
	function of_list(l) {
	  if (l) {
	    var a = Caml_array.caml_make_vect(list_length(0, l), l[0]);
	    var _i = 1;
	    var _param = l[1];
	    while(true) {
	      var param = _param;
	      var i = _i;
	      if (param) {
	        a[i] = param[0];
	        _param = param[1];
	        _i = i + 1 | 0;
	        continue ;
	        
	      } else {
	        return a;
	      }
	    };
	  } else {
	    return /* array */[];
	  }
	}
	
	function fold_left(f, x, a) {
	  var r = x;
	  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
	    r = Curry._2(f, r, a[i]);
	  }
	  return r;
	}
	
	function fold_right(f, a, x) {
	  var r = x;
	  for(var i = a.length - 1 | 0; i >= 0; --i){
	    r = Curry._2(f, a[i], r);
	  }
	  return r;
	}
	
	var Bottom = Caml_exceptions.create("Array.Bottom");
	
	function sort(cmp, a) {
	  var maxson = function (l, i) {
	    var i31 = ((i + i | 0) + i | 0) + 1 | 0;
	    var x = i31;
	    if ((i31 + 2 | 0) < l) {
	      if (Curry._2(cmp, Caml_array.caml_array_get(a, i31), Caml_array.caml_array_get(a, i31 + 1 | 0)) < 0) {
	        x = i31 + 1 | 0;
	      }
	      if (Curry._2(cmp, Caml_array.caml_array_get(a, x), Caml_array.caml_array_get(a, i31 + 2 | 0)) < 0) {
	        x = i31 + 2 | 0;
	      }
	      return x;
	    } else if ((i31 + 1 | 0) < l && Curry._2(cmp, Caml_array.caml_array_get(a, i31), Caml_array.caml_array_get(a, i31 + 1 | 0)) < 0) {
	      return i31 + 1 | 0;
	    } else if (i31 < l) {
	      return i31;
	    } else {
	      throw [
	            Bottom,
	            i
	          ];
	    }
	  };
	  var trickle = function (l, i, e) {
	    try {
	      var l$1 = l;
	      var _i = i;
	      var e$1 = e;
	      while(true) {
	        var i$1 = _i;
	        var j = maxson(l$1, i$1);
	        if (Curry._2(cmp, Caml_array.caml_array_get(a, j), e$1) > 0) {
	          Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, j));
	          _i = j;
	          continue ;
	          
	        } else {
	          return Caml_array.caml_array_set(a, i$1, e$1);
	        }
	      };
	    }
	    catch (exn){
	      if (exn[0] === Bottom) {
	        return Caml_array.caml_array_set(a, exn[1], e);
	      } else {
	        throw exn;
	      }
	    }
	  };
	  var bubble = function (l, i) {
	    try {
	      var l$1 = l;
	      var _i = i;
	      while(true) {
	        var i$1 = _i;
	        var j = maxson(l$1, i$1);
	        Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, j));
	        _i = j;
	        continue ;
	        
	      };
	    }
	    catch (exn){
	      if (exn[0] === Bottom) {
	        return exn[1];
	      } else {
	        throw exn;
	      }
	    }
	  };
	  var trickleup = function (_i, e) {
	    while(true) {
	      var i = _i;
	      var father = (i - 1 | 0) / 3 | 0;
	      if (i === father) {
	        throw [
	              Caml_builtin_exceptions.assert_failure,
	              [
	                "array.ml",
	                168,
	                4
	              ]
	            ];
	      }
	      if (Curry._2(cmp, Caml_array.caml_array_get(a, father), e) < 0) {
	        Caml_array.caml_array_set(a, i, Caml_array.caml_array_get(a, father));
	        if (father > 0) {
	          _i = father;
	          continue ;
	          
	        } else {
	          return Caml_array.caml_array_set(a, 0, e);
	        }
	      } else {
	        return Caml_array.caml_array_set(a, i, e);
	      }
	    };
	  };
	  var l = a.length;
	  for(var i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i){
	    trickle(l, i, Caml_array.caml_array_get(a, i));
	  }
	  for(var i$1 = l - 1 | 0; i$1 >= 2; --i$1){
	    var e = Caml_array.caml_array_get(a, i$1);
	    Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, 0));
	    trickleup(bubble(i$1, 0), e);
	  }
	  if (l > 1) {
	    var e$1 = Caml_array.caml_array_get(a, 1);
	    Caml_array.caml_array_set(a, 1, Caml_array.caml_array_get(a, 0));
	    return Caml_array.caml_array_set(a, 0, e$1);
	  } else {
	    return 0;
	  }
	}
	
	function stable_sort(cmp, a) {
	  var merge = function (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
	    var src1r = src1ofs + src1len | 0;
	    var src2r = src2ofs + src2len | 0;
	    var _i1 = src1ofs;
	    var _s1 = Caml_array.caml_array_get(a, src1ofs);
	    var _i2 = src2ofs;
	    var _s2 = Caml_array.caml_array_get(src2, src2ofs);
	    var _d = dstofs;
	    while(true) {
	      var d = _d;
	      var s2 = _s2;
	      var i2 = _i2;
	      var s1 = _s1;
	      var i1 = _i1;
	      if (Curry._2(cmp, s1, s2) <= 0) {
	        Caml_array.caml_array_set(dst, d, s1);
	        var i1$1 = i1 + 1 | 0;
	        if (i1$1 < src1r) {
	          _d = d + 1 | 0;
	          _s1 = Caml_array.caml_array_get(a, i1$1);
	          _i1 = i1$1;
	          continue ;
	          
	        } else {
	          return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
	        }
	      } else {
	        Caml_array.caml_array_set(dst, d, s2);
	        var i2$1 = i2 + 1 | 0;
	        if (i2$1 < src2r) {
	          _d = d + 1 | 0;
	          _s2 = Caml_array.caml_array_get(src2, i2$1);
	          _i2 = i2$1;
	          continue ;
	          
	        } else {
	          return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
	        }
	      }
	    };
	  };
	  var isortto = function (srcofs, dst, dstofs, len) {
	    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
	      var e = Caml_array.caml_array_get(a, srcofs + i | 0);
	      var j = (dstofs + i | 0) - 1 | 0;
	      while(j >= dstofs && Curry._2(cmp, Caml_array.caml_array_get(dst, j), e) > 0) {
	        Caml_array.caml_array_set(dst, j + 1 | 0, Caml_array.caml_array_get(dst, j));
	        j = j - 1 | 0;
	      };
	      Caml_array.caml_array_set(dst, j + 1 | 0, e);
	    }
	    return /* () */0;
	  };
	  var sortto = function (srcofs, dst, dstofs, len) {
	    if (len <= 5) {
	      return isortto(srcofs, dst, dstofs, len);
	    } else {
	      var l1 = len / 2 | 0;
	      var l2 = len - l1 | 0;
	      sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
	      sortto(srcofs, a, srcofs + l2 | 0, l1);
	      return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
	    }
	  };
	  var l = a.length;
	  if (l <= 5) {
	    return isortto(0, a, 0, l);
	  } else {
	    var l1 = l / 2 | 0;
	    var l2 = l - l1 | 0;
	    var t = Caml_array.caml_make_vect(l2, Caml_array.caml_array_get(a, 0));
	    sortto(l1, t, 0, l2);
	    sortto(0, a, l2, l1);
	    return merge(l2, l1, t, 0, l2, a, 0);
	  }
	}
	
	var create_matrix = make_matrix;
	
	var concat = Caml_array.caml_array_concat;
	
	var fast_sort = stable_sort;
	
	exports.init          = init;
	exports.make_matrix   = make_matrix;
	exports.create_matrix = create_matrix;
	exports.append        = append;
	exports.concat        = concat;
	exports.sub           = sub;
	exports.copy          = copy;
	exports.fill          = fill;
	exports.blit          = blit;
	exports.to_list       = to_list;
	exports.of_list       = of_list;
	exports.iter          = iter;
	exports.map           = map;
	exports.iteri         = iteri;
	exports.mapi          = mapi;
	exports.fold_left     = fold_left;
	exports.fold_right    = fold_right;
	exports.sort          = sort;
	exports.stable_sort   = stable_sort;
	exports.fast_sort     = fast_sort;
	/* No side effect */


/***/ },
/* 19 */
/*!******************************!*\
  !*** ./lib/js/src/common.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var List                    = __webpack_require__(/*! bs-platform/lib/js/list */ 5);
	var Curry                   = __webpack_require__(/*! bs-platform/lib/js/curry */ 1);
	var $$String                = __webpack_require__(/*! bs-platform/lib/js/string */ 20);
	var Pervasives              = __webpack_require__(/*! bs-platform/lib/js/pervasives */ 8);
	var Caml_string             = __webpack_require__(/*! bs-platform/lib/js/caml_string */ 15);
	var Caml_builtin_exceptions = __webpack_require__(/*! bs-platform/lib/js/caml_builtin_exceptions */ 3);
	
	function peekch(param) {
	  var i = param[1];
	  var str = param[0];
	  if (i < str.length) {
	    return /* Some */[Caml_string.get(str, i)];
	  } else {
	    return /* None */0;
	  }
	}
	
	function popch(param) {
	  return /* tuple */[
	          param[0],
	          param[1] + 1 | 0
	        ];
	}
	
	function peekn(param, len) {
	  var i = param[1];
	  var str = param[0];
	  if ((i + len | 0) < str.length) {
	    return /* Some */[$$String.sub(str, i, len)];
	  } else {
	    return /* None */0;
	  }
	}
	
	function popn(param, len) {
	  return /* tuple */[
	          param[0],
	          param[1] + len | 0
	        ];
	}
	
	function $$switch(stream, matchstr) {
	  var len = matchstr.length;
	  var match = peekn(stream, len);
	  if (match) {
	    var peek = match[0];
	    if (peek === matchstr) {
	      return popn(stream, len);
	    } else {
	      return Pervasives.failwith("Could not match '" + (matchstr + ("', got '" + (peek + "' instead."))));
	    }
	  } else {
	    return Pervasives.failwith("Could not match " + matchstr);
	  }
	}
	
	function charsRemaining(param) {
	  return param[0].length - param[1] | 0;
	}
	
	function create(str) {
	  return /* tuple */[
	          str,
	          0
	        ];
	}
	
	var Stream = /* module */[
	  /* empty : [] */0,
	  /* peekch */peekch,
	  /* popch */popch,
	  /* peekn */peekn,
	  /* popn */popn,
	  /* switch */$$switch,
	  /* charsRemaining */charsRemaining,
	  /* create */create
	];
	
	function read(name) {
	  var ic = Pervasives.open_in(name);
	  var try_read = function () {
	    var exit = 0;
	    var x;
	    try {
	      x = Pervasives.input_line(ic);
	      exit = 1;
	    }
	    catch (exn){
	      if (exn === Caml_builtin_exceptions.end_of_file) {
	        return /* None */0;
	      } else {
	        throw exn;
	      }
	    }
	    if (exit === 1) {
	      return /* Some */[x];
	    }
	    
	  };
	  var loop = function (_acc) {
	    while(true) {
	      var acc = _acc;
	      var match = try_read(/* () */0);
	      if (match) {
	        _acc = /* :: */[
	          $$String.make(1, /* "\n" */10),
	          /* :: */[
	            match[0],
	            acc
	          ]
	        ];
	        continue ;
	        
	      } else {
	        Curry._1(Pervasives.close_in, ic);
	        return List.rev(acc);
	      }
	    };
	  };
	  return $$String.concat("", loop(/* [] */0));
	}
	
	function append_char(s, c) {
	  return s + $$String.make(1, c);
	}
	
	var Constants = 0;
	
	var circularBufferSize = 60000;
	
	var vertexSize = 8;
	
	exports.Constants          = Constants;
	exports.circularBufferSize = circularBufferSize;
	exports.vertexSize         = vertexSize;
	exports.Stream             = Stream;
	exports.read               = read;
	exports.append_char        = append_char;
	/* No side effect */


/***/ },
/* 20 */
/*!****************************************!*\
  !*** ./~/bs-platform/lib/js/string.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List        = __webpack_require__(/*! ./list */ 5);
	var Bytes       = __webpack_require__(/*! ./bytes */ 21);
	var Caml_int32  = __webpack_require__(/*! ./caml_int32 */ 12);
	var Caml_string = __webpack_require__(/*! ./caml_string */ 15);
	
	function make(n, c) {
	  return Caml_string.bytes_to_string(Bytes.make(n, c));
	}
	
	function init(n, f) {
	  return Caml_string.bytes_to_string(Bytes.init(n, f));
	}
	
	function copy(s) {
	  return Caml_string.bytes_to_string(Bytes.copy(Caml_string.bytes_of_string(s)));
	}
	
	function sub(s, ofs, len) {
	  return Caml_string.bytes_to_string(Bytes.sub(Caml_string.bytes_of_string(s), ofs, len));
	}
	
	function concat(sep, l) {
	  if (l) {
	    var hd = l[0];
	    var num = [0];
	    var len = [0];
	    List.iter(function (s) {
	          num[0] = num[0] + 1 | 0;
	          len[0] = len[0] + s.length | 0;
	          return /* () */0;
	        }, l);
	    var r = Caml_string.caml_create_string(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);
	    Caml_string.caml_blit_string(hd, 0, r, 0, hd.length);
	    var pos = [hd.length];
	    List.iter(function (s) {
	          Caml_string.caml_blit_string(sep, 0, r, pos[0], sep.length);
	          pos[0] = pos[0] + sep.length | 0;
	          Caml_string.caml_blit_string(s, 0, r, pos[0], s.length);
	          pos[0] = pos[0] + s.length | 0;
	          return /* () */0;
	        }, l[1]);
	    return Caml_string.bytes_to_string(r);
	  } else {
	    return "";
	  }
	}
	
	function iter(f, s) {
	  return Bytes.iter(f, Caml_string.bytes_of_string(s));
	}
	
	function iteri(f, s) {
	  return Bytes.iteri(f, Caml_string.bytes_of_string(s));
	}
	
	function map(f, s) {
	  return Caml_string.bytes_to_string(Bytes.map(f, Caml_string.bytes_of_string(s)));
	}
	
	function mapi(f, s) {
	  return Caml_string.bytes_to_string(Bytes.mapi(f, Caml_string.bytes_of_string(s)));
	}
	
	function is_space(param) {
	  var switcher = param - 9 | 0;
	  if (switcher > 4 || switcher < 0) {
	    if (switcher !== 23) {
	      return /* false */0;
	    } else {
	      return /* true */1;
	    }
	  } else if (switcher !== 2) {
	    return /* true */1;
	  } else {
	    return /* false */0;
	  }
	}
	
	function trim(s) {
	  if (s === "" || !(is_space(s.charCodeAt(0)) || is_space(s.charCodeAt(s.length - 1 | 0)))) {
	    return s;
	  } else {
	    return Caml_string.bytes_to_string(Bytes.trim(Caml_string.bytes_of_string(s)));
	  }
	}
	
	function escaped(s) {
	  var needs_escape = function (_i) {
	    while(true) {
	      var i = _i;
	      if (i >= s.length) {
	        return /* false */0;
	      } else {
	        var match = s.charCodeAt(i);
	        if (match >= 32) {
	          var switcher = match - 34 | 0;
	          if (switcher > 58 || switcher < 0) {
	            if (switcher >= 93) {
	              return /* true */1;
	            } else {
	              _i = i + 1 | 0;
	              continue ;
	              
	            }
	          } else if (switcher > 57 || switcher < 1) {
	            return /* true */1;
	          } else {
	            _i = i + 1 | 0;
	            continue ;
	            
	          }
	        } else {
	          return /* true */1;
	        }
	      }
	    };
	  };
	  if (needs_escape(0)) {
	    return Caml_string.bytes_to_string(Bytes.escaped(Caml_string.bytes_of_string(s)));
	  } else {
	    return s;
	  }
	}
	
	function index(s, c) {
	  return Bytes.index(Caml_string.bytes_of_string(s), c);
	}
	
	function rindex(s, c) {
	  return Bytes.rindex(Caml_string.bytes_of_string(s), c);
	}
	
	function index_from(s, i, c) {
	  return Bytes.index_from(Caml_string.bytes_of_string(s), i, c);
	}
	
	function rindex_from(s, i, c) {
	  return Bytes.rindex_from(Caml_string.bytes_of_string(s), i, c);
	}
	
	function contains(s, c) {
	  return Bytes.contains(Caml_string.bytes_of_string(s), c);
	}
	
	function contains_from(s, i, c) {
	  return Bytes.contains_from(Caml_string.bytes_of_string(s), i, c);
	}
	
	function rcontains_from(s, i, c) {
	  return Bytes.rcontains_from(Caml_string.bytes_of_string(s), i, c);
	}
	
	function uppercase(s) {
	  return Caml_string.bytes_to_string(Bytes.uppercase(Caml_string.bytes_of_string(s)));
	}
	
	function lowercase(s) {
	  return Caml_string.bytes_to_string(Bytes.lowercase(Caml_string.bytes_of_string(s)));
	}
	
	function capitalize(s) {
	  return Caml_string.bytes_to_string(Bytes.capitalize(Caml_string.bytes_of_string(s)));
	}
	
	function uncapitalize(s) {
	  return Caml_string.bytes_to_string(Bytes.uncapitalize(Caml_string.bytes_of_string(s)));
	}
	
	var compare = Caml_string.caml_string_compare;
	
	var fill = Bytes.fill;
	
	var blit = Bytes.blit_string;
	
	exports.make           = make;
	exports.init           = init;
	exports.copy           = copy;
	exports.sub            = sub;
	exports.fill           = fill;
	exports.blit           = blit;
	exports.concat         = concat;
	exports.iter           = iter;
	exports.iteri          = iteri;
	exports.map            = map;
	exports.mapi           = mapi;
	exports.trim           = trim;
	exports.escaped        = escaped;
	exports.index          = index;
	exports.rindex         = rindex;
	exports.index_from     = index_from;
	exports.rindex_from    = rindex_from;
	exports.contains       = contains;
	exports.contains_from  = contains_from;
	exports.rcontains_from = rcontains_from;
	exports.uppercase      = uppercase;
	exports.lowercase      = lowercase;
	exports.capitalize     = capitalize;
	exports.uncapitalize   = uncapitalize;
	exports.compare        = compare;
	/* No side effect */


/***/ },
/* 21 */
/*!***************************************!*\
  !*** ./~/bs-platform/lib/js/bytes.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Char                    = __webpack_require__(/*! ./char */ 22);
	var List                    = __webpack_require__(/*! ./list */ 5);
	var Curry                   = __webpack_require__(/*! ./curry */ 1);
	var Caml_obj                = __webpack_require__(/*! ./caml_obj */ 6);
	var Caml_int32              = __webpack_require__(/*! ./caml_int32 */ 12);
	var Pervasives              = __webpack_require__(/*! ./pervasives */ 8);
	var Caml_string             = __webpack_require__(/*! ./caml_string */ 15);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function make(n, c) {
	  var s = Caml_string.caml_create_string(n);
	  Caml_string.caml_fill_string(s, 0, n, c);
	  return s;
	}
	
	function init(n, f) {
	  var s = Caml_string.caml_create_string(n);
	  for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
	    s[i] = Curry._1(f, i);
	  }
	  return s;
	}
	
	var empty = [];
	
	function copy(s) {
	  var len = s.length;
	  var r = Caml_string.caml_create_string(len);
	  Caml_string.caml_blit_bytes(s, 0, r, 0, len);
	  return r;
	}
	
	function to_string(b) {
	  return Caml_string.bytes_to_string(copy(b));
	}
	
	function of_string(s) {
	  return copy(Caml_string.bytes_of_string(s));
	}
	
	function sub(s, ofs, len) {
	  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "String.sub / Bytes.sub"
	        ];
	  } else {
	    var r = Caml_string.caml_create_string(len);
	    Caml_string.caml_blit_bytes(s, ofs, r, 0, len);
	    return r;
	  }
	}
	
	function sub_string(b, ofs, len) {
	  return Caml_string.bytes_to_string(sub(b, ofs, len));
	}
	
	function extend(s, left, right) {
	  var len = (s.length + left | 0) + right | 0;
	  var r = Caml_string.caml_create_string(len);
	  var match = left < 0 ? /* tuple */[
	      -left | 0,
	      0
	    ] : /* tuple */[
	      0,
	      left
	    ];
	  var dstoff = match[1];
	  var srcoff = match[0];
	  var cpylen = Pervasives.min(s.length - srcoff | 0, len - dstoff | 0);
	  if (cpylen > 0) {
	    Caml_string.caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
	  }
	  return r;
	}
	
	function fill(s, ofs, len, c) {
	  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "String.fill / Bytes.fill"
	        ];
	  } else {
	    return Caml_string.caml_fill_string(s, ofs, len, c);
	  }
	}
	
	function blit(s1, ofs1, s2, ofs2, len) {
	  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Bytes.blit"
	        ];
	  } else {
	    return Caml_string.caml_blit_bytes(s1, ofs1, s2, ofs2, len);
	  }
	}
	
	function blit_string(s1, ofs1, s2, ofs2, len) {
	  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "String.blit / Bytes.blit_string"
	        ];
	  } else {
	    return Caml_string.caml_blit_string(s1, ofs1, s2, ofs2, len);
	  }
	}
	
	function iter(f, a) {
	  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
	    Curry._1(f, a[i]);
	  }
	  return /* () */0;
	}
	
	function iteri(f, a) {
	  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
	    Curry._2(f, i, a[i]);
	  }
	  return /* () */0;
	}
	
	function concat(sep, l) {
	  if (l) {
	    var hd = l[0];
	    var num = [0];
	    var len = [0];
	    List.iter(function (s) {
	          num[0] = num[0] + 1 | 0;
	          len[0] = len[0] + s.length | 0;
	          return /* () */0;
	        }, l);
	    var r = Caml_string.caml_create_string(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);
	    Caml_string.caml_blit_bytes(hd, 0, r, 0, hd.length);
	    var pos = [hd.length];
	    List.iter(function (s) {
	          Caml_string.caml_blit_bytes(sep, 0, r, pos[0], sep.length);
	          pos[0] = pos[0] + sep.length | 0;
	          Caml_string.caml_blit_bytes(s, 0, r, pos[0], s.length);
	          pos[0] = pos[0] + s.length | 0;
	          return /* () */0;
	        }, l[1]);
	    return r;
	  } else {
	    return empty;
	  }
	}
	
	function cat(a, b) {
	  return a.concat(b);
	}
	
	function is_space(param) {
	  var switcher = param - 9 | 0;
	  if (switcher > 4 || switcher < 0) {
	    if (switcher !== 23) {
	      return /* false */0;
	    } else {
	      return /* true */1;
	    }
	  } else if (switcher !== 2) {
	    return /* true */1;
	  } else {
	    return /* false */0;
	  }
	}
	
	function trim(s) {
	  var len = s.length;
	  var i = 0;
	  while(i < len && is_space(s[i])) {
	    i = i + 1 | 0;
	  };
	  var j = len - 1 | 0;
	  while(j >= i && is_space(s[j])) {
	    j = j - 1 | 0;
	  };
	  if (j >= i) {
	    return sub(s, i, (j - i | 0) + 1 | 0);
	  } else {
	    return empty;
	  }
	}
	
	function escaped(s) {
	  var n = 0;
	  for(var i = 0 ,i_finish = s.length - 1 | 0; i <= i_finish; ++i){
	    var match = s[i];
	    var $js;
	    if (match >= 32) {
	      var switcher = match - 34 | 0;
	      $js = switcher > 58 || switcher < 0 ? (
	          switcher >= 93 ? 4 : 1
	        ) : (
	          switcher > 57 || switcher < 1 ? 2 : 1
	        );
	    } else {
	      $js = match >= 11 ? (
	          match !== 13 ? 4 : 2
	        ) : (
	          match >= 8 ? 2 : 4
	        );
	    }
	    n = n + $js | 0;
	  }
	  if (n === s.length) {
	    return copy(s);
	  } else {
	    var s$prime = Caml_string.caml_create_string(n);
	    n = 0;
	    for(var i$1 = 0 ,i_finish$1 = s.length - 1 | 0; i$1 <= i_finish$1; ++i$1){
	      var c = s[i$1];
	      var exit = 0;
	      if (c >= 35) {
	        if (c !== 92) {
	          if (c >= 127) {
	            exit = 1;
	          } else {
	            s$prime[n] = c;
	          }
	        } else {
	          exit = 2;
	        }
	      } else if (c >= 32) {
	        if (c >= 34) {
	          exit = 2;
	        } else {
	          s$prime[n] = c;
	        }
	      } else if (c >= 14) {
	        exit = 1;
	      } else {
	        switch (c) {
	          case 8 : 
	              s$prime[n] = /* "\\" */92;
	              n = n + 1 | 0;
	              s$prime[n] = /* "b" */98;
	              break;
	          case 9 : 
	              s$prime[n] = /* "\\" */92;
	              n = n + 1 | 0;
	              s$prime[n] = /* "t" */116;
	              break;
	          case 10 : 
	              s$prime[n] = /* "\\" */92;
	              n = n + 1 | 0;
	              s$prime[n] = /* "n" */110;
	              break;
	          case 0 : 
	          case 1 : 
	          case 2 : 
	          case 3 : 
	          case 4 : 
	          case 5 : 
	          case 6 : 
	          case 7 : 
	          case 11 : 
	          case 12 : 
	              exit = 1;
	              break;
	          case 13 : 
	              s$prime[n] = /* "\\" */92;
	              n = n + 1 | 0;
	              s$prime[n] = /* "r" */114;
	              break;
	          
	        }
	      }
	      switch (exit) {
	        case 1 : 
	            s$prime[n] = /* "\\" */92;
	            n = n + 1 | 0;
	            s$prime[n] = 48 + (c / 100 | 0) | 0;
	            n = n + 1 | 0;
	            s$prime[n] = 48 + (c / 10 | 0) % 10 | 0;
	            n = n + 1 | 0;
	            s$prime[n] = 48 + c % 10 | 0;
	            break;
	        case 2 : 
	            s$prime[n] = /* "\\" */92;
	            n = n + 1 | 0;
	            s$prime[n] = c;
	            break;
	        
	      }
	      n = n + 1 | 0;
	    }
	    return s$prime;
	  }
	}
	
	function map(f, s) {
	  var l = s.length;
	  if (l) {
	    var r = Caml_string.caml_create_string(l);
	    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
	      r[i] = Curry._1(f, s[i]);
	    }
	    return r;
	  } else {
	    return s;
	  }
	}
	
	function mapi(f, s) {
	  var l = s.length;
	  if (l) {
	    var r = Caml_string.caml_create_string(l);
	    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
	      r[i] = Curry._2(f, i, s[i]);
	    }
	    return r;
	  } else {
	    return s;
	  }
	}
	
	function uppercase(s) {
	  return map(Char.uppercase, s);
	}
	
	function lowercase(s) {
	  return map(Char.lowercase, s);
	}
	
	function apply1(f, s) {
	  if (s.length) {
	    var r = copy(s);
	    r[0] = Curry._1(f, s[0]);
	    return r;
	  } else {
	    return s;
	  }
	}
	
	function capitalize(s) {
	  return apply1(Char.uppercase, s);
	}
	
	function uncapitalize(s) {
	  return apply1(Char.lowercase, s);
	}
	
	function index_rec(s, lim, _i, c) {
	  while(true) {
	    var i = _i;
	    if (i >= lim) {
	      throw Caml_builtin_exceptions.not_found;
	    } else if (s[i] === c) {
	      return i;
	    } else {
	      _i = i + 1 | 0;
	      continue ;
	      
	    }
	  };
	}
	
	function index(s, c) {
	  return index_rec(s, s.length, 0, c);
	}
	
	function index_from(s, i, c) {
	  var l = s.length;
	  if (i < 0 || i > l) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "String.index_from / Bytes.index_from"
	        ];
	  } else {
	    return index_rec(s, l, i, c);
	  }
	}
	
	function rindex_rec(s, _i, c) {
	  while(true) {
	    var i = _i;
	    if (i < 0) {
	      throw Caml_builtin_exceptions.not_found;
	    } else if (s[i] === c) {
	      return i;
	    } else {
	      _i = i - 1 | 0;
	      continue ;
	      
	    }
	  };
	}
	
	function rindex(s, c) {
	  return rindex_rec(s, s.length - 1 | 0, c);
	}
	
	function rindex_from(s, i, c) {
	  if (i < -1 || i >= s.length) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "String.rindex_from / Bytes.rindex_from"
	        ];
	  } else {
	    return rindex_rec(s, i, c);
	  }
	}
	
	function contains_from(s, i, c) {
	  var l = s.length;
	  if (i < 0 || i > l) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "String.contains_from / Bytes.contains_from"
	        ];
	  } else {
	    try {
	      index_rec(s, l, i, c);
	      return /* true */1;
	    }
	    catch (exn){
	      if (exn === Caml_builtin_exceptions.not_found) {
	        return /* false */0;
	      } else {
	        throw exn;
	      }
	    }
	  }
	}
	
	function contains(s, c) {
	  return contains_from(s, 0, c);
	}
	
	function rcontains_from(s, i, c) {
	  if (i < 0 || i >= s.length) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "String.rcontains_from / Bytes.rcontains_from"
	        ];
	  } else {
	    try {
	      rindex_rec(s, i, c);
	      return /* true */1;
	    }
	    catch (exn){
	      if (exn === Caml_builtin_exceptions.not_found) {
	        return /* false */0;
	      } else {
	        throw exn;
	      }
	    }
	  }
	}
	
	var compare = Caml_obj.caml_compare;
	
	var unsafe_to_string = Caml_string.bytes_to_string;
	
	var unsafe_of_string = Caml_string.bytes_of_string;
	
	exports.make             = make;
	exports.init             = init;
	exports.empty            = empty;
	exports.copy             = copy;
	exports.of_string        = of_string;
	exports.to_string        = to_string;
	exports.sub              = sub;
	exports.sub_string       = sub_string;
	exports.extend           = extend;
	exports.fill             = fill;
	exports.blit             = blit;
	exports.blit_string      = blit_string;
	exports.concat           = concat;
	exports.cat              = cat;
	exports.iter             = iter;
	exports.iteri            = iteri;
	exports.map              = map;
	exports.mapi             = mapi;
	exports.trim             = trim;
	exports.escaped          = escaped;
	exports.index            = index;
	exports.rindex           = rindex;
	exports.index_from       = index_from;
	exports.rindex_from      = rindex_from;
	exports.contains         = contains;
	exports.contains_from    = contains_from;
	exports.rcontains_from   = rcontains_from;
	exports.uppercase        = uppercase;
	exports.lowercase        = lowercase;
	exports.capitalize       = capitalize;
	exports.uncapitalize     = uncapitalize;
	exports.compare          = compare;
	exports.unsafe_to_string = unsafe_to_string;
	exports.unsafe_of_string = unsafe_of_string;
	/* No side effect */


/***/ },
/* 22 */
/*!**************************************!*\
  !*** ./~/bs-platform/lib/js/char.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_string             = __webpack_require__(/*! ./caml_string */ 15);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function chr(n) {
	  if (n < 0 || n > 255) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Char.chr"
	        ];
	  } else {
	    return n;
	  }
	}
	
	function escaped(c) {
	  var exit = 0;
	  if (c >= 40) {
	    if (c !== 92) {
	      exit = c >= 127 ? 1 : 2;
	    } else {
	      return "\\\\";
	    }
	  } else if (c >= 32) {
	    if (c >= 39) {
	      return "\\'";
	    } else {
	      exit = 2;
	    }
	  } else if (c >= 14) {
	    exit = 1;
	  } else {
	    switch (c) {
	      case 8 : 
	          return "\\b";
	      case 9 : 
	          return "\\t";
	      case 10 : 
	          return "\\n";
	      case 0 : 
	      case 1 : 
	      case 2 : 
	      case 3 : 
	      case 4 : 
	      case 5 : 
	      case 6 : 
	      case 7 : 
	      case 11 : 
	      case 12 : 
	          exit = 1;
	          break;
	      case 13 : 
	          return "\\r";
	      
	    }
	  }
	  switch (exit) {
	    case 1 : 
	        var s = new Array(4);
	        s[0] = /* "\\" */92;
	        s[1] = 48 + (c / 100 | 0) | 0;
	        s[2] = 48 + (c / 10 | 0) % 10 | 0;
	        s[3] = 48 + c % 10 | 0;
	        return Caml_string.bytes_to_string(s);
	    case 2 : 
	        var s$1 = new Array(1);
	        s$1[0] = c;
	        return Caml_string.bytes_to_string(s$1);
	    
	  }
	}
	
	function lowercase(c) {
	  if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
	    return c + 32 | 0;
	  } else {
	    return c;
	  }
	}
	
	function uppercase(c) {
	  if (c >= /* "a" */97 && c <= /* "z" */122 || c >= /* "\224" */224 && c <= /* "\246" */246 || c >= /* "\248" */248 && c <= /* "\254" */254) {
	    return c - 32 | 0;
	  } else {
	    return c;
	  }
	}
	
	function compare(c1, c2) {
	  return c1 - c2 | 0;
	}
	
	exports.chr       = chr;
	exports.escaped   = escaped;
	exports.lowercase = lowercase;
	exports.uppercase = uppercase;
	exports.compare   = compare;
	/* No side effect */


/***/ },
/* 23 */
/*!****************************************!*\
  !*** ./~/bs-platform/lib/js/random.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $$Array                 = __webpack_require__(/*! ./array */ 18);
	var Curry                   = __webpack_require__(/*! ./curry */ 1);
	var Int32                   = __webpack_require__(/*! ./int32 */ 24);
	var Int64                   = __webpack_require__(/*! ./int64 */ 25);
	var Digest                  = __webpack_require__(/*! ./digest */ 26);
	var Caml_sys                = __webpack_require__(/*! ./caml_sys */ 28);
	var Nativeint               = __webpack_require__(/*! ./nativeint */ 29);
	var Caml_array              = __webpack_require__(/*! ./caml_array */ 2);
	var Caml_int64              = __webpack_require__(/*! ./caml_int64 */ 13);
	var Pervasives              = __webpack_require__(/*! ./pervasives */ 8);
	var Caml_string             = __webpack_require__(/*! ./caml_string */ 15);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function assign(st1, st2) {
	  $$Array.blit(st2[/* st */0], 0, st1[/* st */0], 0, 55);
	  st1[/* idx */1] = st2[/* idx */1];
	  return /* () */0;
	}
	
	function full_init(s, seed) {
	  var combine = function (accu, x) {
	    return Digest.string(accu + x);
	  };
	  var extract = function (d) {
	    return ((Caml_string.get(d, 0) + (Caml_string.get(d, 1) << 8) | 0) + (Caml_string.get(d, 2) << 16) | 0) + (Caml_string.get(d, 3) << 24) | 0;
	  };
	  var seed$1 = seed.length ? seed : /* int array */[0];
	  var l = seed$1.length;
	  for(var i = 0; i <= 54; ++i){
	    Caml_array.caml_array_set(s[/* st */0], i, i);
	  }
	  var accu = "x";
	  for(var i$1 = 0 ,i_finish = 54 + Pervasives.max(55, l) | 0; i$1 <= i_finish; ++i$1){
	    var j = i$1 % 55;
	    var k = i$1 % l;
	    accu = combine(accu, Caml_array.caml_array_get(seed$1, k));
	    Caml_array.caml_array_set(s[/* st */0], j, (Caml_array.caml_array_get(s[/* st */0], j) ^ extract(accu)) & 1073741823);
	  }
	  s[/* idx */1] = 0;
	  return /* () */0;
	}
	
	function make(seed) {
	  var result = /* record */[
	    /* st */Caml_array.caml_make_vect(55, 0),
	    /* idx */0
	  ];
	  full_init(result, seed);
	  return result;
	}
	
	function make_self_init() {
	  return make(Caml_sys.caml_sys_random_seed(/* () */0));
	}
	
	function copy(s) {
	  var result = /* record */[
	    /* st */Caml_array.caml_make_vect(55, 0),
	    /* idx */0
	  ];
	  assign(result, s);
	  return result;
	}
	
	function bits(s) {
	  s[/* idx */1] = (s[/* idx */1] + 1 | 0) % 55;
	  var curval = Caml_array.caml_array_get(s[/* st */0], s[/* idx */1]);
	  var newval = Caml_array.caml_array_get(s[/* st */0], (s[/* idx */1] + 24 | 0) % 55) + (curval ^ (curval >>> 25) & 31) | 0;
	  var newval30 = newval & 1073741823;
	  Caml_array.caml_array_set(s[/* st */0], s[/* idx */1], newval30);
	  return newval30;
	}
	
	function $$int(s, bound) {
	  if (bound > 1073741823 || bound <= 0) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Random.int"
	        ];
	  } else {
	    var s$1 = s;
	    var n = bound;
	    while(true) {
	      var r = bits(s$1);
	      var v = r % n;
	      if ((r - v | 0) > ((1073741823 - n | 0) + 1 | 0)) {
	        continue ;
	        
	      } else {
	        return v;
	      }
	    };
	  }
	}
	
	function int32(s, bound) {
	  if (bound <= 0) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Random.int32"
	        ];
	  } else {
	    var s$1 = s;
	    var n = bound;
	    while(true) {
	      var b1 = bits(s$1);
	      var b2 = ((bits(s$1) & 1) << 30);
	      var r = b1 | b2;
	      var v = r % n;
	      if ((r - v | 0) > ((Int32.max_int - n | 0) + 1 | 0)) {
	        continue ;
	        
	      } else {
	        return v;
	      }
	    };
	  }
	}
	
	function int64(s, bound) {
	  if (Caml_int64.le(bound, /* int64 */[
	          /* hi */0,
	          /* lo */0
	        ])) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Random.int64"
	        ];
	  } else {
	    var s$1 = s;
	    var n = bound;
	    while(true) {
	      var b1 = Caml_int64.of_int32(bits(s$1));
	      var b2 = Caml_int64.lsl_(Caml_int64.of_int32(bits(s$1)), 30);
	      var b3 = Caml_int64.lsl_(Caml_int64.of_int32(bits(s$1) & 7), 60);
	      var r = Caml_int64.or_(b1, /* int64 */[
	            /* hi */b2[0] | b3[0],
	            /* lo */((b2[1] | b3[1]) >>> 0)
	          ]);
	      var v = Caml_int64.mod_(r, n);
	      if (Caml_int64.gt(Caml_int64.sub(r, v), Caml_int64.add(Caml_int64.sub(Int64.max_int, n), /* int64 */[
	                  /* hi */0,
	                  /* lo */1
	                ]))) {
	        continue ;
	        
	      } else {
	        return v;
	      }
	    };
	  }
	}
	
	var nativeint = Nativeint.size === 32 ? int32 : function (s, bound) {
	    return int64(s, Caml_int64.of_int32(bound))[1] | 0;
	  };
	
	function rawfloat(s) {
	  var r1 = bits(s);
	  var r2 = bits(s);
	  return (r1 / 1073741824.0 + r2) / 1073741824.0;
	}
	
	function $$float(s, bound) {
	  return rawfloat(s) * bound;
	}
	
	function bool(s) {
	  return +((bits(s) & 1) === 0);
	}
	
	var $$default = /* record */[
	  /* st : array */[
	    987910699,
	    495797812,
	    364182224,
	    414272206,
	    318284740,
	    990407751,
	    383018966,
	    270373319,
	    840823159,
	    24560019,
	    536292337,
	    512266505,
	    189156120,
	    730249596,
	    143776328,
	    51606627,
	    140166561,
	    366354223,
	    1003410265,
	    700563762,
	    981890670,
	    913149062,
	    526082594,
	    1021425055,
	    784300257,
	    667753350,
	    630144451,
	    949649812,
	    48546892,
	    415514493,
	    258888527,
	    511570777,
	    89983870,
	    283659902,
	    308386020,
	    242688715,
	    482270760,
	    865188196,
	    1027664170,
	    207196989,
	    193777847,
	    619708188,
	    671350186,
	    149669678,
	    257044018,
	    87658204,
	    558145612,
	    183450813,
	    28133145,
	    901332182,
	    710253903,
	    510646120,
	    652377910,
	    409934019,
	    801085050
	  ],
	  /* idx */0
	];
	
	function bits$1() {
	  return bits($$default);
	}
	
	function $$int$1(bound) {
	  return $$int($$default, bound);
	}
	
	function int32$1(bound) {
	  return int32($$default, bound);
	}
	
	function nativeint$1(bound) {
	  return Curry._2(nativeint, $$default, bound);
	}
	
	function int64$1(bound) {
	  return int64($$default, bound);
	}
	
	function $$float$1(scale) {
	  return rawfloat($$default) * scale;
	}
	
	function bool$1() {
	  return bool($$default);
	}
	
	function full_init$1(seed) {
	  return full_init($$default, seed);
	}
	
	function init(seed) {
	  return full_init($$default, /* int array */[seed]);
	}
	
	function self_init() {
	  return full_init$1(Caml_sys.caml_sys_random_seed(/* () */0));
	}
	
	function get_state() {
	  return copy($$default);
	}
	
	function set_state(s) {
	  return assign($$default, s);
	}
	
	var State = [
	  make,
	  make_self_init,
	  copy,
	  bits,
	  $$int,
	  int32,
	  nativeint,
	  int64,
	  $$float,
	  bool
	];
	
	exports.init      = init;
	exports.full_init = full_init$1;
	exports.self_init = self_init;
	exports.bits      = bits$1;
	exports.$$int     = $$int$1;
	exports.int32     = int32$1;
	exports.nativeint = nativeint$1;
	exports.int64     = int64$1;
	exports.$$float   = $$float$1;
	exports.bool      = bool$1;
	exports.State     = State;
	exports.get_state = get_state;
	exports.set_state = set_state;
	/* No side effect */


/***/ },
/* 24 */
/*!***************************************!*\
  !*** ./~/bs-platform/lib/js/int32.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_obj    = __webpack_require__(/*! ./caml_obj */ 6);
	var Caml_format = __webpack_require__(/*! ./caml_format */ 11);
	
	function succ(n) {
	  return n + 1 | 0;
	}
	
	function pred(n) {
	  return n - 1 | 0;
	}
	
	function abs(n) {
	  if (n >= 0) {
	    return n;
	  } else {
	    return -n | 0;
	  }
	}
	
	function lognot(n) {
	  return n ^ -1;
	}
	
	function to_string(n) {
	  return Caml_format.caml_int32_format("%d", n);
	}
	
	var compare = Caml_obj.caml_int32_compare;
	
	var zero = 0;
	
	var one = 1;
	
	var minus_one = -1;
	
	var max_int = 2147483647;
	
	var min_int = -2147483648;
	
	exports.zero      = zero;
	exports.one       = one;
	exports.minus_one = minus_one;
	exports.succ      = succ;
	exports.pred      = pred;
	exports.abs       = abs;
	exports.max_int   = max_int;
	exports.min_int   = min_int;
	exports.lognot    = lognot;
	exports.to_string = to_string;
	exports.compare   = compare;
	/* No side effect */


/***/ },
/* 25 */
/*!***************************************!*\
  !*** ./~/bs-platform/lib/js/int64.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_int64  = __webpack_require__(/*! ./caml_int64 */ 13);
	var Caml_format = __webpack_require__(/*! ./caml_format */ 11);
	
	function succ(n) {
	  return Caml_int64.add(n, /* int64 */[
	              /* hi */0,
	              /* lo */1
	            ]);
	}
	
	function pred(n) {
	  return Caml_int64.sub(n, /* int64 */[
	              /* hi */0,
	              /* lo */1
	            ]);
	}
	
	function abs(n) {
	  if (Caml_int64.ge(n, /* int64 */[
	          /* hi */0,
	          /* lo */0
	        ])) {
	    return n;
	  } else {
	    return Caml_int64.neg(n);
	  }
	}
	
	function lognot(n) {
	  return Caml_int64.xor(n, /* int64 */[
	              /* hi */-1,
	              /* lo */4294967295
	            ]);
	}
	
	function to_string(n) {
	  return Caml_format.caml_int64_format("%d", n);
	}
	
	var compare = Caml_int64.compare;
	
	var zero = /* int64 */[
	  /* hi */0,
	  /* lo */0
	];
	
	var one = /* int64 */[
	  /* hi */0,
	  /* lo */1
	];
	
	var minus_one = /* int64 */[
	  /* hi */-1,
	  /* lo */4294967295
	];
	
	var max_int = /* int64 */[
	  /* hi */2147483647,
	  /* lo */4294967295
	];
	
	var min_int = /* int64 */[
	  /* hi */-2147483648,
	  /* lo */0
	];
	
	exports.zero      = zero;
	exports.one       = one;
	exports.minus_one = minus_one;
	exports.succ      = succ;
	exports.pred      = pred;
	exports.abs       = abs;
	exports.max_int   = max_int;
	exports.min_int   = min_int;
	exports.lognot    = lognot;
	exports.to_string = to_string;
	exports.compare   = compare;
	/* No side effect */


/***/ },
/* 26 */
/*!****************************************!*\
  !*** ./~/bs-platform/lib/js/digest.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Char                    = __webpack_require__(/*! ./char */ 22);
	var $$String                = __webpack_require__(/*! ./string */ 20);
	var Caml_md5                = __webpack_require__(/*! ./caml_md5 */ 27);
	var Pervasives              = __webpack_require__(/*! ./pervasives */ 8);
	var Caml_string             = __webpack_require__(/*! ./caml_string */ 15);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function string(str) {
	  return Caml_md5.caml_md5_string(str, 0, str.length);
	}
	
	function bytes(b) {
	  return string(Caml_string.bytes_to_string(b));
	}
	
	function substring(str, ofs, len) {
	  if (ofs < 0 || len < 0 || ofs > (str.length - len | 0)) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Digest.substring"
	        ];
	  } else {
	    return Caml_md5.caml_md5_string(str, ofs, len);
	  }
	}
	
	function subbytes(b, ofs, len) {
	  return substring(Caml_string.bytes_to_string(b), ofs, len);
	}
	
	function file(filename) {
	  Pervasives.open_in_bin(filename);
	  var exit = 0;
	  var d;
	  try {
	    d = function () {
	        throw "caml_md5_chan not implemented by bucklescript yet\n";
	      }();
	    exit = 1;
	  }
	  catch (e){
	    (function () {
	          throw "caml_ml_close_channel not implemented by bucklescript yet\n";
	        }());
	    throw e;
	  }
	  if (exit === 1) {
	    (function () {
	          throw "caml_ml_close_channel not implemented by bucklescript yet\n";
	        }());
	    return d;
	  }
	  
	}
	
	var output = Pervasives.output_string;
	
	function input(chan) {
	  return Pervasives.really_input_string(chan, 16);
	}
	
	function char_hex(n) {
	  return n + (
	          n < 10 ? /* "0" */48 : 87
	        ) | 0;
	}
	
	function to_hex(d) {
	  var result = new Array(32);
	  for(var i = 0; i <= 15; ++i){
	    var x = Caml_string.get(d, i);
	    result[(i << 1)] = char_hex((x >>> 4));
	    result[(i << 1) + 1 | 0] = char_hex(x & 15);
	  }
	  return Caml_string.bytes_to_string(result);
	}
	
	function from_hex(s) {
	  if (s.length !== 32) {
	    throw [
	          Caml_builtin_exceptions.invalid_argument,
	          "Digest.from_hex"
	        ];
	  }
	  var digit = function (c) {
	    if (c >= 65) {
	      if (c >= 97) {
	        if (c >= 103) {
	          throw [
	                Caml_builtin_exceptions.invalid_argument,
	                "Digest.from_hex"
	              ];
	        } else {
	          return (c - /* "a" */97 | 0) + 10 | 0;
	        }
	      } else if (c >= 71) {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "Digest.from_hex"
	            ];
	      } else {
	        return (c - /* "A" */65 | 0) + 10 | 0;
	      }
	    } else if (c > 57 || c < 48) {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "Digest.from_hex"
	          ];
	    } else {
	      return c - /* "0" */48 | 0;
	    }
	  };
	  var $$byte = function (i) {
	    return (digit(Caml_string.get(s, i)) << 4) + digit(Caml_string.get(s, i + 1 | 0)) | 0;
	  };
	  var result = new Array(16);
	  for(var i = 0; i <= 15; ++i){
	    result[i] = Char.chr($$byte((i << 1)));
	  }
	  return Caml_string.bytes_to_string(result);
	}
	
	var compare = $$String.compare;
	
	exports.compare   = compare;
	exports.string    = string;
	exports.bytes     = bytes;
	exports.substring = substring;
	exports.subbytes  = subbytes;
	exports.file      = file;
	exports.output    = output;
	exports.input     = input;
	exports.to_hex    = to_hex;
	exports.from_hex  = from_hex;
	/* No side effect */


/***/ },
/* 27 */
/*!******************************************!*\
  !*** ./~/bs-platform/lib/js/caml_md5.js ***!
  \******************************************/
/***/ function(module, exports) {

	'use strict';
	
	
	function cmn(q, a, b, x, s, t) {
	  var a$1 = ((a + q | 0) + x | 0) + t | 0;
	  return ((a$1 << s) | (a$1 >>> (32 - s | 0)) | 0) + b | 0;
	}
	
	function f(a, b, c, d, x, s, t) {
	  return cmn(b & c | (b ^ -1) & d, a, b, x, s, t);
	}
	
	function g(a, b, c, d, x, s, t) {
	  return cmn(b & d | c & (d ^ -1), a, b, x, s, t);
	}
	
	function h(a, b, c, d, x, s, t) {
	  return cmn(b ^ c ^ d, a, b, x, s, t);
	}
	
	function i(a, b, c, d, x, s, t) {
	  return cmn(c ^ (b | d ^ -1), a, b, x, s, t);
	}
	
	function cycle(x, k) {
	  var a = x[0];
	  var b = x[1];
	  var c = x[2];
	  var d = x[3];
	  a = f(a, b, c, d, k[0], 7, -680876936);
	  d = f(d, a, b, c, k[1], 12, -389564586);
	  c = f(c, d, a, b, k[2], 17, 606105819);
	  b = f(b, c, d, a, k[3], 22, -1044525330);
	  a = f(a, b, c, d, k[4], 7, -176418897);
	  d = f(d, a, b, c, k[5], 12, 1200080426);
	  c = f(c, d, a, b, k[6], 17, -1473231341);
	  b = f(b, c, d, a, k[7], 22, -45705983);
	  a = f(a, b, c, d, k[8], 7, 1770035416);
	  d = f(d, a, b, c, k[9], 12, -1958414417);
	  c = f(c, d, a, b, k[10], 17, -42063);
	  b = f(b, c, d, a, k[11], 22, -1990404162);
	  a = f(a, b, c, d, k[12], 7, 1804603682);
	  d = f(d, a, b, c, k[13], 12, -40341101);
	  c = f(c, d, a, b, k[14], 17, -1502002290);
	  b = f(b, c, d, a, k[15], 22, 1236535329);
	  a = g(a, b, c, d, k[1], 5, -165796510);
	  d = g(d, a, b, c, k[6], 9, -1069501632);
	  c = g(c, d, a, b, k[11], 14, 643717713);
	  b = g(b, c, d, a, k[0], 20, -373897302);
	  a = g(a, b, c, d, k[5], 5, -701558691);
	  d = g(d, a, b, c, k[10], 9, 38016083);
	  c = g(c, d, a, b, k[15], 14, -660478335);
	  b = g(b, c, d, a, k[4], 20, -405537848);
	  a = g(a, b, c, d, k[9], 5, 568446438);
	  d = g(d, a, b, c, k[14], 9, -1019803690);
	  c = g(c, d, a, b, k[3], 14, -187363961);
	  b = g(b, c, d, a, k[8], 20, 1163531501);
	  a = g(a, b, c, d, k[13], 5, -1444681467);
	  d = g(d, a, b, c, k[2], 9, -51403784);
	  c = g(c, d, a, b, k[7], 14, 1735328473);
	  b = g(b, c, d, a, k[12], 20, -1926607734);
	  a = h(a, b, c, d, k[5], 4, -378558);
	  d = h(d, a, b, c, k[8], 11, -2022574463);
	  c = h(c, d, a, b, k[11], 16, 1839030562);
	  b = h(b, c, d, a, k[14], 23, -35309556);
	  a = h(a, b, c, d, k[1], 4, -1530992060);
	  d = h(d, a, b, c, k[4], 11, 1272893353);
	  c = h(c, d, a, b, k[7], 16, -155497632);
	  b = h(b, c, d, a, k[10], 23, -1094730640);
	  a = h(a, b, c, d, k[13], 4, 681279174);
	  d = h(d, a, b, c, k[0], 11, -358537222);
	  c = h(c, d, a, b, k[3], 16, -722521979);
	  b = h(b, c, d, a, k[6], 23, 76029189);
	  a = h(a, b, c, d, k[9], 4, -640364487);
	  d = h(d, a, b, c, k[12], 11, -421815835);
	  c = h(c, d, a, b, k[15], 16, 530742520);
	  b = h(b, c, d, a, k[2], 23, -995338651);
	  a = i(a, b, c, d, k[0], 6, -198630844);
	  d = i(d, a, b, c, k[7], 10, 1126891415);
	  c = i(c, d, a, b, k[14], 15, -1416354905);
	  b = i(b, c, d, a, k[5], 21, -57434055);
	  a = i(a, b, c, d, k[12], 6, 1700485571);
	  d = i(d, a, b, c, k[3], 10, -1894986606);
	  c = i(c, d, a, b, k[10], 15, -1051523);
	  b = i(b, c, d, a, k[1], 21, -2054922799);
	  a = i(a, b, c, d, k[8], 6, 1873313359);
	  d = i(d, a, b, c, k[15], 10, -30611744);
	  c = i(c, d, a, b, k[6], 15, -1560198380);
	  b = i(b, c, d, a, k[13], 21, 1309151649);
	  a = i(a, b, c, d, k[4], 6, -145523070);
	  d = i(d, a, b, c, k[11], 10, -1120210379);
	  c = i(c, d, a, b, k[2], 15, 718787259);
	  b = i(b, c, d, a, k[9], 21, -343485551);
	  x[0] = a + x[0] | 0;
	  x[1] = b + x[1] | 0;
	  x[2] = c + x[2] | 0;
	  x[3] = d + x[3] | 0;
	  return /* () */0;
	}
	
	var state = /* array */[
	  1732584193,
	  -271733879,
	  -1732584194,
	  271733878
	];
	
	var md5blk = /* array */[
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0,
	  0
	];
	
	function caml_md5_string(s, start, len) {
	  var s$1 = s.slice(start, len);
	  var n = s$1.length;
	  state[0] = 1732584193;
	  state[1] = -271733879;
	  state[2] = -1732584194;
	  state[3] = 271733878;
	  for(var i = 0; i <= 15; ++i){
	    md5blk[i] = 0;
	  }
	  var i_end = n / 64 | 0;
	  for(var i$1 = 1; i$1 <= i_end; ++i$1){
	    for(var j = 0; j <= 15; ++j){
	      var k = ((i$1 << 6) - 64 | 0) + (j << 2) | 0;
	      md5blk[j] = ((s$1.charCodeAt(k) + (s$1.charCodeAt(k + 1 | 0) << 8) | 0) + (s$1.charCodeAt(k + 2 | 0) << 16) | 0) + (s$1.charCodeAt(k + 3 | 0) << 24) | 0;
	    }
	    cycle(state, md5blk);
	  }
	  var s_tail = s$1.slice((i_end << 6));
	  for(var kk = 0; kk <= 15; ++kk){
	    md5blk[kk] = 0;
	  }
	  var i_end$1 = s_tail.length - 1 | 0;
	  for(var i$2 = 0; i$2 <= i_end$1; ++i$2){
	    md5blk[i$2 / 4 | 0] = md5blk[i$2 / 4 | 0] | (s_tail.charCodeAt(i$2) << (i$2 % 4 << 3));
	  }
	  var i$3 = i_end$1 + 1 | 0;
	  md5blk[i$3 / 4 | 0] = md5blk[i$3 / 4 | 0] | (128 << (i$3 % 4 << 3));
	  if (i$3 > 55) {
	    cycle(state, md5blk);
	    for(var i$4 = 0; i$4 <= 15; ++i$4){
	      md5blk[i$4] = 0;
	    }
	  }
	  md5blk[14] = (n << 3);
	  cycle(state, md5blk);
	  return String.fromCharCode(state[0] & 255, (state[0] >> 8) & 255, (state[0] >> 16) & 255, (state[0] >> 24) & 255, state[1] & 255, (state[1] >> 8) & 255, (state[1] >> 16) & 255, (state[1] >> 24) & 255, state[2] & 255, (state[2] >> 8) & 255, (state[2] >> 16) & 255, (state[2] >> 24) & 255, state[3] & 255, (state[3] >> 8) & 255, (state[3] >> 16) & 255, (state[3] >> 24) & 255);
	}
	
	exports.caml_md5_string = caml_md5_string;
	/* No side effect */


/***/ },
/* 28 */
/*!******************************************!*\
  !*** ./~/bs-platform/lib/js/caml_sys.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function caml_raise_not_found() {
	  throw Caml_builtin_exceptions.not_found;
	}
	
	
	function $$caml_sys_getenv(n) {
	    //nodejs env
	    if (typeof process !== 'undefined'
	        && process.env
	        && process.env[n] != undefined){
	        return process.env[n]
	    }
	    else{ 
	     caml_raise_not_found()
	    };
	  }
	
	;
	
	
	function $$date(){
	  return (+new Date())
	};
	
	
	;
	
	var caml_initial_time = $$date() * 0.001;
	
	function caml_sys_time() {
	  return $$date() * 0.001 - caml_initial_time;
	}
	
	function caml_sys_random_seed() {
	  return /* array */[(($$date() | 0) ^ 4294967295) * Math.random() | 0];
	}
	
	function caml_sys_system_command() {
	  return 127;
	}
	
	function caml_sys_getcwd() {
	  return "/";
	}
	
	function caml_sys_is_directory() {
	  throw [
	        Caml_builtin_exceptions.failure,
	        "caml_sys_is_directory not implemented"
	      ];
	}
	
	function caml_sys_file_exists() {
	  throw [
	        Caml_builtin_exceptions.failure,
	        "caml_sys_file_exists not implemented"
	      ];
	}
	
	function caml_sys_getenv(prim) {
	  return $$caml_sys_getenv(prim);
	}
	
	exports.caml_raise_not_found    = caml_raise_not_found;
	exports.caml_sys_getenv         = caml_sys_getenv;
	exports.caml_sys_time           = caml_sys_time;
	exports.caml_sys_random_seed    = caml_sys_random_seed;
	exports.caml_sys_system_command = caml_sys_system_command;
	exports.caml_sys_getcwd         = caml_sys_getcwd;
	exports.caml_sys_is_directory   = caml_sys_is_directory;
	exports.caml_sys_file_exists    = caml_sys_file_exists;
	/*  Not a pure module */
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 10)))

/***/ },
/* 29 */
/*!*******************************************!*\
  !*** ./~/bs-platform/lib/js/nativeint.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Sys         = __webpack_require__(/*! ./sys */ 30);
	var Caml_obj    = __webpack_require__(/*! ./caml_obj */ 6);
	var Caml_format = __webpack_require__(/*! ./caml_format */ 11);
	
	function succ(n) {
	  return n + 1;
	}
	
	function pred(n) {
	  return n - 1;
	}
	
	function abs(n) {
	  if (n >= 0) {
	    return n;
	  } else {
	    return -n;
	  }
	}
	
	var min_int = -9007199254740991;
	
	var max_int = 9007199254740991;
	
	function lognot(n) {
	  return n ^ -1;
	}
	
	function to_string(n) {
	  return Caml_format.caml_nativeint_format("%d", n);
	}
	
	var compare = Caml_obj.caml_nativeint_compare;
	
	var zero = 0;
	
	var one = 1;
	
	var minus_one = -1;
	
	var size = Sys.word_size;
	
	exports.zero      = zero;
	exports.one       = one;
	exports.minus_one = minus_one;
	exports.succ      = succ;
	exports.pred      = pred;
	exports.abs       = abs;
	exports.size      = size;
	exports.max_int   = max_int;
	exports.min_int   = min_int;
	exports.lognot    = lognot;
	exports.to_string = to_string;
	exports.compare   = compare;
	/* No side effect */


/***/ },
/* 30 */
/*!*************************************!*\
  !*** ./~/bs-platform/lib/js/sys.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Caml_exceptions = __webpack_require__(/*! ./caml_exceptions */ 16);
	
	var is_js = /* true */1;
	
	var match_001 = /* array */[];
	
	var big_endian = /* false */0;
	
	var unix = /* true */1;
	
	var win32 = /* false */0;
	
	var cygwin = /* false */0;
	
	var max_array_length = 2147483647;
	
	var max_string_length = 2147483647;
	
	var interactive = [/* false */0];
	
	function set_signal(_, _$1) {
	  return /* () */0;
	}
	
	var Break = Caml_exceptions.create("Sys.Break");
	
	function catch_break() {
	  return /* () */0;
	}
	
	var argv = match_001;
	
	var executable_name = "cmd";
	
	var os_type = "Unix";
	
	var word_size = 32;
	
	var sigabrt = -1;
	
	var sigalrm = -2;
	
	var sigfpe = -3;
	
	var sighup = -4;
	
	var sigill = -5;
	
	var sigint = -6;
	
	var sigkill = -7;
	
	var sigpipe = -8;
	
	var sigquit = -9;
	
	var sigsegv = -10;
	
	var sigterm = -11;
	
	var sigusr1 = -12;
	
	var sigusr2 = -13;
	
	var sigchld = -14;
	
	var sigcont = -15;
	
	var sigstop = -16;
	
	var sigtstp = -17;
	
	var sigttin = -18;
	
	var sigttou = -19;
	
	var sigvtalrm = -20;
	
	var sigprof = -21;
	
	var ocaml_version = "4.02.3+dev1-2015-07-10";
	
	exports.argv              = argv;
	exports.executable_name   = executable_name;
	exports.interactive       = interactive;
	exports.os_type           = os_type;
	exports.unix              = unix;
	exports.win32             = win32;
	exports.cygwin            = cygwin;
	exports.word_size         = word_size;
	exports.big_endian        = big_endian;
	exports.is_js             = is_js;
	exports.max_string_length = max_string_length;
	exports.max_array_length  = max_array_length;
	exports.set_signal        = set_signal;
	exports.sigabrt           = sigabrt;
	exports.sigalrm           = sigalrm;
	exports.sigfpe            = sigfpe;
	exports.sighup            = sighup;
	exports.sigill            = sigill;
	exports.sigint            = sigint;
	exports.sigkill           = sigkill;
	exports.sigpipe           = sigpipe;
	exports.sigquit           = sigquit;
	exports.sigsegv           = sigsegv;
	exports.sigterm           = sigterm;
	exports.sigusr1           = sigusr1;
	exports.sigusr2           = sigusr2;
	exports.sigchld           = sigchld;
	exports.sigcont           = sigcont;
	exports.sigstop           = sigstop;
	exports.sigtstp           = sigtstp;
	exports.sigttin           = sigttin;
	exports.sigttou           = sigttou;
	exports.sigvtalrm         = sigvtalrm;
	exports.sigprof           = sigprof;
	exports.Break             = Break;
	exports.catch_break       = catch_break;
	exports.ocaml_version     = ocaml_version;
	/* No side effect */


/***/ },
/* 31 */
/*!************************************!*\
  !*** ./lib/js/src/reprocessing.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var Sys           = __webpack_require__(/*! bs-platform/lib/js/sys */ 30);
	var Curry         = __webpack_require__(/*! bs-platform/lib/js/curry */ 1);
	var Utils         = __webpack_require__(/*! ./utils */ 4);
	var Matrix        = __webpack_require__(/*! ./matrix */ 32);
	var Random        = __webpack_require__(/*! bs-platform/lib/js/random */ 23);
	var WGLWebgl      = __webpack_require__(/*! reasongl-web/lib/js/src/wGLWebgl */ 33);
	var Glhelpers     = __webpack_require__(/*! ./glhelpers */ 36);
	var RGLConstants  = __webpack_require__(/*! reasongl-interface/lib/js/src/rGLConstants */ 35);
	var Drawfunctions = __webpack_require__(/*! ./drawfunctions */ 38);
	
	function afterDraw(f, env) {
	  var rate = 1000 / f | 0;
	  env[/* mouse */12][/* prevPos */1] = env[/* mouse */12][/* pos */0];
	  env[/* frame */15] = /* record */[
	    /* count */env[/* frame */15][/* count */0] + 1 | 0,
	    /* rate */rate
	  ];
	  Matrix.copyInto(Matrix.identity, env[/* matrix */16]);
	  if (env[/* batch */10][/* elementPtr */3] > 0) {
	    return Glhelpers.flushGlobalBatch(env);
	  } else {
	    return 0;
	  }
	}
	
	function run(setup, draw, mouseMove, mouseDragged, mouseDown, mouseUp, keyPressed, keyReleased, keyTyped, _) {
	  Random.self_init(/* () */0);
	  Curry._1(Utils.PUtils[/* noiseSeed */37], Random.$$int(Curry._2(Utils.PUtils[/* pow */11], 2, 30) - 1 | 0));
	  var env = Glhelpers.createCanvas(Curry._1(WGLWebgl.Gl[/* Window */2][/* init */2], Sys.argv), 200, 200);
	  var userState = [Curry._1(setup, env)];
	  var width = Curry._1(WGLWebgl.Gl[/* Window */2][/* getWidth */0], env[/* window */1]);
	  var height = Curry._1(WGLWebgl.Gl[/* Window */2][/* getHeight */1], env[/* window */1]);
	  var data = Curry._5(WGLWebgl.Gl[/* readPixelsRGBA */27], env[/* gl */2], 0, 0, width, height);
	  var textureBuffer = Curry._1(WGLWebgl.Gl[/* createTexture */16], env[/* gl */2]);
	  Curry._3(WGLWebgl.Gl[/* bindTexture */18], env[/* gl */2], RGLConstants.texture_2d, textureBuffer);
	  Curry.app(WGLWebgl.Gl[/* texImage2D */32], [
	        env[/* gl */2],
	        RGLConstants.texture_2d,
	        0,
	        RGLConstants.rgba,
	        width,
	        height,
	        RGLConstants.rgba,
	        RGLConstants.unsigned_byte,
	        data
	      ]);
	  Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_mag_filter, RGLConstants.linear);
	  Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_min_filter, RGLConstants.linear);
	  Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_wrap_s, RGLConstants.clamp_to_edge);
	  Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_wrap_t, RGLConstants.clamp_to_edge);
	  var reDrawPreviousBufferOnSecondFrame = function () {
	    var match_000 = 0 + width | 0;
	    var match_000$1 = 0 + width | 0;
	    var match_001 = 0 + height | 0;
	    var match_001$1 = 0 + height | 0;
	    var verticesColorAndTexture = /* float array */[
	      match_000,
	      0,
	      0.0,
	      0.0,
	      0.0,
	      0.0,
	      1,
	      1.0,
	      1.0,
	      0,
	      0,
	      0.0,
	      0.0,
	      0.0,
	      0.0,
	      1,
	      0.0,
	      1.0,
	      match_000$1,
	      match_001,
	      0.0,
	      0.0,
	      0.0,
	      0.0,
	      1,
	      1.0,
	      0.0,
	      0,
	      match_001$1,
	      0.0,
	      0.0,
	      0.0,
	      0.0,
	      1,
	      0.0,
	      0.0
	    ];
	    return Glhelpers.drawGeometry(Curry._2(WGLWebgl.Gl[/* Bigarray */36][/* of_array */1], /* Float32 */1, verticesColorAndTexture), Curry._2(WGLWebgl.Gl[/* Bigarray */36][/* of_array */1], /* Uint16 */3, /* array */[
	                    0,
	                    1,
	                    2,
	                    1,
	                    2,
	                    3
	                  ]), RGLConstants.triangles, 6, textureBuffer, env);
	  };
	  return Curry.app(WGLWebgl.Gl[/* render */4], [
	              env[/* window */1],
	              /* Some */[function (_, _$1, x, y) {
	                  env[/* mouse */12][/* pos */0] = /* tuple */[
	                    x,
	                    y
	                  ];
	                  env[/* mouse */12][/* pressed */2] = /* true */1;
	                  if (mouseDown) {
	                    userState[0] = Curry._2(mouseDown[0], userState[0], env);
	                    return /* () */0;
	                  } else {
	                    return /* () */0;
	                  }
	                }],
	              /* Some */[function (_, _$1, x, y) {
	                  env[/* mouse */12][/* pos */0] = /* tuple */[
	                    x,
	                    y
	                  ];
	                  env[/* mouse */12][/* pressed */2] = /* false */0;
	                  if (mouseUp) {
	                    userState[0] = Curry._2(mouseUp[0], userState[0], env);
	                    return /* () */0;
	                  } else {
	                    return /* () */0;
	                  }
	                }],
	              /* Some */[function (x, y) {
	                  env[/* mouse */12][/* pos */0] = /* tuple */[
	                    x,
	                    y
	                  ];
	                  if (env[/* mouse */12][/* pressed */2]) {
	                    if (mouseDragged) {
	                      userState[0] = Curry._2(mouseDragged[0], userState[0], env);
	                      return /* () */0;
	                    } else {
	                      return /* () */0;
	                    }
	                  } else if (mouseMove) {
	                    userState[0] = Curry._2(mouseMove[0], userState[0], env);
	                    return /* () */0;
	                  } else {
	                    return /* () */0;
	                  }
	                }],
	              /* Some */[function (keycode, repeat) {
	                  env[/* keyboard */11][/* keyCode */0] = keycode;
	                  if (!repeat) {
	                    if (keyPressed) {
	                      userState[0] = Curry._2(keyPressed[0], userState[0], env);
	                    }
	                    
	                  }
	                  if (keyTyped) {
	                    userState[0] = Curry._2(keyTyped[0], userState[0], env);
	                    return /* () */0;
	                  } else {
	                    return /* () */0;
	                  }
	                }],
	              /* Some */[function (keycode) {
	                  env[/* keyboard */11][/* keyCode */0] = keycode;
	                  if (keyReleased) {
	                    userState[0] = Curry._2(keyReleased[0], userState[0], env);
	                    return /* () */0;
	                  } else {
	                    return /* () */0;
	                  }
	                }],
	              /* Some */[function () {
	                  if (env[/* size */18][/* resizeable */2]) {
	                    var height = Curry._1(WGLWebgl.Gl[/* Window */2][/* getHeight */1], env[/* window */1]);
	                    var width = Curry._1(WGLWebgl.Gl[/* Window */2][/* getWidth */0], env[/* window */1]);
	                    return Glhelpers.resetSize(env, width, height);
	                  } else {
	                    return Curry._3(Drawfunctions.P[/* size */17], Curry._1(Drawfunctions.P[/* width */0], env), Curry._1(Drawfunctions.P[/* height */1], env), env);
	                  }
	                }],
	              function (f) {
	                if (env[/* frame */15][/* count */0] === 2) {
	                  reDrawPreviousBufferOnSecondFrame(/* () */0);
	                }
	                if (draw) {
	                  userState[0] = Curry._2(draw[0], userState[0], env);
	                }
	                return afterDraw(f, env);
	              },
	              /* () */0
	            ]);
	}
	
	var ReProcessor = /* module */[/* run */run];
	
	var PUtils = 0;
	
	var PConstants = 0;
	
	var P = 0;
	
	exports.PUtils      = PUtils;
	exports.PConstants  = PConstants;
	exports.P           = P;
	exports.afterDraw   = afterDraw;
	exports.ReProcessor = ReProcessor;
	/* Utils Not a pure module */


/***/ },
/* 32 */
/*!******************************!*\
  !*** ./lib/js/src/matrix.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var Caml_array              = __webpack_require__(/*! bs-platform/lib/js/caml_array */ 2);
	var Caml_builtin_exceptions = __webpack_require__(/*! bs-platform/lib/js/caml_builtin_exceptions */ 3);
	
	var identity = /* float array */[
	  1,
	  0,
	  0,
	  0,
	  1,
	  0,
	  0,
	  0,
	  1
	];
	
	function createIdentity() {
	  return /* float array */[
	          1,
	          0,
	          0,
	          0,
	          1,
	          0,
	          0,
	          0,
	          1
	        ];
	}
	
	function createTranslation(dx, dy) {
	  return /* float array */[
	          1,
	          0,
	          dx,
	          0,
	          1,
	          dy,
	          0,
	          0,
	          1
	        ];
	}
	
	function createRotation(theta) {
	  return /* float array */[
	          Math.cos(theta),
	          -Math.sin(theta),
	          0,
	          Math.sin(theta),
	          Math.cos(theta),
	          0,
	          0,
	          0,
	          1
	        ];
	}
	
	function copyInto(src, dst) {
	  Caml_array.caml_array_set(dst, 0, Caml_array.caml_array_get(src, 0));
	  Caml_array.caml_array_set(dst, 1, Caml_array.caml_array_get(src, 1));
	  Caml_array.caml_array_set(dst, 2, Caml_array.caml_array_get(src, 2));
	  Caml_array.caml_array_set(dst, 3, Caml_array.caml_array_get(src, 3));
	  Caml_array.caml_array_set(dst, 4, Caml_array.caml_array_get(src, 4));
	  Caml_array.caml_array_set(dst, 5, Caml_array.caml_array_get(src, 5));
	  Caml_array.caml_array_set(dst, 6, Caml_array.caml_array_get(src, 6));
	  Caml_array.caml_array_set(dst, 7, Caml_array.caml_array_get(src, 7));
	  return Caml_array.caml_array_set(dst, 8, Caml_array.caml_array_get(src, 8));
	}
	
	function matmatmul(mat1, mat2) {
	  if (mat1.length !== 9) {
	    throw [
	          Caml_builtin_exceptions.match_failure,
	          [
	            "/Users/Iwan/Development/reprocessing/src/matrix.re",
	            28,
	            6
	          ]
	        ];
	  } else {
	    var m0 = mat1[0];
	    var m1 = mat1[1];
	    var m2 = mat1[2];
	    var m3 = mat1[3];
	    var m4 = mat1[4];
	    var m5 = mat1[5];
	    var m6 = mat1[6];
	    var m7 = mat1[7];
	    var m8 = mat1[8];
	    if (mat2.length !== 9) {
	      throw [
	            Caml_builtin_exceptions.match_failure,
	            [
	              "/Users/Iwan/Development/reprocessing/src/matrix.re",
	              29,
	              6
	            ]
	          ];
	    } else {
	      var ma = mat2[0];
	      var mb = mat2[1];
	      var mc = mat2[2];
	      var md = mat2[3];
	      var me = mat2[4];
	      var mf = mat2[5];
	      var mg = mat2[6];
	      var mh = mat2[7];
	      var mi = mat2[8];
	      Caml_array.caml_array_set(mat1, 0, ma * m0 + md * m1 + mg * m2);
	      Caml_array.caml_array_set(mat1, 1, mb * m0 + me * m1 + mh * m2);
	      Caml_array.caml_array_set(mat1, 2, mc * m0 + mf * m1 + mi * m2);
	      Caml_array.caml_array_set(mat1, 3, ma * m3 + md * m4 + mg * m5);
	      Caml_array.caml_array_set(mat1, 4, mb * m3 + me * m4 + mh * m5);
	      Caml_array.caml_array_set(mat1, 5, mc * m3 + mf * m4 + mi * m5);
	      Caml_array.caml_array_set(mat1, 6, ma * m6 + md * m7 + mg * m8);
	      Caml_array.caml_array_set(mat1, 7, mb * m6 + me * m7 + mh * m8);
	      return Caml_array.caml_array_set(mat1, 8, mc * m6 + mf * m7 + mi * m8);
	    }
	  }
	}
	
	function matvecmul(m, v) {
	  var a = Caml_array.caml_array_get(v, 0);
	  var b = Caml_array.caml_array_get(v, 1);
	  var c = Caml_array.caml_array_get(v, 2);
	  Caml_array.caml_array_set(v, 0, a * Caml_array.caml_array_get(m, 0) + b * Caml_array.caml_array_get(m, 1) + c * Caml_array.caml_array_get(m, 2));
	  Caml_array.caml_array_set(v, 1, a * Caml_array.caml_array_get(m, 3) + b * Caml_array.caml_array_get(m, 4) + c * Caml_array.caml_array_get(m, 5));
	  return Caml_array.caml_array_set(v, 2, a * Caml_array.caml_array_get(m, 6) + b * Caml_array.caml_array_get(m, 7) + c * Caml_array.caml_array_get(m, 8));
	}
	
	function matptmul(m, param) {
	  var y = param[1];
	  var x = param[0];
	  return /* tuple */[
	          x * Caml_array.caml_array_get(m, 0) + y * Caml_array.caml_array_get(m, 1) + Caml_array.caml_array_get(m, 2),
	          x * Caml_array.caml_array_get(m, 3) + y * Caml_array.caml_array_get(m, 4) + Caml_array.caml_array_get(m, 5)
	        ];
	}
	
	exports.identity          = identity;
	exports.createIdentity    = createIdentity;
	exports.createTranslation = createTranslation;
	exports.createRotation    = createRotation;
	exports.copyInto          = copyInto;
	exports.matmatmul         = matmatmul;
	exports.matvecmul         = matvecmul;
	exports.matptmul          = matptmul;
	/* No side effect */


/***/ },
/* 33 */
/*!***********************************************!*\
  !*** ./~/reasongl-web/lib/js/src/wGLWebgl.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var Curry                   = __webpack_require__(/*! bs-platform/lib/js/curry */ 1);
	var WGLEvents               = __webpack_require__(/*! ./wGLEvents */ 34);
	var Caml_int32              = __webpack_require__(/*! bs-platform/lib/js/caml_int32 */ 12);
	var RGLConstants            = __webpack_require__(/*! reasongl-interface/lib/js/src/rGLConstants */ 35);
	var Caml_builtin_exceptions = __webpack_require__(/*! bs-platform/lib/js/caml_builtin_exceptions */ 3);
	
	var $$window = (window);
	
	var Document = /* module */[/* window */$$window];
	
	function createCanvas() {
	  return document.createElement("canvas");
	}
	
	function readFile(filename, cb) {
	  var rawFile = new XMLHttpRequest();
	  rawFile.open("GET", filename, false);
	  rawFile.onreadystatechange = function () {
	    if (rawFile.readyState === 4 && (rawFile.status === 200 || rawFile.status === 0)) {
	      return Curry._1(cb, rawFile.responseText);
	    } else {
	      return 0;
	    }
	  };
	  rawFile.send(null);
	  return /* () */0;
	}
	
	var File = /* module */[/* readFile */readFile];
	
	function getWidth(prim) {
	  return prim.width;
	}
	
	function getHeight(prim) {
	  return prim.height;
	}
	
	function init() {
	  var canvas = document.createElement("canvas");
	  canvas.style.backgroundColor = "black";
	  document.body.appendChild(canvas);
	  return canvas;
	}
	
	function setWindowSize($$window, width, height) {
	  $$window.width = width;
	  $$window.height = height;
	  return /* () */0;
	}
	
	function initDisplayMode(_, _$1, _$2) {
	  return /* () */0;
	}
	
	function getContext($$window) {
	  return $$window.getContext("webgl", {
	              preserveDrawingBuffer: /* true */1,
	              antialias: /* false */0
	            });
	}
	
	var Window = /* module */[
	  /* getWidth */getWidth,
	  /* getHeight */getHeight,
	  /* init */init,
	  /* setWindowSize */setWindowSize,
	  /* initDisplayMode */initDisplayMode,
	  /* getContext */getContext
	];
	
	function render(canvas, mouseDown, mouseUp, mouseMove, keyDown, keyUp, _, displayFunc, _$1) {
	  if (mouseDown) {
	    var cb = mouseDown[0];
	    canvas.addEventListener("mousedown", function (e) {
	          var match = e.button;
	          var button;
	          if (match > 2 || match < 0) {
	            throw [
	                  Caml_builtin_exceptions.assert_failure,
	                  [
	                    "WGLWebgl.re",
	                    154,
	                    21
	                  ]
	                ];
	          } else {
	            switch (match) {
	              case 0 : 
	                  button = /* LeftButton */0;
	                  break;
	              case 1 : 
	                  button = /* MiddleButton */1;
	                  break;
	              case 2 : 
	                  button = /* RightButton */2;
	                  break;
	              
	            }
	          }
	          var rect = canvas.getBoundingClientRect();
	          var x = e.clientX - rect.left | 0;
	          var y = e.clientY - rect.top | 0;
	          return Curry._4(cb, button, /* MouseDown */0, x, y);
	        });
	  }
	  if (mouseUp) {
	    var cb$1 = mouseUp[0];
	    canvas.addEventListener("mouseup", function (e) {
	          var match = e.button;
	          var button;
	          if (match > 2 || match < 0) {
	            throw [
	                  Caml_builtin_exceptions.assert_failure,
	                  [
	                    "WGLWebgl.re",
	                    177,
	                    21
	                  ]
	                ];
	          } else {
	            switch (match) {
	              case 0 : 
	                  button = /* LeftButton */0;
	                  break;
	              case 1 : 
	                  button = /* MiddleButton */1;
	                  break;
	              case 2 : 
	                  button = /* RightButton */2;
	                  break;
	              
	            }
	          }
	          var rect = canvas.getBoundingClientRect();
	          var x = e.clientX - rect.left | 0;
	          var y = e.clientY - rect.top | 0;
	          return Curry._4(cb$1, button, /* MouseUp */1, x, y);
	        });
	  }
	  if (mouseMove) {
	    var cb$2 = mouseMove[0];
	    canvas.addEventListener("mousemove", function (e) {
	          var rect = canvas.getBoundingClientRect();
	          var x = e.clientX - rect.left | 0;
	          var y = e.clientY - rect.top | 0;
	          return Curry._2(cb$2, x, y);
	        });
	  }
	  var keyLastPressed = [/* None */0];
	  if (keyDown) {
	    var cb$3 = keyDown[0];
	    $$window.addEventListener("keydown", function (e) {
	          var keycode = e.which;
	          var match = keyLastPressed[0];
	          var repeat = match ? +(match[0] === keycode) : /* false */0;
	          keyLastPressed[0] = /* Some */[keycode];
	          return Curry._2(cb$3, WGLEvents.keycodeMap(keycode), repeat);
	        });
	  }
	  if (keyUp) {
	    var cb$4 = keyUp[0];
	    $$window.addEventListener("keyup", function (e) {
	          var keycode = e.which;
	          keyLastPressed[0] = /* None */0;
	          return Curry._1(cb$4, WGLEvents.keycodeMap(keycode));
	        });
	  }
	  var tick = function (prev, _) {
	    var now = Date.now();
	    Curry._1(displayFunc, now - prev);
	    window.requestAnimationFrame(function (param) {
	          return tick(now, param);
	        });
	    return /* () */0;
	  };
	  var partial_arg = Date.now();
	  window.requestAnimationFrame(function (param) {
	        return tick(partial_arg, param);
	      });
	  return /* () */0;
	}
	
	function shaderSource(context, shader, source) {
	  context.shaderSource(shader, "#version 100 \n precision highp float; \n" + source);
	  return /* () */0;
	}
	
	function toTextureData(data) {
	  return new Uint8Array(data);
	}
	
	function bindFrameBuffer(context, target, frameBuffer) {
	  if (frameBuffer) {
	    context.bindFramebuffer(target, frameBuffer[0]);
	    return /* () */0;
	  } else {
	    context.bindFramebuffer(target, null);
	    return /* () */0;
	  }
	}
	
	function readPixelsRGBA(context, x, y, width, height) {
	  var data = new Uint8Array((Caml_int32.imul(width, height) << 2));
	  context.readPixels(x, y, width, height, RGLConstants.rgba, RGLConstants.unsigned_byte, data);
	  return data;
	}
	
	function loadImage(filename, _, callback, _$1) {
	  var image = new Image();
	  image.src = filename;
	  image.addEventListener("load", function () {
	        return Curry._1(callback, /* Some */[image]);
	      });
	  return /* () */0;
	}
	
	function texImage2DWithImage(context, target, level, image) {
	  context.texImage2D(target, level, RGLConstants.rgba, RGLConstants.rgba, RGLConstants.unsigned_byte, image);
	  return /* () */0;
	}
	
	function texImage2D(context, target, level, internalFormat, width, height, format, type_, data) {
	  context.texImage2D(target, level, internalFormat, width, height, 0, format, type_, data);
	  return /* () */0;
	}
	
	function create(kind, size) {
	  switch (kind) {
	    case 0 : 
	        return new Float64Array(size);
	    case 1 : 
	        return new Float32Array(size);
	    case 2 : 
	        return new Int16Array(size);
	    case 3 : 
	        return new Uint16Array(size);
	    case 4 : 
	        return new Int8Array(size);
	    case 5 : 
	    case 6 : 
	        return new Uint8Array(size);
	    case 8 : 
	        throw [
	              Caml_builtin_exceptions.assert_failure,
	              [
	                "WGLWebgl.re",
	                476,
	                17
	              ]
	            ];
	    case 7 : 
	    case 9 : 
	        return new Int32Array(size);
	    
	  }
	}
	
	function of_array(kind, arr) {
	  switch (kind) {
	    case 0 : 
	        return new Float64Array(arr);
	    case 1 : 
	        return new Float32Array(arr);
	    case 2 : 
	        return new Int16Array(arr);
	    case 3 : 
	        return new Uint16Array(arr);
	    case 4 : 
	        return new Int8Array(arr);
	    case 5 : 
	    case 6 : 
	        return new Uint8Array(arr);
	    case 8 : 
	        throw [
	              Caml_builtin_exceptions.assert_failure,
	              [
	                "WGLWebgl.re",
	                489,
	                17
	              ]
	            ];
	    case 7 : 
	    case 9 : 
	        return new Int32Array(arr);
	    
	  }
	}
	
	function sub(arr, offset, len) {
	  return arr.subarray(offset, offset + len | 0);
	}
	
	function vertexAttribPointer(context, attribute, size, type_, normalize, stride, offset) {
	  var normalize$1 = normalize ? true : false;
	  context.vertexAttribPointer(attribute, size, type_, normalize$1, stride, offset);
	  return /* () */0;
	}
	
	function to_array(a) {
	  return a;
	}
	
	function Mat4_001() {
	  return mat4.create();
	}
	
	function Mat4_002(prim) {
	  mat4.identity(prim);
	  return /* () */0;
	}
	
	function Mat4_003(prim, prim$1, prim$2) {
	  mat4.translate(prim, prim$1, prim$2);
	  return /* () */0;
	}
	
	function Mat4_004(prim, prim$1, prim$2) {
	  mat4.scale(prim, prim$1, prim$2);
	  return /* () */0;
	}
	
	function Mat4_005(prim, prim$1, prim$2, prim$3) {
	  mat4.rotate(prim, prim$1, prim$2, prim$3);
	  return /* () */0;
	}
	
	function Mat4_006(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6) {
	  mat4.ortho(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6);
	  return /* () */0;
	}
	
	var Mat4 = /* module */[
	  /* to_array */to_array,
	  Mat4_001,
	  Mat4_002,
	  Mat4_003,
	  Mat4_004,
	  Mat4_005,
	  Mat4_006
	];
	
	function uniformMatrix4fv(context, $$location, value) {
	  context.uniformMatrix4fv($$location, false, value);
	  return /* () */0;
	}
	
	function getProgramParameter(context, program, paramName) {
	  switch (paramName) {
	    case 0 : 
	        if (context.getProgramParameter(program, context.DELETE_STATUS)) {
	          return 1;
	        } else {
	          return 0;
	        }
	    case 1 : 
	        if (context.getProgramParameter(program, context.LINK_STATUS)) {
	          return 1;
	        } else {
	          return 0;
	        }
	    case 2 : 
	        if (context.getProgramParameter(program, context.VALIDATE_STATUS)) {
	          return 1;
	        } else {
	          return 0;
	        }
	    
	  }
	}
	
	function getShaderParameter(context, shader, paramName) {
	  switch (paramName) {
	    case 0 : 
	        if (context.getShaderParameter(shader, context.DELETE_STATUS)) {
	          return 1;
	        } else {
	          return 0;
	        }
	    case 1 : 
	        if (context.getShaderParameter(shader, context.COMPILE_STATUS)) {
	          return 1;
	        } else {
	          return 0;
	        }
	    case 2 : 
	        return context.getShaderParameter(shader, context.SHADER_TYPE);
	    
	  }
	}
	
	var Gl_003 = /* Events : WGLEvents */[WGLEvents.keycodeMap];
	
	function Gl_005(prim, prim$1, prim$2, prim$3, prim$4) {
	  prim.clearColor(prim$1, prim$2, prim$3, prim$4);
	  return /* () */0;
	}
	
	function Gl_006(prim) {
	  return prim.createProgram();
	}
	
	function Gl_007(prim, prim$1) {
	  return prim.createShader(prim$1);
	}
	
	function Gl_008(prim, prim$1, prim$2) {
	  prim.attachShader(prim$1, prim$2);
	  return /* () */0;
	}
	
	function Gl_009(prim, prim$1) {
	  prim.deleteShader(prim$1);
	  return /* () */0;
	}
	
	function Gl_011(prim, prim$1) {
	  prim.compileShader(prim$1);
	  return /* () */0;
	}
	
	function Gl_012(prim, prim$1) {
	  prim.linkProgram(prim$1);
	  return /* () */0;
	}
	
	function Gl_013(prim, prim$1) {
	  prim.useProgram(prim$1);
	  return /* () */0;
	}
	
	function Gl_014(prim) {
	  return prim.createBuffer();
	}
	
	function Gl_015(prim, prim$1, prim$2) {
	  prim.bindBuffer(prim$1, prim$2);
	  return /* () */0;
	}
	
	function Gl_016(prim) {
	  return prim.createTexture();
	}
	
	function Gl_017(prim, prim$1) {
	  prim.activeTexture(prim$1);
	  return /* () */0;
	}
	
	function Gl_018(prim, prim$1, prim$2) {
	  prim.bindTexture(prim$1, prim$2);
	  return /* () */0;
	}
	
	function Gl_019(prim, prim$1, prim$2, prim$3) {
	  prim.texParameteri(prim$1, prim$2, prim$3);
	  return /* () */0;
	}
	
	function Gl_021(prim, prim$1) {
	  prim.enable(prim$1);
	  return /* () */0;
	}
	
	function Gl_022(prim, prim$1) {
	  prim.disable(prim$1);
	  return /* () */0;
	}
	
	function Gl_023(prim, prim$1, prim$2) {
	  prim.blendFunc(prim$1, prim$2);
	  return /* () */0;
	}
	
	function Gl_024(prim) {
	  return prim.createFramebuffer();
	}
	
	function Gl_026(prim, prim$1, prim$2, prim$3, prim$4, prim$5) {
	  prim.framebufferTexture2D(prim$1, prim$2, prim$3, prim$4, prim$5);
	  return /* () */0;
	}
	
	function Gl_028(prim) {
	  return prim.width;
	}
	
	function Gl_029(prim) {
	  return prim.height;
	}
	
	function Gl_033(prim, prim$1, prim$2) {
	  prim.uniform1i(prim$1, prim$2);
	  return /* () */0;
	}
	
	function Gl_034(prim, prim$1, prim$2) {
	  prim.uniform1f(prim$1, prim$2);
	  return /* () */0;
	}
	
	function Gl_035(prim, prim$1) {
	  prim.generateMipmap(prim$1);
	  return /* () */0;
	}
	
	var Gl_036 = /* Bigarray */[
	  create,
	  of_array,
	  function (prim) {
	    return prim.length;
	  },
	  function (prim, prim$1) {
	    return prim[prim$1];
	  },
	  function (prim, prim$1, prim$2) {
	    prim[prim$1] = prim$2;
	    return /* () */0;
	  },
	  sub
	];
	
	function Gl_037(prim, prim$1, prim$2, prim$3) {
	  prim.bufferData(prim$1, prim$2, prim$3);
	  return /* () */0;
	}
	
	function Gl_038(prim, prim$1, prim$2, prim$3, prim$4) {
	  prim.viewport(prim$1, prim$2, prim$3, prim$4);
	  return /* () */0;
	}
	
	function Gl_039(prim, prim$1) {
	  prim.clear(prim$1);
	  return /* () */0;
	}
	
	function Gl_040(prim, prim$1, prim$2) {
	  return prim.getUniformLocation(prim$1, prim$2);
	}
	
	function Gl_041(prim, prim$1, prim$2) {
	  return prim.getAttribLocation(prim$1, prim$2);
	}
	
	function Gl_042(prim, prim$1) {
	  prim.enableVertexAttribArray(prim$1);
	  return /* () */0;
	}
	
	function Gl_048(prim, prim$1) {
	  return prim.getShaderInfoLog(prim$1);
	}
	
	function Gl_049(prim, prim$1) {
	  return prim.getProgramInfoLog(prim$1);
	}
	
	function Gl_050(prim, prim$1) {
	  return prim.getShaderSource(prim$1);
	}
	
	function Gl_051(prim, prim$1, prim$2, prim$3) {
	  prim.drawArrays(prim$1, prim$2, prim$3);
	  return /* () */0;
	}
	
	function Gl_052(prim, prim$1, prim$2, prim$3, prim$4) {
	  prim.drawElements(prim$1, prim$2, prim$3, prim$4);
	  return /* () */0;
	}
	
	var Gl = /* module */[
	  /* target */"web",
	  /* File */File,
	  /* Window */Window,
	  Gl_003,
	  /* render */render,
	  Gl_005,
	  Gl_006,
	  Gl_007,
	  Gl_008,
	  Gl_009,
	  /* shaderSource */shaderSource,
	  Gl_011,
	  Gl_012,
	  Gl_013,
	  Gl_014,
	  Gl_015,
	  Gl_016,
	  Gl_017,
	  Gl_018,
	  Gl_019,
	  /* toTextureData */toTextureData,
	  Gl_021,
	  Gl_022,
	  Gl_023,
	  Gl_024,
	  /* bindFrameBuffer */bindFrameBuffer,
	  Gl_026,
	  /* readPixelsRGBA */readPixelsRGBA,
	  Gl_028,
	  Gl_029,
	  /* loadImage */loadImage,
	  /* texImage2DWithImage */texImage2DWithImage,
	  /* texImage2D */texImage2D,
	  Gl_033,
	  Gl_034,
	  Gl_035,
	  Gl_036,
	  Gl_037,
	  Gl_038,
	  Gl_039,
	  Gl_040,
	  Gl_041,
	  Gl_042,
	  /* vertexAttribPointer */vertexAttribPointer,
	  /* Mat4 */Mat4,
	  /* uniformMatrix4fv */uniformMatrix4fv,
	  /* getProgramParameter */getProgramParameter,
	  /* getShaderParameter */getShaderParameter,
	  Gl_048,
	  Gl_049,
	  Gl_050,
	  Gl_051,
	  Gl_052
	];
	
	exports.Document     = Document;
	exports.createCanvas = createCanvas;
	exports.Gl           = Gl;
	/* window Not a pure module */


/***/ },
/* 34 */
/*!************************************************!*\
  !*** ./~/reasongl-web/lib/js/src/wGLEvents.js ***!
  \************************************************/
/***/ function(module, exports) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	
	function keycodeMap(param) {
	  var switcher = param - 8 | 0;
	  if (switcher > 214 || switcher < 0) {
	    return /* Nothing */65;
	  } else {
	    switch (switcher) {
	      case 0 : 
	          return /* Backspace */0;
	      case 1 : 
	          return /* Tab */1;
	      case 5 : 
	          return /* Enter */2;
	      case 8 : 
	          return /* LeftShift */56;
	      case 9 : 
	          return /* LeftCtrl */55;
	      case 10 : 
	          return /* LeftAlt */57;
	      case 12 : 
	          return /* CapsLock */63;
	      case 19 : 
	          return /* Escape */3;
	      case 24 : 
	          return /* Space */4;
	      case 29 : 
	          return /* Left */52;
	      case 30 : 
	          return /* Up */54;
	      case 31 : 
	          return /* Right */51;
	      case 32 : 
	          return /* Down */53;
	      case 40 : 
	          return /* Num_0 */10;
	      case 41 : 
	          return /* Num_1 */11;
	      case 42 : 
	          return /* Num_2 */12;
	      case 43 : 
	          return /* Num_3 */13;
	      case 44 : 
	          return /* Num_4 */14;
	      case 45 : 
	          return /* Num_5 */15;
	      case 46 : 
	          return /* Num_6 */16;
	      case 47 : 
	          return /* Num_7 */17;
	      case 48 : 
	          return /* Num_8 */18;
	      case 49 : 
	          return /* Num_9 */19;
	      case 57 : 
	          return /* A */25;
	      case 58 : 
	          return /* B */26;
	      case 59 : 
	          return /* C */27;
	      case 60 : 
	          return /* D */28;
	      case 61 : 
	          return /* E */29;
	      case 62 : 
	          return /* F */30;
	      case 63 : 
	          return /* G */31;
	      case 64 : 
	          return /* H */32;
	      case 65 : 
	          return /* I */33;
	      case 66 : 
	          return /* J */34;
	      case 67 : 
	          return /* K */35;
	      case 68 : 
	          return /* L */36;
	      case 69 : 
	          return /* M */37;
	      case 70 : 
	          return /* N */38;
	      case 71 : 
	          return /* O */39;
	      case 72 : 
	          return /* P */40;
	      case 73 : 
	          return /* Q */41;
	      case 74 : 
	          return /* R */42;
	      case 75 : 
	          return /* S */43;
	      case 76 : 
	          return /* T */44;
	      case 77 : 
	          return /* U */45;
	      case 78 : 
	          return /* V */46;
	      case 79 : 
	          return /* W */47;
	      case 80 : 
	          return /* X */48;
	      case 81 : 
	          return /* Y */49;
	      case 82 : 
	          return /* Z */50;
	      case 83 : 
	          return /* LeftOsKey */58;
	      case 85 : 
	          return /* RightOsKey */62;
	      case 178 : 
	          return /* Semicolon */20;
	      case 179 : 
	          return /* Equals */21;
	      case 180 : 
	          return /* Comma */6;
	      case 181 : 
	          return /* Minus */7;
	      case 182 : 
	          return /* Period */8;
	      case 183 : 
	          return /* Slash */9;
	      case 184 : 
	          return /* Backtick */64;
	      case 2 : 
	      case 3 : 
	      case 4 : 
	      case 6 : 
	      case 7 : 
	      case 11 : 
	      case 13 : 
	      case 14 : 
	      case 15 : 
	      case 16 : 
	      case 17 : 
	      case 18 : 
	      case 20 : 
	      case 21 : 
	      case 22 : 
	      case 23 : 
	      case 25 : 
	      case 26 : 
	      case 27 : 
	      case 28 : 
	      case 33 : 
	      case 34 : 
	      case 35 : 
	      case 36 : 
	      case 37 : 
	      case 38 : 
	      case 39 : 
	      case 50 : 
	      case 51 : 
	      case 52 : 
	      case 53 : 
	      case 54 : 
	      case 55 : 
	      case 56 : 
	      case 84 : 
	      case 86 : 
	      case 87 : 
	      case 88 : 
	      case 89 : 
	      case 90 : 
	      case 91 : 
	      case 92 : 
	      case 93 : 
	      case 94 : 
	      case 95 : 
	      case 96 : 
	      case 97 : 
	      case 98 : 
	      case 99 : 
	      case 100 : 
	      case 101 : 
	      case 102 : 
	      case 103 : 
	      case 104 : 
	      case 105 : 
	      case 106 : 
	      case 107 : 
	      case 108 : 
	      case 109 : 
	      case 110 : 
	      case 111 : 
	      case 112 : 
	      case 113 : 
	      case 114 : 
	      case 115 : 
	      case 116 : 
	      case 117 : 
	      case 118 : 
	      case 119 : 
	      case 120 : 
	      case 121 : 
	      case 122 : 
	      case 123 : 
	      case 124 : 
	      case 125 : 
	      case 126 : 
	      case 127 : 
	      case 128 : 
	      case 129 : 
	      case 130 : 
	      case 131 : 
	      case 132 : 
	      case 133 : 
	      case 134 : 
	      case 135 : 
	      case 136 : 
	      case 137 : 
	      case 138 : 
	      case 139 : 
	      case 140 : 
	      case 141 : 
	      case 142 : 
	      case 143 : 
	      case 144 : 
	      case 145 : 
	      case 146 : 
	      case 147 : 
	      case 148 : 
	      case 149 : 
	      case 150 : 
	      case 151 : 
	      case 152 : 
	      case 153 : 
	      case 154 : 
	      case 155 : 
	      case 156 : 
	      case 157 : 
	      case 158 : 
	      case 159 : 
	      case 160 : 
	      case 161 : 
	      case 162 : 
	      case 163 : 
	      case 164 : 
	      case 165 : 
	      case 166 : 
	      case 167 : 
	      case 168 : 
	      case 169 : 
	      case 170 : 
	      case 171 : 
	      case 172 : 
	      case 173 : 
	      case 174 : 
	      case 175 : 
	      case 176 : 
	      case 177 : 
	      case 185 : 
	      case 186 : 
	      case 187 : 
	      case 188 : 
	      case 189 : 
	      case 190 : 
	      case 191 : 
	      case 192 : 
	      case 193 : 
	      case 194 : 
	      case 195 : 
	      case 196 : 
	      case 197 : 
	      case 198 : 
	      case 199 : 
	      case 200 : 
	      case 201 : 
	      case 202 : 
	      case 203 : 
	      case 204 : 
	      case 205 : 
	      case 206 : 
	      case 207 : 
	      case 208 : 
	      case 209 : 
	      case 210 : 
	          return /* Nothing */65;
	      case 211 : 
	          return /* OpenBracket */22;
	      case 212 : 
	          return /* Backslash */23;
	      case 213 : 
	          return /* CloseBracket */24;
	      case 214 : 
	          return /* Quote */5;
	      
	    }
	  }
	}
	
	exports.keycodeMap = keycodeMap;
	/* No side effect */


/***/ },
/* 35 */
/*!*********************************************************!*\
  !*** ./~/reasongl-interface/lib/js/src/rGLConstants.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	
	var triangles = 4;
	
	var triangle_strip = 5;
	
	var texture0 = 33984;
	
	var texture1 = 33985;
	
	var texture2 = 33986;
	
	var texture_2d = 3553;
	
	var blend = 3042;
	
	var texture_wrap_s = 10242;
	
	var texture_wrap_t = 10243;
	
	var clamp_to_edge = 33071;
	
	var src_alpha = 770;
	
	var one_minus_src_alpha = 771;
	
	var dst_alpha = 772;
	
	var depth_test = 2929;
	
	var rgb = 6407;
	
	var rgba = 6408;
	
	var triangle_fan = 6;
	
	var array_buffer = 34962;
	
	var element_array_buffer = 34963;
	
	var array_buffer_binding = 34964;
	
	var element_array_buffer_binding = 34965;
	
	var stream_draw = 35040;
	
	var static_draw = 35044;
	
	var dynamic_draw = 35048;
	
	var buffer_size = 34660;
	
	var buffer_usage = 34661;
	
	var float_ = 5126;
	
	var unsigned_int = 5125;
	
	var current_vertex_attrib = 34342;
	
	var fragment_shader = 35632;
	
	var vertex_shader = 35633;
	
	var max_vertex_attribs = 34921;
	
	var max_vertex_uniform_vectors = 36347;
	
	var max_varying_vectors = 36348;
	
	var max_combined_texture_image_units = 35661;
	
	var max_vertex_texture_image_units = 35660;
	
	var max_texture_image_units = 34930;
	
	var max_fragment_uniform_vectors = 36349;
	
	var shader_type = 35663;
	
	var delete_status = 35712;
	
	var link_status = 35714;
	
	var validate_status = 35715;
	
	var attached_shaders = 35717;
	
	var active_uniforms = 35718;
	
	var active_attributes = 35721;
	
	var shading_language_version = 35724;
	
	var current_program = 35725;
	
	var compile_status = 35713;
	
	var vendor = 7936;
	
	var renderer = 7937;
	
	var version = 7938;
	
	var float_vec2 = 35664;
	
	var float_vec3 = 35665;
	
	var float_vec4 = 35666;
	
	var int_vec2 = 35667;
	
	var int_vec3 = 35668;
	
	var int_vec4 = 35669;
	
	var bool_ = 35670;
	
	var bool_vec2 = 35671;
	
	var bool_vec3 = 35672;
	
	var bool_vec4 = 35673;
	
	var float_mat2 = 35674;
	
	var float_mat3 = 35675;
	
	var float_mat4 = 35676;
	
	var sampler_2d = 35678;
	
	var sampler_cube = 35680;
	
	var unpack_flip_y_webgl = 37440;
	
	var unpack_premultiply_alpha_webgl = 37441;
	
	var context_lost_webgl = 37442;
	
	var unpack_colorspace_conversion_webgl = 37443;
	
	var browser_default_webgl = 37444;
	
	var vertex_attrib_array_enabled = 34338;
	
	var vertex_attrib_array_size = 34339;
	
	var vertex_attrib_array_stride = 34340;
	
	var vertex_attrib_array_type = 34341;
	
	var vertex_attrib_array_normalized = 34922;
	
	var vertex_attrib_array_pointer = 34373;
	
	var vertex_attrib_array_buffer_binding = 34975;
	
	var depth_buffer_bit = 256;
	
	var stencil_buffer_bit = 1024;
	
	var color_buffer_bit = 16384;
	
	var unsigned_short = 5123;
	
	var unsigned_byte = 5121;
	
	var texture_mag_filter = 10240;
	
	var texture_min_filter = 10241;
	
	var linear = 9729;
	
	var linear_mipmap_nearest = 9985;
	
	exports.triangles                          = triangles;
	exports.triangle_strip                     = triangle_strip;
	exports.texture0                           = texture0;
	exports.texture1                           = texture1;
	exports.texture2                           = texture2;
	exports.texture_2d                         = texture_2d;
	exports.blend                              = blend;
	exports.texture_wrap_s                     = texture_wrap_s;
	exports.texture_wrap_t                     = texture_wrap_t;
	exports.clamp_to_edge                      = clamp_to_edge;
	exports.src_alpha                          = src_alpha;
	exports.one_minus_src_alpha                = one_minus_src_alpha;
	exports.dst_alpha                          = dst_alpha;
	exports.depth_test                         = depth_test;
	exports.rgb                                = rgb;
	exports.rgba                               = rgba;
	exports.triangle_fan                       = triangle_fan;
	exports.array_buffer                       = array_buffer;
	exports.element_array_buffer               = element_array_buffer;
	exports.array_buffer_binding               = array_buffer_binding;
	exports.element_array_buffer_binding       = element_array_buffer_binding;
	exports.stream_draw                        = stream_draw;
	exports.static_draw                        = static_draw;
	exports.dynamic_draw                       = dynamic_draw;
	exports.buffer_size                        = buffer_size;
	exports.buffer_usage                       = buffer_usage;
	exports.float_                             = float_;
	exports.unsigned_int                       = unsigned_int;
	exports.current_vertex_attrib              = current_vertex_attrib;
	exports.fragment_shader                    = fragment_shader;
	exports.vertex_shader                      = vertex_shader;
	exports.max_vertex_attribs                 = max_vertex_attribs;
	exports.max_vertex_uniform_vectors         = max_vertex_uniform_vectors;
	exports.max_varying_vectors                = max_varying_vectors;
	exports.max_combined_texture_image_units   = max_combined_texture_image_units;
	exports.max_vertex_texture_image_units     = max_vertex_texture_image_units;
	exports.max_texture_image_units            = max_texture_image_units;
	exports.max_fragment_uniform_vectors       = max_fragment_uniform_vectors;
	exports.shader_type                        = shader_type;
	exports.delete_status                      = delete_status;
	exports.link_status                        = link_status;
	exports.validate_status                    = validate_status;
	exports.attached_shaders                   = attached_shaders;
	exports.active_uniforms                    = active_uniforms;
	exports.active_attributes                  = active_attributes;
	exports.shading_language_version           = shading_language_version;
	exports.current_program                    = current_program;
	exports.compile_status                     = compile_status;
	exports.vendor                             = vendor;
	exports.renderer                           = renderer;
	exports.version                            = version;
	exports.float_vec2                         = float_vec2;
	exports.float_vec3                         = float_vec3;
	exports.float_vec4                         = float_vec4;
	exports.int_vec2                           = int_vec2;
	exports.int_vec3                           = int_vec3;
	exports.int_vec4                           = int_vec4;
	exports.bool_                              = bool_;
	exports.bool_vec2                          = bool_vec2;
	exports.bool_vec3                          = bool_vec3;
	exports.bool_vec4                          = bool_vec4;
	exports.float_mat2                         = float_mat2;
	exports.float_mat3                         = float_mat3;
	exports.float_mat4                         = float_mat4;
	exports.sampler_2d                         = sampler_2d;
	exports.sampler_cube                       = sampler_cube;
	exports.unpack_flip_y_webgl                = unpack_flip_y_webgl;
	exports.unpack_premultiply_alpha_webgl     = unpack_premultiply_alpha_webgl;
	exports.context_lost_webgl                 = context_lost_webgl;
	exports.unpack_colorspace_conversion_webgl = unpack_colorspace_conversion_webgl;
	exports.browser_default_webgl              = browser_default_webgl;
	exports.vertex_attrib_array_enabled        = vertex_attrib_array_enabled;
	exports.vertex_attrib_array_size           = vertex_attrib_array_size;
	exports.vertex_attrib_array_stride         = vertex_attrib_array_stride;
	exports.vertex_attrib_array_type           = vertex_attrib_array_type;
	exports.vertex_attrib_array_normalized     = vertex_attrib_array_normalized;
	exports.vertex_attrib_array_pointer        = vertex_attrib_array_pointer;
	exports.vertex_attrib_array_buffer_binding = vertex_attrib_array_buffer_binding;
	exports.depth_buffer_bit                   = depth_buffer_bit;
	exports.stencil_buffer_bit                 = stencil_buffer_bit;
	exports.color_buffer_bit                   = color_buffer_bit;
	exports.unsigned_short                     = unsigned_short;
	exports.unsigned_byte                      = unsigned_byte;
	exports.texture_mag_filter                 = texture_mag_filter;
	exports.texture_min_filter                 = texture_min_filter;
	exports.linear                             = linear;
	exports.linear_mipmap_nearest              = linear_mipmap_nearest;
	/* No side effect */


/***/ },
/* 36 */
/*!*********************************!*\
  !*** ./lib/js/src/glhelpers.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var Curry        = __webpack_require__(/*! bs-platform/lib/js/curry */ 1);
	var Utils        = __webpack_require__(/*! ./utils */ 4);
	var Common       = __webpack_require__(/*! ./common */ 19);
	var Matrix       = __webpack_require__(/*! ./matrix */ 32);
	var Shaders      = __webpack_require__(/*! ./shaders */ 37);
	var WGLWebgl     = __webpack_require__(/*! reasongl-web/lib/js/src/wGLWebgl */ 33);
	var Caml_int32   = __webpack_require__(/*! bs-platform/lib/js/caml_int32 */ 12);
	var Pervasives   = __webpack_require__(/*! bs-platform/lib/js/pervasives */ 8);
	var RGLConstants = __webpack_require__(/*! reasongl-interface/lib/js/src/rGLConstants */ 35);
	
	function getProgram(gl, vertexShaderSource, fragmentShaderSource) {
	  var vertexShader = Curry._2(WGLWebgl.Gl[/* createShader */7], gl, RGLConstants.vertex_shader);
	  Curry._3(WGLWebgl.Gl[/* shaderSource */10], gl, vertexShader, vertexShaderSource);
	  Curry._2(WGLWebgl.Gl[/* compileShader */11], gl, vertexShader);
	  var compiledCorrectly = +(Curry._3(WGLWebgl.Gl[/* getShaderParameter */47], gl, vertexShader, /* Compile_status */1) === 1);
	  if (compiledCorrectly) {
	    var fragmentShader = Curry._2(WGLWebgl.Gl[/* createShader */7], gl, RGLConstants.fragment_shader);
	    Curry._3(WGLWebgl.Gl[/* shaderSource */10], gl, fragmentShader, fragmentShaderSource);
	    Curry._2(WGLWebgl.Gl[/* compileShader */11], gl, fragmentShader);
	    var compiledCorrectly$1 = +(Curry._3(WGLWebgl.Gl[/* getShaderParameter */47], gl, fragmentShader, /* Compile_status */1) === 1);
	    if (compiledCorrectly$1) {
	      var program = Curry._1(WGLWebgl.Gl[/* createProgram */6], gl);
	      Curry._3(WGLWebgl.Gl[/* attachShader */8], gl, program, vertexShader);
	      Curry._2(WGLWebgl.Gl[/* deleteShader */9], gl, vertexShader);
	      Curry._3(WGLWebgl.Gl[/* attachShader */8], gl, program, fragmentShader);
	      Curry._2(WGLWebgl.Gl[/* deleteShader */9], gl, fragmentShader);
	      Curry._2(WGLWebgl.Gl[/* linkProgram */12], gl, program);
	      var linkedCorrectly = +(Curry._3(WGLWebgl.Gl[/* getProgramParameter */46], gl, program, /* Link_status */1) === 1);
	      if (linkedCorrectly) {
	        return /* Some */[program];
	      } else {
	        console.log("Linking error: " + Curry._2(WGLWebgl.Gl[/* getProgramInfoLog */49], gl, program));
	        return /* None */0;
	      }
	    } else {
	      console.log("Fragment shader error: " + Curry._2(WGLWebgl.Gl[/* getShaderInfoLog */48], gl, fragmentShader));
	      return /* None */0;
	    }
	  } else {
	    console.log("Vertex shader error: " + Curry._2(WGLWebgl.Gl[/* getShaderInfoLog */48], gl, vertexShader));
	    return /* None */0;
	  }
	}
	
	function createCanvas($$window, height, width) {
	  Curry._3(WGLWebgl.Gl[/* Window */2][/* setWindowSize */3], $$window, width, height);
	  var gl = Curry._1(WGLWebgl.Gl[/* Window */2][/* getContext */5], $$window);
	  Curry._5(WGLWebgl.Gl[/* viewport */38], gl, -1, -1, width, height);
	  Curry._5(WGLWebgl.Gl[/* clearColor */5], gl, 0, 0, 0, 1);
	  Curry._2(WGLWebgl.Gl[/* clear */39], gl, RGLConstants.color_buffer_bit | RGLConstants.depth_buffer_bit);
	  var camera = /* record */[/* projectionMatrix */Curry._1(WGLWebgl.Gl[/* Mat4 */44][/* create */1], /* () */0)];
	  var vertexBuffer = Curry._1(WGLWebgl.Gl[/* createBuffer */14], gl);
	  var elementBuffer = Curry._1(WGLWebgl.Gl[/* createBuffer */14], gl);
	  var match = getProgram(gl, Shaders.vertexShaderSource, Shaders.fragmentShaderSource);
	  var program = match ? match[0] : Pervasives.failwith("Could not create the program and/or the shaders. Aborting.");
	  Curry._2(WGLWebgl.Gl[/* useProgram */13], gl, program);
	  var aVertexPosition = Curry._3(WGLWebgl.Gl[/* getAttribLocation */41], gl, program, "aVertexPosition");
	  Curry._2(WGLWebgl.Gl[/* enableVertexAttribArray */42], gl, aVertexPosition);
	  var aVertexColor = Curry._3(WGLWebgl.Gl[/* getAttribLocation */41], gl, program, "aVertexColor");
	  Curry._2(WGLWebgl.Gl[/* enableVertexAttribArray */42], gl, aVertexColor);
	  var pMatrixUniform = Curry._3(WGLWebgl.Gl[/* getUniformLocation */40], gl, program, "uPMatrix");
	  Curry._3(WGLWebgl.Gl[/* uniformMatrix4fv */45], gl, pMatrixUniform, camera[/* projectionMatrix */0]);
	  var aTextureCoord = Curry._3(WGLWebgl.Gl[/* getAttribLocation */41], gl, program, "aTextureCoord");
	  Curry._2(WGLWebgl.Gl[/* enableVertexAttribArray */42], gl, aTextureCoord);
	  var texture = Curry._1(WGLWebgl.Gl[/* createTexture */16], gl);
	  Curry._2(WGLWebgl.Gl[/* activeTexture */17], gl, RGLConstants.texture0);
	  Curry._3(WGLWebgl.Gl[/* bindTexture */18], gl, RGLConstants.texture_2d, texture);
	  var uSampler = Curry._3(WGLWebgl.Gl[/* getUniformLocation */40], gl, program, "uSampler");
	  Curry.app(WGLWebgl.Gl[/* texImage2D */32], [
	        gl,
	        RGLConstants.texture_2d,
	        0,
	        RGLConstants.rgba,
	        1,
	        1,
	        RGLConstants.rgba,
	        RGLConstants.unsigned_byte,
	        Curry._1(WGLWebgl.Gl[/* toTextureData */20], /* int array */[
	              0,
	              0,
	              0,
	              0
	            ])
	      ]);
	  Curry._4(WGLWebgl.Gl[/* texParameteri */19], gl, RGLConstants.texture_2d, RGLConstants.texture_mag_filter, RGLConstants.linear);
	  Curry._4(WGLWebgl.Gl[/* texParameteri */19], gl, RGLConstants.texture_2d, RGLConstants.texture_min_filter, RGLConstants.linear_mipmap_nearest);
	  Curry._2(WGLWebgl.Gl[/* enable */21], gl, RGLConstants.blend);
	  Curry._3(WGLWebgl.Gl[/* blendFunc */23], gl, RGLConstants.src_alpha, RGLConstants.one_minus_src_alpha);
	  Curry._7(WGLWebgl.Gl[/* Mat4 */44][/* ortho */6], camera[/* projectionMatrix */0], 0, width, height, 0, 0, 1);
	  return /* record */[
	          /* camera */camera,
	          /* window */$$window,
	          /* gl */gl,
	          /* vertexBuffer */vertexBuffer,
	          /* elementBuffer */elementBuffer,
	          /* aVertexColor */aVertexColor,
	          /* aTextureCoord */aTextureCoord,
	          /* aVertexPosition */aVertexPosition,
	          /* pMatrixUniform */pMatrixUniform,
	          /* uSampler */uSampler,
	          /* batch : record */[
	            /* vertexArray */Curry._2(WGLWebgl.Gl[/* Bigarray */36][/* create */0], /* Float32 */1, Caml_int32.imul(Common.circularBufferSize, Common.vertexSize)),
	            /* elementArray */Curry._2(WGLWebgl.Gl[/* Bigarray */36][/* create */0], /* Uint16 */3, Common.circularBufferSize),
	            /* vertexPtr */0,
	            /* elementPtr */0,
	            /* currTex : None */0,
	            /* nullTex */texture
	          ],
	          /* keyboard : record */[/* keyCode : Nothing */65],
	          /* mouse : record */[
	            /* pos : tuple */[
	              0,
	              0
	            ],
	            /* prevPos : tuple */[
	              0,
	              0
	            ],
	            /* pressed : false */0
	          ],
	          /* style : record */[
	            /* strokeColor : Some */[/* record */[
	                /* r */0,
	                /* g */0,
	                /* b */0
	              ]],
	            /* strokeWeight */10,
	            /* fillColor : Some */[/* record */[
	                /* r */0,
	                /* g */0,
	                /* b */0
	              ]]
	          ],
	          /* styleStack : [] */0,
	          /* frame : record */[
	            /* count */1,
	            /* rate */10
	          ],
	          /* matrix */Matrix.createIdentity(/* () */0),
	          /* matrixStack : [] */0,
	          /* size : record */[
	            /* height */height,
	            /* width */width,
	            /* resizeable : true */1
	          ]
	        ];
	}
	
	function drawGeometry(vertexArray, elementArray, mode, count, textureBuffer, env) {
	  Curry._3(WGLWebgl.Gl[/* bindBuffer */15], env[/* gl */2], RGLConstants.array_buffer, env[/* vertexBuffer */3]);
	  Curry._4(WGLWebgl.Gl[/* bufferData */37], env[/* gl */2], RGLConstants.array_buffer, vertexArray, RGLConstants.stream_draw);
	  Curry._7(WGLWebgl.Gl[/* vertexAttribPointer */43], env[/* gl */2], env[/* aVertexPosition */7], 2, RGLConstants.float_, /* false */0, (Common.vertexSize << 2), 0);
	  Curry._7(WGLWebgl.Gl[/* vertexAttribPointer */43], env[/* gl */2], env[/* aVertexColor */5], 4, RGLConstants.float_, /* false */0, (Common.vertexSize << 2), 8);
	  Curry._7(WGLWebgl.Gl[/* vertexAttribPointer */43], env[/* gl */2], env[/* aTextureCoord */6], 2, RGLConstants.float_, /* false */0, (Common.vertexSize << 2), 24);
	  Curry._3(WGLWebgl.Gl[/* uniform1i */33], env[/* gl */2], env[/* uSampler */9], 0);
	  Curry._3(WGLWebgl.Gl[/* bindBuffer */15], env[/* gl */2], RGLConstants.element_array_buffer, env[/* elementBuffer */4]);
	  Curry._4(WGLWebgl.Gl[/* bufferData */37], env[/* gl */2], RGLConstants.element_array_buffer, elementArray, RGLConstants.stream_draw);
	  Curry._3(WGLWebgl.Gl[/* bindTexture */18], env[/* gl */2], RGLConstants.texture_2d, textureBuffer);
	  return Curry._5(WGLWebgl.Gl[/* drawElements */52], env[/* gl */2], mode, count, RGLConstants.unsigned_short, 0);
	}
	
	function flushGlobalBatch(env) {
	  if (env[/* batch */10][/* elementPtr */3] > 0) {
	    var match = env[/* batch */10][/* currTex */4];
	    var textureBuffer = match ? match[0] : env[/* batch */10][/* nullTex */5];
	    drawGeometry(Curry._3(WGLWebgl.Gl[/* Bigarray */36][/* sub */5], env[/* batch */10][/* vertexArray */0], 0, env[/* batch */10][/* vertexPtr */2]), Curry._3(WGLWebgl.Gl[/* Bigarray */36][/* sub */5], env[/* batch */10][/* elementArray */1], 0, env[/* batch */10][/* elementPtr */3]), RGLConstants.triangles, env[/* batch */10][/* elementPtr */3], textureBuffer, env);
	    env[/* batch */10][/* currTex */4] = /* None */0;
	    env[/* batch */10][/* vertexPtr */2] = 0;
	    env[/* batch */10][/* elementPtr */3] = 0;
	    return /* () */0;
	  } else {
	    return 0;
	  }
	}
	
	function maybeFlushBatch(env, texture, adding) {
	  if ((env[/* batch */10][/* elementPtr */3] + adding | 0) >= Common.circularBufferSize || env[/* batch */10][/* elementPtr */3] > 0 && env[/* batch */10][/* currTex */4] !== texture) {
	    return flushGlobalBatch(env);
	  } else {
	    return 0;
	  }
	}
	
	function toColorFloat(i) {
	  return i / 255;
	}
	
	function addRectToGlobalBatch(env, param, param$1, param$2, param$3, param$4) {
	  maybeFlushBatch(env, /* None */0, 6);
	  var set = WGLWebgl.Gl[/* Bigarray */36][/* set */4];
	  var match_000 = param$4[/* r */0] / 255;
	  var match_001 = param$4[/* g */1] / 255;
	  var match_002 = param$4[/* b */2] / 255;
	  var b = match_002;
	  var g = match_001;
	  var r = match_000;
	  var i = env[/* batch */10][/* vertexPtr */2];
	  var vertexArrayToMutate = env[/* batch */10][/* vertexArray */0];
	  Curry._3(set, vertexArrayToMutate, i + 0 | 0, param[0]);
	  Curry._3(set, vertexArrayToMutate, i + 1 | 0, param[1]);
	  Curry._3(set, vertexArrayToMutate, i + 2 | 0, r);
	  Curry._3(set, vertexArrayToMutate, i + 3 | 0, g);
	  Curry._3(set, vertexArrayToMutate, i + 4 | 0, b);
	  Curry._3(set, vertexArrayToMutate, i + 5 | 0, 1);
	  Curry._3(set, vertexArrayToMutate, i + 6 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 7 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 8 | 0, param$1[0]);
	  Curry._3(set, vertexArrayToMutate, i + 9 | 0, param$1[1]);
	  Curry._3(set, vertexArrayToMutate, i + 10 | 0, r);
	  Curry._3(set, vertexArrayToMutate, i + 11 | 0, g);
	  Curry._3(set, vertexArrayToMutate, i + 12 | 0, b);
	  Curry._3(set, vertexArrayToMutate, i + 13 | 0, 1);
	  Curry._3(set, vertexArrayToMutate, i + 14 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 15 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 16 | 0, param$2[0]);
	  Curry._3(set, vertexArrayToMutate, i + 17 | 0, param$2[1]);
	  Curry._3(set, vertexArrayToMutate, i + 18 | 0, r);
	  Curry._3(set, vertexArrayToMutate, i + 19 | 0, g);
	  Curry._3(set, vertexArrayToMutate, i + 20 | 0, b);
	  Curry._3(set, vertexArrayToMutate, i + 21 | 0, 1);
	  Curry._3(set, vertexArrayToMutate, i + 22 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 23 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 24 | 0, param$3[0]);
	  Curry._3(set, vertexArrayToMutate, i + 25 | 0, param$3[1]);
	  Curry._3(set, vertexArrayToMutate, i + 26 | 0, r);
	  Curry._3(set, vertexArrayToMutate, i + 27 | 0, g);
	  Curry._3(set, vertexArrayToMutate, i + 28 | 0, b);
	  Curry._3(set, vertexArrayToMutate, i + 29 | 0, 1);
	  Curry._3(set, vertexArrayToMutate, i + 30 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 31 | 0, 0.0);
	  var ii = Caml_int32.div(i, Common.vertexSize);
	  var j = env[/* batch */10][/* elementPtr */3];
	  var elementArrayToMutate = env[/* batch */10][/* elementArray */1];
	  Curry._3(set, elementArrayToMutate, j + 0 | 0, ii);
	  Curry._3(set, elementArrayToMutate, j + 1 | 0, ii + 1 | 0);
	  Curry._3(set, elementArrayToMutate, j + 2 | 0, ii + 2 | 0);
	  Curry._3(set, elementArrayToMutate, j + 3 | 0, ii + 1 | 0);
	  Curry._3(set, elementArrayToMutate, j + 4 | 0, ii + 2 | 0);
	  Curry._3(set, elementArrayToMutate, j + 5 | 0, ii + 3 | 0);
	  env[/* batch */10][/* vertexPtr */2] = i + (Common.vertexSize << 2) | 0;
	  env[/* batch */10][/* elementPtr */3] = j + 6 | 0;
	  return /* () */0;
	}
	
	function drawTriangleInternal(env, param, param$1, param$2, param$3) {
	  maybeFlushBatch(env, /* None */0, 3);
	  var set = WGLWebgl.Gl[/* Bigarray */36][/* set */4];
	  var match_000 = param$3[/* r */0] / 255;
	  var match_001 = param$3[/* g */1] / 255;
	  var match_002 = param$3[/* b */2] / 255;
	  var b = match_002;
	  var g = match_001;
	  var r = match_000;
	  var i = env[/* batch */10][/* vertexPtr */2];
	  var vertexArrayToMutate = env[/* batch */10][/* vertexArray */0];
	  Curry._3(set, vertexArrayToMutate, i + 0 | 0, param[0]);
	  Curry._3(set, vertexArrayToMutate, i + 1 | 0, param[1]);
	  Curry._3(set, vertexArrayToMutate, i + 2 | 0, r);
	  Curry._3(set, vertexArrayToMutate, i + 3 | 0, g);
	  Curry._3(set, vertexArrayToMutate, i + 4 | 0, b);
	  Curry._3(set, vertexArrayToMutate, i + 5 | 0, 1);
	  Curry._3(set, vertexArrayToMutate, i + 6 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 7 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 8 | 0, param$1[0]);
	  Curry._3(set, vertexArrayToMutate, i + 9 | 0, param$1[1]);
	  Curry._3(set, vertexArrayToMutate, i + 10 | 0, r);
	  Curry._3(set, vertexArrayToMutate, i + 11 | 0, g);
	  Curry._3(set, vertexArrayToMutate, i + 12 | 0, b);
	  Curry._3(set, vertexArrayToMutate, i + 13 | 0, 1);
	  Curry._3(set, vertexArrayToMutate, i + 14 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 15 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 16 | 0, param$2[0]);
	  Curry._3(set, vertexArrayToMutate, i + 17 | 0, param$2[1]);
	  Curry._3(set, vertexArrayToMutate, i + 18 | 0, r);
	  Curry._3(set, vertexArrayToMutate, i + 19 | 0, g);
	  Curry._3(set, vertexArrayToMutate, i + 20 | 0, b);
	  Curry._3(set, vertexArrayToMutate, i + 21 | 0, 1);
	  Curry._3(set, vertexArrayToMutate, i + 22 | 0, 0.0);
	  Curry._3(set, vertexArrayToMutate, i + 23 | 0, 0.0);
	  var ii = Caml_int32.div(i, Common.vertexSize);
	  var j = env[/* batch */10][/* elementPtr */3];
	  var elementArrayToMutate = env[/* batch */10][/* elementArray */1];
	  Curry._3(set, elementArrayToMutate, j + 0 | 0, ii);
	  Curry._3(set, elementArrayToMutate, j + 1 | 0, ii + 1 | 0);
	  Curry._3(set, elementArrayToMutate, j + 2 | 0, ii + 2 | 0);
	  env[/* batch */10][/* vertexPtr */2] = i + Caml_int32.imul(3, Common.vertexSize) | 0;
	  env[/* batch */10][/* elementPtr */3] = j + 3 | 0;
	  return /* () */0;
	}
	
	function drawLineInternal(env, param, param$1, color) {
	  var yy2 = param$1[1];
	  var xx2 = param$1[0];
	  var yy1 = param[1];
	  var xx1 = param[0];
	  var dx = xx2 - xx1;
	  var dy = yy2 - yy1;
	  var mag = Curry._2(Utils.PUtils[/* distf */22], /* tuple */[
	        xx1,
	        yy1
	      ], /* tuple */[
	        xx2,
	        yy2
	      ]);
	  var radius = env[/* style */13][/* strokeWeight */1] / 2;
	  var xthing = dy / mag * radius;
	  var ything = -dx / mag * radius;
	  var x1 = xx2 + xthing;
	  var y1 = yy2 + ything;
	  var x2 = xx1 + xthing;
	  var y2 = yy1 + ything;
	  var x3 = xx2 - xthing;
	  var y3 = yy2 - ything;
	  var x4 = xx1 - xthing;
	  var y4 = yy1 - ything;
	  return addRectToGlobalBatch(env, /* tuple */[
	              x1,
	              y1
	            ], /* tuple */[
	              x2,
	              y2
	            ], /* tuple */[
	              x3,
	              y3
	            ], /* tuple */[
	              x4,
	              y4
	            ], color);
	}
	
	function drawArcInternal(env, param, radx, rady, start, stop, isPie, matrix, param$1) {
	  var yCenterOfCircle = param[1];
	  var xCenterOfCircle = param[0];
	  var noOfFans = ((radx + rady | 0) << 1) + 10 | 0;
	  maybeFlushBatch(env, /* None */0, Caml_int32.imul(noOfFans - 3 | 0, 3) + 3 | 0);
	  var pi = 4.0 * Math.atan(1.0);
	  var anglePerFan = 2 * pi / noOfFans;
	  var match_000 = param$1[/* r */0] / 255;
	  var match_001 = param$1[/* g */1] / 255;
	  var match_002 = param$1[/* b */2] / 255;
	  var b = match_002;
	  var g = match_001;
	  var r = match_000;
	  var verticesData = env[/* batch */10][/* vertexArray */0];
	  var elementData = env[/* batch */10][/* elementArray */1];
	  var set = WGLWebgl.Gl[/* Bigarray */36][/* set */4];
	  var get = WGLWebgl.Gl[/* Bigarray */36][/* get */3];
	  var vertexArrayOffset = env[/* batch */10][/* vertexPtr */2];
	  var elementArrayOffset = env[/* batch */10][/* elementPtr */3];
	  var start_i = isPie ? (start / anglePerFan | 0) - 2 | 0 : (start / anglePerFan | 0) - 1 | 0;
	  var stop_i = (stop / anglePerFan | 0) - 1 | 0;
	  for(var i = start_i; i <= stop_i; ++i){
	    var param$2;
	    if (isPie && (i - start_i | 0) === 0) {
	      param$2 = /* tuple */[
	        xCenterOfCircle,
	        yCenterOfCircle
	      ];
	    } else {
	      var angle = anglePerFan * (i + 1 | 0);
	      param$2 = /* tuple */[
	        xCenterOfCircle + Math.cos(angle) * radx,
	        yCenterOfCircle + Math.sin(angle) * rady
	      ];
	    }
	    var match = Matrix.matptmul(matrix, param$2);
	    var ii = Caml_int32.imul(i - start_i | 0, Common.vertexSize) + vertexArrayOffset | 0;
	    Curry._3(set, verticesData, ii + 0 | 0, match[0]);
	    Curry._3(set, verticesData, ii + 1 | 0, match[1]);
	    Curry._3(set, verticesData, ii + 2 | 0, r);
	    Curry._3(set, verticesData, ii + 3 | 0, g);
	    Curry._3(set, verticesData, ii + 4 | 0, b);
	    Curry._3(set, verticesData, ii + 5 | 0, 1.0);
	    Curry._3(set, verticesData, ii + 6 | 0, 0.0);
	    Curry._3(set, verticesData, ii + 7 | 0, 0.0);
	    if ((i - start_i | 0) < 3) {
	      Curry._3(set, elementData, (i - start_i | 0) + elementArrayOffset | 0, Caml_int32.div(ii, Common.vertexSize));
	    } else {
	      var jj = (Caml_int32.imul((i - start_i | 0) - 3 | 0, 3) + elementArrayOffset | 0) + 3 | 0;
	      Curry._3(set, elementData, jj, Caml_int32.div(vertexArrayOffset, Common.vertexSize));
	      Curry._3(set, elementData, jj + 1 | 0, Curry._2(get, elementData, jj - 1 | 0));
	      Curry._3(set, elementData, jj + 2 | 0, Caml_int32.div(ii, Common.vertexSize));
	    }
	  }
	  env[/* batch */10][/* vertexPtr */2] = env[/* batch */10][/* vertexPtr */2] + Caml_int32.imul(noOfFans, Common.vertexSize) | 0;
	  env[/* batch */10][/* elementPtr */3] = (env[/* batch */10][/* elementPtr */3] + Caml_int32.imul((stop_i - start_i | 0) - 3 | 0, 3) | 0) + 3 | 0;
	  return /* () */0;
	}
	
	function drawEllipseInternal(env, center, radx, rady, matrix, c) {
	  return drawArcInternal(env, center, radx, rady, 0, Utils.PConstants[/* tau */6], /* false */0, matrix, c);
	}
	
	function drawArcStroke(env, param, radx, rady, start, stop, isOpen, isPie, matrix, strokeColor, strokeWidth) {
	  var yCenterOfCircle = param[1];
	  var xCenterOfCircle = param[0];
	  var match_000 = strokeColor[/* r */0] / 255;
	  var match_001 = strokeColor[/* g */1] / 255;
	  var match_002 = strokeColor[/* b */2] / 255;
	  var b = match_002;
	  var g = match_001;
	  var r = match_000;
	  var verticesData = env[/* batch */10][/* vertexArray */0];
	  var elementData = env[/* batch */10][/* elementArray */1];
	  var set = WGLWebgl.Gl[/* Bigarray */36][/* set */4];
	  var noOfFans = ((radx + rady | 0) << 1) + 10 | 0;
	  maybeFlushBatch(env, /* None */0, Caml_int32.imul(noOfFans - 3 | 0, 3) + 3 | 0);
	  var pi = 4.0 * Math.atan(1.0);
	  var anglePerFan = 2 * pi / noOfFans;
	  var start_i = (start / anglePerFan | 0) - 1 | 0;
	  var stop_i = (stop / anglePerFan | 0) - 1 | 0;
	  var prevEl = /* None */0;
	  var halfwidth = strokeWidth / 2;
	  for(var i = start_i; i <= stop_i; ++i){
	    var angle = anglePerFan * (i + 1 | 0);
	    var param_000 = xCenterOfCircle + Math.cos(angle) * (radx - halfwidth);
	    var param_001 = yCenterOfCircle + Math.sin(angle) * (rady - halfwidth);
	    var param$1 = /* tuple */[
	      param_000,
	      param_001
	    ];
	    var match = Matrix.matptmul(matrix, param$1);
	    var param_000$1 = xCenterOfCircle + Math.cos(angle) * (radx + halfwidth);
	    var param_001$1 = yCenterOfCircle + Math.sin(angle) * (rady + halfwidth);
	    var param$2 = /* tuple */[
	      param_000$1,
	      param_001$1
	    ];
	    var match$1 = Matrix.matptmul(matrix, param$2);
	    var ii = env[/* batch */10][/* vertexPtr */2];
	    Curry._3(set, verticesData, ii + 0 | 0, match[0]);
	    Curry._3(set, verticesData, ii + 1 | 0, match[1]);
	    Curry._3(set, verticesData, ii + 2 | 0, r);
	    Curry._3(set, verticesData, ii + 3 | 0, g);
	    Curry._3(set, verticesData, ii + 4 | 0, b);
	    Curry._3(set, verticesData, ii + 5 | 0, 1.0);
	    Curry._3(set, verticesData, ii + 6 | 0, 0.0);
	    Curry._3(set, verticesData, ii + 7 | 0, 0.0);
	    var ii$1 = ii + Common.vertexSize | 0;
	    Curry._3(set, verticesData, ii$1 + 0 | 0, match$1[0]);
	    Curry._3(set, verticesData, ii$1 + 1 | 0, match$1[1]);
	    Curry._3(set, verticesData, ii$1 + 2 | 0, r);
	    Curry._3(set, verticesData, ii$1 + 3 | 0, g);
	    Curry._3(set, verticesData, ii$1 + 4 | 0, b);
	    Curry._3(set, verticesData, ii$1 + 5 | 0, 1.0);
	    Curry._3(set, verticesData, ii$1 + 6 | 0, 0.0);
	    Curry._3(set, verticesData, ii$1 + 7 | 0, 0.0);
	    env[/* batch */10][/* vertexPtr */2] = env[/* batch */10][/* vertexPtr */2] + (Common.vertexSize << 1) | 0;
	    var currOuter = Caml_int32.div(ii$1, Common.vertexSize);
	    var currInner = Caml_int32.div(ii$1, Common.vertexSize) - 1 | 0;
	    var currEl = /* Some */[/* tuple */[
	        currInner,
	        currOuter
	      ]];
	    var match$2 = prevEl;
	    if (match$2) {
	      var match$3 = match$2[0];
	      var prevInner = match$3[0];
	      var elementArrayOffset = env[/* batch */10][/* elementPtr */3];
	      Curry._3(set, elementData, elementArrayOffset, prevInner);
	      Curry._3(set, elementData, elementArrayOffset + 1 | 0, match$3[1]);
	      Curry._3(set, elementData, elementArrayOffset + 2 | 0, currOuter);
	      Curry._3(set, elementData, elementArrayOffset + 3 | 0, currOuter);
	      Curry._3(set, elementData, elementArrayOffset + 4 | 0, prevInner);
	      Curry._3(set, elementData, elementArrayOffset + 5 | 0, currInner);
	      env[/* batch */10][/* elementPtr */3] = env[/* batch */10][/* elementPtr */3] + 6 | 0;
	      prevEl = currEl;
	    } else {
	      prevEl = currEl;
	    }
	  }
	  if (isOpen) {
	    return 0;
	  } else {
	    var param_000$2 = xCenterOfCircle + Math.cos(start) * radx;
	    var param_001$2 = yCenterOfCircle + Math.sin(start) * rady;
	    var param$3 = /* tuple */[
	      param_000$2,
	      param_001$2
	    ];
	    var match$4 = Matrix.matptmul(matrix, param$3);
	    var startY = match$4[1];
	    var startX = match$4[0];
	    var param_000$3 = xCenterOfCircle + Math.cos(stop) * radx;
	    var param_001$3 = yCenterOfCircle + Math.sin(stop) * rady;
	    var param$4 = /* tuple */[
	      param_000$3,
	      param_001$3
	    ];
	    var match$5 = Matrix.matptmul(matrix, param$4);
	    var stopY = match$5[1];
	    var stopX = match$5[0];
	    if (isPie) {
	      drawLineInternal(env, /* tuple */[
	            startX,
	            startY
	          ], /* tuple */[
	            xCenterOfCircle,
	            yCenterOfCircle
	          ], strokeColor);
	      drawLineInternal(env, /* tuple */[
	            stopX,
	            stopY
	          ], /* tuple */[
	            xCenterOfCircle,
	            yCenterOfCircle
	          ], strokeColor);
	      drawEllipseInternal(env, Matrix.matptmul(matrix, /* tuple */[
	                xCenterOfCircle,
	                yCenterOfCircle
	              ]), halfwidth, halfwidth, matrix, strokeColor);
	    } else {
	      drawLineInternal(env, /* tuple */[
	            startX,
	            startY
	          ], /* tuple */[
	            stopX,
	            stopY
	          ], strokeColor);
	    }
	    drawEllipseInternal(env, /* tuple */[
	          startX,
	          startY
	        ], halfwidth, halfwidth, matrix, strokeColor);
	    return drawEllipseInternal(env, /* tuple */[
	                stopX,
	                stopY
	              ], halfwidth, halfwidth, matrix, strokeColor);
	  }
	}
	
	function loadImage(env, filename) {
	  var imageRef = [/* None */0];
	  Curry._4(WGLWebgl.Gl[/* loadImage */30], filename, /* None */0, function (imageData) {
	        if (imageData) {
	          var img = imageData[0];
	          var textureBuffer = Curry._1(WGLWebgl.Gl[/* createTexture */16], env[/* gl */2]);
	          var height = Curry._1(WGLWebgl.Gl[/* getImageHeight */29], img);
	          var width = Curry._1(WGLWebgl.Gl[/* getImageWidth */28], img);
	          imageRef[0] = /* Some */[/* record */[
	              /* textureBuffer */textureBuffer,
	              /* img */img,
	              /* height */height,
	              /* width */width
	            ]];
	          Curry._3(WGLWebgl.Gl[/* bindTexture */18], env[/* gl */2], RGLConstants.texture_2d, textureBuffer);
	          Curry._4(WGLWebgl.Gl[/* texImage2DWithImage */31], env[/* gl */2], RGLConstants.texture_2d, 0, img);
	          Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_mag_filter, RGLConstants.linear);
	          return Curry._4(WGLWebgl.Gl[/* texParameteri */19], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_min_filter, RGLConstants.linear);
	        } else {
	          return Pervasives.failwith("Could not load image '" + (filename + "'."));
	        }
	      }, /* () */0);
	  return imageRef;
	}
	
	function drawImageInternal(param, x, y, subx, suby, subw, subh, env) {
	  var width = param[/* width */3];
	  var height = param[/* height */2];
	  var textureBuffer = param[/* textureBuffer */0];
	  maybeFlushBatch(env, /* Some */[textureBuffer], 6);
	  var match_000 = subx / width;
	  var match_001 = suby / height;
	  var match_002 = subw / width;
	  var match_003 = subh / height;
	  var fsubh = match_003;
	  var fsubw = match_002;
	  var fsuby = match_001;
	  var fsubx = match_000;
	  var match_000$1 = x + subw | 0;
	  var match_001$1 = y + subh | 0;
	  var match_001$2 = y + subh | 0;
	  var match_000$2 = x + subw | 0;
	  var set = WGLWebgl.Gl[/* Bigarray */36][/* set */4];
	  var ii = env[/* batch */10][/* vertexPtr */2];
	  var vertexArray = env[/* batch */10][/* vertexArray */0];
	  Curry._3(set, vertexArray, ii + 0 | 0, match_000$1);
	  Curry._3(set, vertexArray, ii + 1 | 0, match_001$1);
	  Curry._3(set, vertexArray, ii + 2 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 3 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 4 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 5 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 6 | 0, fsubx + fsubw);
	  Curry._3(set, vertexArray, ii + 7 | 0, fsuby + fsubh);
	  Curry._3(set, vertexArray, ii + 8 | 0, x);
	  Curry._3(set, vertexArray, ii + 9 | 0, match_001$2);
	  Curry._3(set, vertexArray, ii + 10 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 11 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 12 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 13 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 14 | 0, fsubx);
	  Curry._3(set, vertexArray, ii + 15 | 0, fsuby + fsubh);
	  Curry._3(set, vertexArray, ii + 16 | 0, match_000$2);
	  Curry._3(set, vertexArray, ii + 17 | 0, y);
	  Curry._3(set, vertexArray, ii + 18 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 19 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 20 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 21 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 22 | 0, fsubx + fsubw);
	  Curry._3(set, vertexArray, ii + 23 | 0, fsuby);
	  Curry._3(set, vertexArray, ii + 24 | 0, x);
	  Curry._3(set, vertexArray, ii + 25 | 0, y);
	  Curry._3(set, vertexArray, ii + 26 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 27 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 28 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 29 | 0, 0.0);
	  Curry._3(set, vertexArray, ii + 30 | 0, fsubx);
	  Curry._3(set, vertexArray, ii + 31 | 0, fsuby);
	  var jj = env[/* batch */10][/* elementPtr */3];
	  var elementArray = env[/* batch */10][/* elementArray */1];
	  Curry._3(set, elementArray, jj, Caml_int32.div(ii, Common.vertexSize));
	  Curry._3(set, elementArray, jj + 1 | 0, Caml_int32.div(ii, Common.vertexSize) + 1 | 0);
	  Curry._3(set, elementArray, jj + 2 | 0, Caml_int32.div(ii, Common.vertexSize) + 2 | 0);
	  Curry._3(set, elementArray, jj + 3 | 0, Caml_int32.div(ii, Common.vertexSize) + 1 | 0);
	  Curry._3(set, elementArray, jj + 4 | 0, Caml_int32.div(ii, Common.vertexSize) + 2 | 0);
	  Curry._3(set, elementArray, jj + 5 | 0, Caml_int32.div(ii, Common.vertexSize) + 3 | 0);
	  env[/* batch */10][/* vertexPtr */2] = ii + (Common.vertexSize << 2) | 0;
	  env[/* batch */10][/* elementPtr */3] = jj + 6 | 0;
	  env[/* batch */10][/* currTex */4] = /* Some */[textureBuffer];
	  return /* () */0;
	}
	
	function resetSize(env, width, height) {
	  env[/* size */18][/* width */1] = width;
	  env[/* size */18][/* height */0] = height;
	  Curry._5(WGLWebgl.Gl[/* viewport */38], env[/* gl */2], 0, 0, width, height);
	  Curry._5(WGLWebgl.Gl[/* clearColor */5], env[/* gl */2], 0, 0, 0, 1);
	  Curry._7(WGLWebgl.Gl[/* Mat4 */44][/* ortho */6], env[/* camera */0][/* projectionMatrix */0], 0, width, height, 0, 0, 1);
	  return Curry._3(WGLWebgl.Gl[/* uniformMatrix4fv */45], env[/* gl */2], env[/* pMatrixUniform */8], env[/* camera */0][/* projectionMatrix */0]);
	}
	
	exports.getProgram           = getProgram;
	exports.createCanvas         = createCanvas;
	exports.drawGeometry         = drawGeometry;
	exports.flushGlobalBatch     = flushGlobalBatch;
	exports.maybeFlushBatch      = maybeFlushBatch;
	exports.toColorFloat         = toColorFloat;
	exports.addRectToGlobalBatch = addRectToGlobalBatch;
	exports.drawTriangleInternal = drawTriangleInternal;
	exports.drawLineInternal     = drawLineInternal;
	exports.drawArcInternal      = drawArcInternal;
	exports.drawEllipseInternal  = drawEllipseInternal;
	exports.drawArcStroke        = drawArcStroke;
	exports.loadImage            = loadImage;
	exports.drawImageInternal    = drawImageInternal;
	exports.resetSize            = resetSize;
	/* Utils Not a pure module */


/***/ },
/* 37 */
/*!*******************************!*\
  !*** ./lib/js/src/shaders.js ***!
  \*******************************/
/***/ function(module, exports) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	
	var vertexShaderSource = "\n  attribute vec2 aVertexPosition;\n  attribute vec4 aVertexColor;\n  attribute vec2 aTextureCoord;\n\n  uniform mat4 uPMatrix;\n\n  varying vec4 vColor;\n  varying vec2 vTextureCoord;\n\n  void main(void) {\n    gl_Position = uPMatrix * vec4(aVertexPosition, 0.0, 1.0);\n    vColor = aVertexColor;\n    vTextureCoord = aTextureCoord;\n  }\n";
	
	var fragmentShaderSource = "\n  varying vec4 vColor;\n  varying vec2 vTextureCoord;\n\n  uniform sampler2D uSampler;\n\n  void main(void) {\n    gl_FragColor = texture2D(uSampler, vTextureCoord) + vColor;\n  }\n";
	
	exports.vertexShaderSource   = vertexShaderSource;
	exports.fragmentShaderSource = fragmentShaderSource;
	/* No side effect */


/***/ },
/* 38 */
/*!*************************************!*\
  !*** ./lib/js/src/drawfunctions.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var Font         = __webpack_require__(/*! ./font */ 39);
	var Curry        = __webpack_require__(/*! bs-platform/lib/js/curry */ 1);
	var Utils        = __webpack_require__(/*! ./utils */ 4);
	var Matrix       = __webpack_require__(/*! ./matrix */ 32);
	var WGLWebgl     = __webpack_require__(/*! reasongl-web/lib/js/src/wGLWebgl */ 33);
	var Glhelpers    = __webpack_require__(/*! ./glhelpers */ 36);
	var Pervasives   = __webpack_require__(/*! bs-platform/lib/js/pervasives */ 8);
	var RGLConstants = __webpack_require__(/*! reasongl-interface/lib/js/src/rGLConstants */ 35);
	
	function width(env) {
	  return env[/* size */18][/* width */1];
	}
	
	function height(env) {
	  return env[/* size */18][/* height */0];
	}
	
	function mouse(env) {
	  return env[/* mouse */12][/* pos */0];
	}
	
	function pmouse(env) {
	  return env[/* mouse */12][/* prevPos */1];
	}
	
	function mousePressed(env) {
	  return env[/* mouse */12][/* pressed */2];
	}
	
	function keyCode(env) {
	  return env[/* keyboard */11][/* keyCode */0];
	}
	
	function translate(dx, dy, env) {
	  return Matrix.matmatmul(env[/* matrix */16], Matrix.createTranslation(dx, dy));
	}
	
	function rotate(theta, env) {
	  return Matrix.matmatmul(env[/* matrix */16], Matrix.createRotation(theta));
	}
	
	function fill(c, env) {
	  var init = env[/* style */13];
	  env[/* style */13] = /* record */[
	    /* strokeColor */init[/* strokeColor */0],
	    /* strokeWeight */init[/* strokeWeight */1],
	    /* fillColor : Some */[c]
	  ];
	  return /* () */0;
	}
	
	function noFill(env) {
	  var init = env[/* style */13];
	  env[/* style */13] = /* record */[
	    /* strokeColor */init[/* strokeColor */0],
	    /* strokeWeight */init[/* strokeWeight */1],
	    /* fillColor : None */0
	  ];
	  return /* () */0;
	}
	
	function stroke(color, env) {
	  var init = env[/* style */13];
	  env[/* style */13] = /* record */[
	    /* strokeColor : Some */[color],
	    /* strokeWeight */init[/* strokeWeight */1],
	    /* fillColor */init[/* fillColor */2]
	  ];
	  return /* () */0;
	}
	
	function noStroke(env) {
	  var init = env[/* style */13];
	  env[/* style */13] = /* record */[
	    /* strokeColor : None */0,
	    /* strokeWeight */init[/* strokeWeight */1],
	    /* fillColor */init[/* fillColor */2]
	  ];
	  return /* () */0;
	}
	
	function strokeWeight(weight, env) {
	  var init = env[/* style */13];
	  env[/* style */13] = /* record */[
	    /* strokeColor */init[/* strokeColor */0],
	    /* strokeWeight */weight,
	    /* fillColor */init[/* fillColor */2]
	  ];
	  return /* () */0;
	}
	
	function pushStyle(env) {
	  env[/* styleStack */14] = /* :: */[
	    env[/* style */13],
	    env[/* styleStack */14]
	  ];
	  return /* () */0;
	}
	
	function popStyle(env) {
	  var match = env[/* styleStack */14];
	  if (match) {
	    env[/* style */13] = match[0];
	    env[/* styleStack */14] = match[1];
	    return /* () */0;
	  } else {
	    return Pervasives.failwith("Too many `popStyle` without enough `pushStyle`.");
	  }
	}
	
	function frameRate(env) {
	  return env[/* frame */15][/* rate */1];
	}
	
	function frameCount(env) {
	  return env[/* frame */15][/* count */0];
	}
	
	function size(width, height, env) {
	  Curry._3(WGLWebgl.Gl[/* Window */2][/* setWindowSize */3], env[/* window */1], width, height);
	  return Glhelpers.resetSize(env, width, height);
	}
	
	function resizeable(resizeable$1, env) {
	  env[/* size */18][/* resizeable */2] = resizeable$1;
	  return /* () */0;
	}
	
	function image(img, x, y, env) {
	  var match = img[0];
	  if (match) {
	    var i = match[0];
	    return Glhelpers.drawImageInternal(i, x, y, 0, 0, i[/* width */3], i[/* height */2], env);
	  } else {
	    console.log("image not ready yet, just doing nothing :D");
	    return /* () */0;
	  }
	}
	
	function clear(env) {
	  return Curry._2(WGLWebgl.Gl[/* clear */39], env[/* gl */2], RGLConstants.color_buffer_bit | RGLConstants.depth_buffer_bit);
	}
	
	function linef(p1, p2, env) {
	  var match = env[/* style */13][/* strokeColor */0];
	  if (match) {
	    var partial_arg = env[/* matrix */16];
	    var transform = function (param) {
	      return Matrix.matptmul(partial_arg, param);
	    };
	    var match_000 = Curry._1(transform, p1);
	    var match_001 = Curry._1(transform, p2);
	    var match$1 = match_001;
	    var yy2 = match$1[1];
	    var xx2 = match$1[0];
	    var match$2 = match_000;
	    var yy1 = match$2[1];
	    var xx1 = match$2[0];
	    var dx = xx2 - xx1;
	    var dy = yy2 - yy1;
	    var mag = Curry._2(Utils.PUtils[/* distf */22], /* tuple */[
	          xx1,
	          yy1
	        ], /* tuple */[
	          xx2,
	          yy2
	        ]);
	    var radius = env[/* style */13][/* strokeWeight */1] / 2;
	    var xthing = dy / mag * radius;
	    var ything = -dx / mag * radius;
	    var x1 = xx2 + xthing;
	    var y1 = yy2 + ything;
	    var x2 = xx1 + xthing;
	    var y2 = yy1 + ything;
	    var x3 = xx2 - xthing;
	    var y3 = yy2 - ything;
	    var x4 = xx1 - xthing;
	    var y4 = yy1 - ything;
	    return Glhelpers.addRectToGlobalBatch(env, /* tuple */[
	                x1,
	                y1
	              ], /* tuple */[
	                x2,
	                y2
	              ], /* tuple */[
	                x3,
	                y3
	              ], /* tuple */[
	                x4,
	                y4
	              ], match[0]);
	  } else {
	    return /* () */0;
	  }
	}
	
	function line(param, param$1, env) {
	  return linef(/* tuple */[
	              param[0],
	              param[1]
	            ], /* tuple */[
	              param$1[0],
	              param$1[1]
	            ], env);
	}
	
	function ellipsef(center, rx, ry, env) {
	  var match = env[/* style */13][/* fillColor */2];
	  if (match) {
	    Glhelpers.drawEllipseInternal(env, center, rx, ry, env[/* matrix */16], match[0]);
	  }
	  var match$1 = env[/* style */13][/* strokeColor */0];
	  if (match$1) {
	    return Glhelpers.drawArcStroke(env, center, rx, ry, 0, Utils.PConstants[/* tau */6], /* false */0, /* false */0, env[/* matrix */16], match$1[0], env[/* style */13][/* strokeWeight */1]);
	  } else {
	    return /* () */0;
	  }
	}
	
	function ellipse(param, rx, ry, env) {
	  return ellipsef(/* tuple */[
	              param[0],
	              param[1]
	            ], rx, ry, env);
	}
	
	function quadf(p1, p2, p3, p4, env) {
	  var partial_arg = env[/* matrix */16];
	  var transform = function (param) {
	    return Matrix.matptmul(partial_arg, param);
	  };
	  var match_000 = Curry._1(transform, p1);
	  var match_001 = Curry._1(transform, p2);
	  var match_002 = Curry._1(transform, p3);
	  var match_003 = Curry._1(transform, p4);
	  var p4$1 = match_003;
	  var p3$1 = match_002;
	  var p2$1 = match_001;
	  var p1$1 = match_000;
	  var match = env[/* style */13][/* fillColor */2];
	  if (match) {
	    Glhelpers.addRectToGlobalBatch(env, p3$1, p4$1, p2$1, p1$1, match[0]);
	  }
	  var match$1 = env[/* style */13][/* strokeColor */0];
	  if (match$1) {
	    var color = match$1[0];
	    linef(p1$1, p2$1, env);
	    linef(p2$1, p3$1, env);
	    linef(p3$1, p4$1, env);
	    linef(p4$1, p1$1, env);
	    var r = env[/* style */13][/* strokeWeight */1] / 2;
	    Glhelpers.drawEllipseInternal(env, p1$1, r, r, Matrix.identity, color);
	    Glhelpers.drawEllipseInternal(env, p2$1, r, r, Matrix.identity, color);
	    Glhelpers.drawEllipseInternal(env, p3$1, r, r, Matrix.identity, color);
	    return Glhelpers.drawEllipseInternal(env, p4$1, r, r, Matrix.identity, color);
	  } else {
	    return /* () */0;
	  }
	}
	
	function quad(param, param$1, param$2, param$3, env) {
	  return quadf(/* tuple */[
	              param[0],
	              param[1]
	            ], /* tuple */[
	              param$1[0],
	              param$1[1]
	            ], /* tuple */[
	              param$2[0],
	              param$2[1]
	            ], /* tuple */[
	              param$3[0],
	              param$3[1]
	            ], env);
	}
	
	function rectf(x, y, width, height, env) {
	  return quadf(/* tuple */[
	              x,
	              y
	            ], /* tuple */[
	              x + width,
	              y
	            ], /* tuple */[
	              x + width,
	              y + height
	            ], /* tuple */[
	              x,
	              y + height
	            ], env);
	}
	
	var rect = rectf;
	
	function bezier(param, param$1, param$2, param$3, env) {
	  var yy4 = param$3[1];
	  var xx4 = param$3[0];
	  var yy3 = param$2[1];
	  var xx3 = param$2[0];
	  var yy2 = param$1[1];
	  var xx2 = param$1[0];
	  var yy1 = param[1];
	  var xx1 = param[0];
	  var bezier_point = function (t) {
	    return /* tuple */[
	            Math.pow(1 - t, 3) * xx1 + 3 * Math.pow(1 - t, 2) * t * xx2 + 3 * (1 - t) * Math.pow(t, 2) * xx3 + Math.pow(t, 3) * xx4,
	            Math.pow(1 - t, 3) * yy1 + 3 * Math.pow(1 - t, 2) * t * yy2 + 3 * (1 - t) * Math.pow(t, 2) * yy3 + Math.pow(t, 3) * yy4
	          ];
	  };
	  for(var i = 0; i <= 99; ++i){
	    linef(bezier_point(i / 100.0), bezier_point((i + 1 | 0) / 100.0), env);
	  }
	  return /* () */0;
	}
	
	function pixelf(x, y, color, env) {
	  var w = env[/* style */13][/* strokeWeight */1];
	  return Glhelpers.addRectToGlobalBatch(env, /* tuple */[
	              x + w,
	              y + w
	            ], /* tuple */[
	              x,
	              y + w
	            ], /* tuple */[
	              x + w,
	              y
	            ], /* tuple */[
	              x,
	              y
	            ], color);
	}
	
	var pixel = pixelf;
	
	function trianglef(p1, p2, p3, env) {
	  var partial_arg = env[/* matrix */16];
	  var transform = function (param) {
	    return Matrix.matptmul(partial_arg, param);
	  };
	  var match_000 = Curry._1(transform, p1);
	  var match_001 = Curry._1(transform, p2);
	  var match_002 = Curry._1(transform, p3);
	  var p3$1 = match_002;
	  var p2$1 = match_001;
	  var p1$1 = match_000;
	  var match = env[/* style */13][/* fillColor */2];
	  if (match) {
	    Glhelpers.drawTriangleInternal(env, p1$1, p2$1, p3$1, match[0]);
	  }
	  var match$1 = env[/* style */13][/* strokeColor */0];
	  if (match$1) {
	    var color = match$1[0];
	    linef(p1$1, p2$1, env);
	    linef(p2$1, p3$1, env);
	    linef(p3$1, p1$1, env);
	    var r = env[/* style */13][/* strokeWeight */1] / 2;
	    Glhelpers.drawEllipseInternal(env, p1$1, r, r, Matrix.identity, color);
	    Glhelpers.drawEllipseInternal(env, p2$1, r, r, Matrix.identity, color);
	    return Glhelpers.drawEllipseInternal(env, p3$1, r, r, Matrix.identity, color);
	  } else {
	    return /* () */0;
	  }
	}
	
	function triangle(param, param$1, param$2, env) {
	  return trianglef(/* tuple */[
	              param[0],
	              param[1]
	            ], /* tuple */[
	              param$1[0],
	              param$1[1]
	            ], /* tuple */[
	              param$2[0],
	              param$2[1]
	            ], env);
	}
	
	function arcf(centerPt, rx, ry, start, stop, isOpen, isPie, env) {
	  var match = env[/* style */13][/* fillColor */2];
	  if (match) {
	    Glhelpers.drawArcInternal(env, centerPt, rx, ry, start, stop, isPie, env[/* matrix */16], match[0]);
	  }
	  var match$1 = env[/* style */13][/* strokeColor */0];
	  if (match$1) {
	    return Glhelpers.drawArcStroke(env, centerPt, rx, ry, start, stop, isOpen, isPie, env[/* matrix */16], match$1[0], env[/* style */13][/* strokeWeight */1]);
	  } else {
	    return /* () */0;
	  }
	}
	
	function arc(param, rx, ry, start, stop, isOpen, isPie, env) {
	  return arcf(/* tuple */[
	              param[0],
	              param[1]
	            ], rx, ry, start, stop, isOpen, isPie, env);
	}
	
	function loadFont(filename, env) {
	  return Curry._2(Font.Font[/* parseFontFormat */8], env, filename);
	}
	
	function text(fnt, str, x, y, env) {
	  return Curry._5(Font.Font[/* drawString */11], env, fnt, str, x, y);
	}
	
	function background(color, env) {
	  var w = env[/* size */18][/* width */1];
	  var h = env[/* size */18][/* height */0];
	  return Glhelpers.addRectToGlobalBatch(env, /* tuple */[
	              w,
	              h
	            ], /* tuple */[
	              0,
	              h
	            ], /* tuple */[
	              w,
	              0
	            ], /* tuple */[
	              0,
	              0
	            ], color);
	}
	
	var P = /* module */[
	  /* width */width,
	  /* height */height,
	  /* mouse */mouse,
	  /* pmouse */pmouse,
	  /* mousePressed */mousePressed,
	  /* keyCode */keyCode,
	  /* translate */translate,
	  /* rotate */rotate,
	  /* fill */fill,
	  /* noFill */noFill,
	  /* stroke */stroke,
	  /* noStroke */noStroke,
	  /* strokeWeight */strokeWeight,
	  /* pushStyle */pushStyle,
	  /* popStyle */popStyle,
	  /* frameRate */frameRate,
	  /* frameCount */frameCount,
	  /* size */size,
	  /* resizeable */resizeable,
	  /* loadImage */Glhelpers.loadImage,
	  /* image */image,
	  /* clear */clear,
	  /* linef */linef,
	  /* line */line,
	  /* ellipsef */ellipsef,
	  /* ellipse */ellipse,
	  /* quadf */quadf,
	  /* quad */quad,
	  /* rectf */rectf,
	  /* rect */rect,
	  /* bezier */bezier,
	  /* pixelf */pixelf,
	  /* pixel */pixel,
	  /* trianglef */trianglef,
	  /* triangle */triangle,
	  /* arcf */arcf,
	  /* arc */arc,
	  /* loadFont */loadFont,
	  /* text */text,
	  /* background */background
	];
	
	exports.P = P;
	/* Font Not a pure module */


/***/ },
/* 39 */
/*!****************************!*\
  !*** ./lib/js/src/font.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	// Generated by BUCKLESCRIPT VERSION 1.6.1, PLEASE EDIT WITH CARE
	'use strict';
	
	var $$Map       = __webpack_require__(/*! bs-platform/lib/js/map */ 40);
	var List        = __webpack_require__(/*! bs-platform/lib/js/list */ 5);
	var Curry       = __webpack_require__(/*! bs-platform/lib/js/curry */ 1);
	var Utils       = __webpack_require__(/*! ./utils */ 4);
	var Common      = __webpack_require__(/*! ./common */ 19);
	var $$String    = __webpack_require__(/*! bs-platform/lib/js/string */ 20);
	var Caml_obj    = __webpack_require__(/*! bs-platform/lib/js/caml_obj */ 6);
	var WGLWebgl    = __webpack_require__(/*! reasongl-web/lib/js/src/wGLWebgl */ 33);
	var Glhelpers   = __webpack_require__(/*! ./glhelpers */ 36);
	var Pervasives  = __webpack_require__(/*! bs-platform/lib/js/pervasives */ 8);
	var Caml_format = __webpack_require__(/*! bs-platform/lib/js/caml_format */ 11);
	
	var compare = Caml_obj.caml_compare;
	
	var IntMap = $$Map.Make(/* module */[/* compare */compare]);
	
	function compare$1(param, param$1) {
	  var a1 = param[0];
	  var first = Caml_obj.caml_compare(a1, param$1[0]);
	  if (first !== 0) {
	    return first;
	  } else {
	    return Caml_obj.caml_compare(a1, param$1[1]);
	  }
	}
	
	var IntPairMap = $$Map.Make(/* module */[/* compare */compare$1]);
	
	function parse_num(_stream, _acc) {
	  while(true) {
	    var acc = _acc;
	    var stream = _stream;
	    var match = Curry._1(Common.Stream[/* peekch */1], stream);
	    var exit = 0;
	    var c;
	    if (match) {
	      var c$1 = match[0];
	      if (c$1 >= 48) {
	        if (c$1 >= 58) {
	          exit = 1;
	        } else {
	          c = c$1;
	          exit = 2;
	        }
	      } else if (c$1 !== 45) {
	        exit = 1;
	      } else {
	        c = c$1;
	        exit = 2;
	      }
	    } else {
	      exit = 1;
	    }
	    switch (exit) {
	      case 1 : 
	          try {
	            return /* tuple */[
	                    stream,
	                    Caml_format.caml_int_of_string(acc)
	                  ];
	          }
	          catch (exn){
	            return Pervasives.failwith("Could not parse number [" + (acc + "]."));
	          }
	          break;
	      case 2 : 
	          _acc = Common.append_char(acc, c);
	          _stream = Curry._1(Common.Stream[/* popch */2], stream);
	          continue ;
	          
	    }
	  };
	}
	
	function parse_num$1(stream) {
	  return parse_num(stream, "");
	}
	
	function parse_string(_stream, _acc) {
	  while(true) {
	    var acc = _acc;
	    var stream = _stream;
	    var match = Curry._1(Common.Stream[/* peekch */1], stream);
	    if (match) {
	      var c = match[0];
	      if (c !== 34) {
	        _acc = Common.append_char(acc, c);
	        _stream = Curry._1(Common.Stream[/* popch */2], stream);
	        continue ;
	        
	      } else {
	        return /* tuple */[
	                Curry._1(Common.Stream[/* popch */2], stream),
	                acc
	              ];
	      }
	    } else {
	      return Pervasives.failwith("Unterminated string.");
	    }
	  };
	}
	
	function parse_string$1(stream) {
	  return parse_string(stream, "");
	}
	
	function pop_line(_stream) {
	  while(true) {
	    var stream = _stream;
	    var match = Curry._1(Common.Stream[/* peekch */1], stream);
	    if (match) {
	      if (match[0] !== 10) {
	        _stream = Curry._1(Common.Stream[/* popch */2], stream);
	        continue ;
	        
	      } else {
	        return Curry._1(Common.Stream[/* popch */2], stream);
	      }
	    } else {
	      return Pervasives.failwith("could not pop line");
	    }
	  };
	}
	
	function parse_char_fmt(_stream, _num, _map) {
	  while(true) {
	    var map = _map;
	    var num = _num;
	    var stream = _stream;
	    if (num < 0) {
	      return /* tuple */[
	              stream,
	              map
	            ];
	    } else {
	      var stream$1 = Curry._2(Common.Stream[/* switch */5], stream, "char id=");
	      var match = parse_num(stream$1, "");
	      var stream$2 = Curry._2(Common.Stream[/* switch */5], match[0], " x=");
	      var match$1 = parse_num(stream$2, "");
	      var stream$3 = Curry._2(Common.Stream[/* switch */5], match$1[0], " y=");
	      var match$2 = parse_num(stream$3, "");
	      var stream$4 = Curry._2(Common.Stream[/* switch */5], match$2[0], " width=");
	      var match$3 = parse_num(stream$4, "");
	      var stream$5 = Curry._2(Common.Stream[/* switch */5], match$3[0], " height=");
	      var match$4 = parse_num(stream$5, "");
	      var stream$6 = Curry._2(Common.Stream[/* switch */5], match$4[0], " xoffset=");
	      var match$5 = parse_num(stream$6, "");
	      var stream$7 = Curry._2(Common.Stream[/* switch */5], match$5[0], " yoffset=");
	      var match$6 = parse_num(stream$7, "");
	      var stream$8 = Curry._2(Common.Stream[/* switch */5], match$6[0], " xadvance=");
	      var match$7 = parse_num(stream$8, "");
	      var stream$9 = pop_line(match$7[0]);
	      var new_map = Curry._3(IntMap[/* add */3], match[1], /* record */[
	            /* x */match$1[1],
	            /* y */match$2[1],
	            /* width */match$3[1],
	            /* height */match$4[1],
	            /* xoffset */match$5[1],
	            /* yoffset */match$6[1],
	            /* xadvance */match$7[1]
	          ], map);
	      _map = new_map;
	      _num = num - 1 | 0;
	      _stream = stream$9;
	      continue ;
	      
	    }
	  };
	}
	
	function parse_kern_fmt(_stream, _num, _map) {
	  while(true) {
	    var map = _map;
	    var num = _num;
	    var stream = _stream;
	    if (num) {
	      var stream$1 = Curry._2(Common.Stream[/* switch */5], stream, "kerning first=");
	      var match = parse_num(stream$1, "");
	      var stream$2 = Curry._2(Common.Stream[/* switch */5], match[0], " second=");
	      var match$1 = parse_num(stream$2, "");
	      var stream$3 = Curry._2(Common.Stream[/* switch */5], match$1[0], " amount=");
	      var match$2 = parse_num(stream$3, "");
	      var stream$4 = pop_line(match$2[0]);
	      var new_map = Curry._3(IntPairMap[/* add */3], /* tuple */[
	            match[1],
	            match$1[1]
	          ], match$2[1], map);
	      _map = new_map;
	      _num = num - 1 | 0;
	      _stream = stream$4;
	      continue ;
	      
	    } else {
	      return /* tuple */[
	              stream,
	              map
	            ];
	    }
	  };
	}
	
	function replaceFilename(path, filename) {
	  var splitStr = Curry._2(Utils.PUtils[/* split */38], path, /* "/" */47);
	  var revLst = List.rev(splitStr);
	  var newRevLst = revLst ? /* :: */[
	      filename,
	      revLst[1]
	    ] : /* [] */0;
	  var newLst = List.rev(newRevLst);
	  return $$String.concat("/", newLst);
	}
	
	function parseFontFormat(env, path) {
	  var ret = [/* None */0];
	  Curry._2(WGLWebgl.Gl[/* File */1][/* readFile */0], path, function (str) {
	        var stream = Curry._1(Common.Stream[/* create */7], str + "\n");
	        var stream$1 = pop_line(pop_line(stream));
	        var stream$2 = Curry._2(Common.Stream[/* switch */5], stream$1, 'page id=0 file="');
	        var match = parse_string(stream$2, "");
	        var stream$3 = pop_line(match[0]);
	        var stream$4 = Curry._2(Common.Stream[/* switch */5], stream$3, "chars count=");
	        var match$1 = parse_num(stream$4, "");
	        var stream$5 = pop_line(match$1[0]);
	        var match$2 = parse_char_fmt(stream$5, match$1[1], IntMap[/* empty */0]);
	        var stream$6 = Curry._2(Common.Stream[/* switch */5], match$2[0], "kernings count=");
	        var match$3 = parse_num(stream$6, "");
	        var stream$7 = pop_line(match$3[0]);
	        var match$4 = parse_kern_fmt(stream$7, match$3[1], IntPairMap[/* empty */0]);
	        var img_filename = replaceFilename(path, match[1]);
	        ret[0] = /* Some */[/* record */[
	            /* chars */match$2[1],
	            /* kerning */match$4[1],
	            /* image */Glhelpers.loadImage(env, img_filename)
	          ]];
	        return /* () */0;
	      });
	  return ret;
	}
	
	function getChar(fnt, ch) {
	  try {
	    return Curry._2(IntMap[/* find */21], ch, fnt[/* chars */0]);
	  }
	  catch (exn){
	    return Pervasives.failwith("Could not find character " + (Pervasives.string_of_int(ch) + " in font."));
	  }
	}
	
	function drawChar(env, fnt, image, ch, last, x, y) {
	  var c = getChar(fnt, ch);
	  var kernAmount;
	  if (last) {
	    try {
	      kernAmount = Curry._2(IntPairMap[/* find */21], /* tuple */[
	            last[0],
	            ch
	          ], fnt[/* kerning */1]);
	    }
	    catch (exn){
	      kernAmount = 0;
	    }
	  } else {
	    kernAmount = 0;
	  }
	  if (image) {
	    Glhelpers.drawImageInternal(image[0], (x + c[/* xoffset */4] | 0) + kernAmount | 0, y + c[/* yoffset */5] | 0, c[/* x */0], c[/* y */1], c[/* width */2], c[/* height */3], env);
	    return c[/* xadvance */6] + kernAmount | 0;
	  } else {
	    return c[/* xadvance */6] + kernAmount | 0;
	  }
	}
	
	function drawString(env, fnt, str, x, y) {
	  var match = fnt[0];
	  if (match) {
	    var fnt$1 = match[0];
	    var match$1 = fnt$1[/* image */2][0];
	    if (match$1) {
	      var img = match$1[0];
	      var offset = [x];
	      var lastChar = [/* None */0];
	      return $$String.iter(function (c) {
	                  var advance = drawChar(env, fnt$1, /* Some */[img], c, lastChar[0], offset[0], y);
	                  offset[0] = offset[0] + advance | 0;
	                  lastChar[0] = /* Some */[c];
	                  return /* () */0;
	                }, str);
	    } else {
	      console.log("loading font.");
	      return /* () */0;
	    }
	  } else {
	    return /* () */0;
	  }
	}
	
	function calcStringWidth(env, fnt, str) {
	  var offset = [0];
	  var lastChar = [/* None */0];
	  $$String.iter(function (c) {
	        offset[0] = offset[0] + drawChar(env, fnt, /* None */0, c, lastChar[0], offset[0], 0) | 0;
	        lastChar[0] = /* Some */[c];
	        return /* () */0;
	      }, str);
	  return offset[0];
	}
	
	var Font = /* module */[
	  /* IntMap */IntMap,
	  /* IntPairMap */IntPairMap,
	  /* parse_num */parse_num$1,
	  /* parse_string */parse_string$1,
	  /* pop_line */pop_line,
	  /* parse_char_fmt */parse_char_fmt,
	  /* parse_kern_fmt */parse_kern_fmt,
	  /* replaceFilename */replaceFilename,
	  /* parseFontFormat */parseFontFormat,
	  /* getChar */getChar,
	  /* drawChar */drawChar,
	  /* drawString */drawString,
	  /* calcStringWidth */calcStringWidth
	];
	
	exports.Font = Font;
	/* IntMap Not a pure module */


/***/ },
/* 40 */
/*!*************************************!*\
  !*** ./~/bs-platform/lib/js/map.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Curry                   = __webpack_require__(/*! ./curry */ 1);
	var Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions */ 3);
	
	function Make(funarg) {
	  var height = function (param) {
	    if (param) {
	      return param[4];
	    } else {
	      return 0;
	    }
	  };
	  var create = function (l, x, d, r) {
	    var hl = height(l);
	    var hr = height(r);
	    return /* Node */[
	            l,
	            x,
	            d,
	            r,
	            hl >= hr ? hl + 1 | 0 : hr + 1 | 0
	          ];
	  };
	  var singleton = function (x, d) {
	    return /* Node */[
	            /* Empty */0,
	            x,
	            d,
	            /* Empty */0,
	            1
	          ];
	  };
	  var bal = function (l, x, d, r) {
	    var hl = l ? l[4] : 0;
	    var hr = r ? r[4] : 0;
	    if (hl > (hr + 2 | 0)) {
	      if (l) {
	        var lr = l[3];
	        var ld = l[2];
	        var lv = l[1];
	        var ll = l[0];
	        if (height(ll) >= height(lr)) {
	          return create(ll, lv, ld, create(lr, x, d, r));
	        } else if (lr) {
	          return create(create(ll, lv, ld, lr[0]), lr[1], lr[2], create(lr[3], x, d, r));
	        } else {
	          throw [
	                Caml_builtin_exceptions.invalid_argument,
	                "Map.bal"
	              ];
	        }
	      } else {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "Map.bal"
	            ];
	      }
	    } else if (hr > (hl + 2 | 0)) {
	      if (r) {
	        var rr = r[3];
	        var rd = r[2];
	        var rv = r[1];
	        var rl = r[0];
	        if (height(rr) >= height(rl)) {
	          return create(create(l, x, d, rl), rv, rd, rr);
	        } else if (rl) {
	          return create(create(l, x, d, rl[0]), rl[1], rl[2], create(rl[3], rv, rd, rr));
	        } else {
	          throw [
	                Caml_builtin_exceptions.invalid_argument,
	                "Map.bal"
	              ];
	        }
	      } else {
	        throw [
	              Caml_builtin_exceptions.invalid_argument,
	              "Map.bal"
	            ];
	      }
	    } else {
	      return /* Node */[
	              l,
	              x,
	              d,
	              r,
	              hl >= hr ? hl + 1 | 0 : hr + 1 | 0
	            ];
	    }
	  };
	  var is_empty = function (param) {
	    if (param) {
	      return /* false */0;
	    } else {
	      return /* true */1;
	    }
	  };
	  var add = function (x, data, param) {
	    if (param) {
	      var r = param[3];
	      var d = param[2];
	      var v = param[1];
	      var l = param[0];
	      var c = Curry._2(funarg[/* compare */0], x, v);
	      if (c) {
	        if (c < 0) {
	          return bal(add(x, data, l), v, d, r);
	        } else {
	          return bal(l, v, d, add(x, data, r));
	        }
	      } else {
	        return /* Node */[
	                l,
	                x,
	                data,
	                r,
	                param[4]
	              ];
	      }
	    } else {
	      return /* Node */[
	              /* Empty */0,
	              x,
	              data,
	              /* Empty */0,
	              1
	            ];
	    }
	  };
	  var find = function (x, _param) {
	    while(true) {
	      var param = _param;
	      if (param) {
	        var c = Curry._2(funarg[/* compare */0], x, param[1]);
	        if (c) {
	          _param = c < 0 ? param[0] : param[3];
	          continue ;
	          
	        } else {
	          return param[2];
	        }
	      } else {
	        throw Caml_builtin_exceptions.not_found;
	      }
	    };
	  };
	  var mem = function (x, _param) {
	    while(true) {
	      var param = _param;
	      if (param) {
	        var c = Curry._2(funarg[/* compare */0], x, param[1]);
	        if (c) {
	          _param = c < 0 ? param[0] : param[3];
	          continue ;
	          
	        } else {
	          return /* true */1;
	        }
	      } else {
	        return /* false */0;
	      }
	    };
	  };
	  var min_binding = function (_param) {
	    while(true) {
	      var param = _param;
	      if (param) {
	        var l = param[0];
	        if (l) {
	          _param = l;
	          continue ;
	          
	        } else {
	          return /* tuple */[
	                  param[1],
	                  param[2]
	                ];
	        }
	      } else {
	        throw Caml_builtin_exceptions.not_found;
	      }
	    };
	  };
	  var max_binding = function (_param) {
	    while(true) {
	      var param = _param;
	      if (param) {
	        var r = param[3];
	        if (r) {
	          _param = r;
	          continue ;
	          
	        } else {
	          return /* tuple */[
	                  param[1],
	                  param[2]
	                ];
	        }
	      } else {
	        throw Caml_builtin_exceptions.not_found;
	      }
	    };
	  };
	  var remove_min_binding = function (param) {
	    if (param) {
	      var l = param[0];
	      if (l) {
	        return bal(remove_min_binding(l), param[1], param[2], param[3]);
	      } else {
	        return param[3];
	      }
	    } else {
	      throw [
	            Caml_builtin_exceptions.invalid_argument,
	            "Map.remove_min_elt"
	          ];
	    }
	  };
	  var remove = function (x, param) {
	    if (param) {
	      var r = param[3];
	      var d = param[2];
	      var v = param[1];
	      var l = param[0];
	      var c = Curry._2(funarg[/* compare */0], x, v);
	      if (c) {
	        if (c < 0) {
	          return bal(remove(x, l), v, d, r);
	        } else {
	          return bal(l, v, d, remove(x, r));
	        }
	      } else {
	        var t1 = l;
	        var t2 = r;
	        if (t1) {
	          if (t2) {
	            var match = min_binding(t2);
	            return bal(t1, match[0], match[1], remove_min_binding(t2));
	          } else {
	            return t1;
	          }
	        } else {
	          return t2;
	        }
	      }
	    } else {
	      return /* Empty */0;
	    }
	  };
	  var iter = function (f, _param) {
	    while(true) {
	      var param = _param;
	      if (param) {
	        iter(f, param[0]);
	        Curry._2(f, param[1], param[2]);
	        _param = param[3];
	        continue ;
	        
	      } else {
	        return /* () */0;
	      }
	    };
	  };
	  var map = function (f, param) {
	    if (param) {
	      var l$prime = map(f, param[0]);
	      var d$prime = Curry._1(f, param[2]);
	      var r$prime = map(f, param[3]);
	      return /* Node */[
	              l$prime,
	              param[1],
	              d$prime,
	              r$prime,
	              param[4]
	            ];
	    } else {
	      return /* Empty */0;
	    }
	  };
	  var mapi = function (f, param) {
	    if (param) {
	      var v = param[1];
	      var l$prime = mapi(f, param[0]);
	      var d$prime = Curry._2(f, v, param[2]);
	      var r$prime = mapi(f, param[3]);
	      return /* Node */[
	              l$prime,
	              v,
	              d$prime,
	              r$prime,
	              param[4]
	            ];
	    } else {
	      return /* Empty */0;
	    }
	  };
	  var fold = function (f, _m, _accu) {
	    while(true) {
	      var accu = _accu;
	      var m = _m;
	      if (m) {
	        _accu = Curry._3(f, m[1], m[2], fold(f, m[0], accu));
	        _m = m[3];
	        continue ;
	        
	      } else {
	        return accu;
	      }
	    };
	  };
	  var for_all = function (p, _param) {
	    while(true) {
	      var param = _param;
	      if (param) {
	        if (Curry._2(p, param[1], param[2])) {
	          if (for_all(p, param[0])) {
	            _param = param[3];
	            continue ;
	            
	          } else {
	            return /* false */0;
	          }
	        } else {
	          return /* false */0;
	        }
	      } else {
	        return /* true */1;
	      }
	    };
	  };
	  var exists = function (p, _param) {
	    while(true) {
	      var param = _param;
	      if (param) {
	        if (Curry._2(p, param[1], param[2])) {
	          return /* true */1;
	        } else if (exists(p, param[0])) {
	          return /* true */1;
	        } else {
	          _param = param[3];
	          continue ;
	          
	        }
	      } else {
	        return /* false */0;
	      }
	    };
	  };
	  var add_min_binding = function (k, v, param) {
	    if (param) {
	      return bal(add_min_binding(k, v, param[0]), param[1], param[2], param[3]);
	    } else {
	      return singleton(k, v);
	    }
	  };
	  var add_max_binding = function (k, v, param) {
	    if (param) {
	      return bal(param[0], param[1], param[2], add_max_binding(k, v, param[3]));
	    } else {
	      return singleton(k, v);
	    }
	  };
	  var join = function (l, v, d, r) {
	    if (l) {
	      if (r) {
	        var rh = r[4];
	        var lh = l[4];
	        if (lh > (rh + 2 | 0)) {
	          return bal(l[0], l[1], l[2], join(l[3], v, d, r));
	        } else if (rh > (lh + 2 | 0)) {
	          return bal(join(l, v, d, r[0]), r[1], r[2], r[3]);
	        } else {
	          return create(l, v, d, r);
	        }
	      } else {
	        return add_max_binding(v, d, l);
	      }
	    } else {
	      return add_min_binding(v, d, r);
	    }
	  };
	  var concat = function (t1, t2) {
	    if (t1) {
	      if (t2) {
	        var match = min_binding(t2);
	        return join(t1, match[0], match[1], remove_min_binding(t2));
	      } else {
	        return t1;
	      }
	    } else {
	      return t2;
	    }
	  };
	  var concat_or_join = function (t1, v, d, t2) {
	    if (d) {
	      return join(t1, v, d[0], t2);
	    } else {
	      return concat(t1, t2);
	    }
	  };
	  var split = function (x, param) {
	    if (param) {
	      var r = param[3];
	      var d = param[2];
	      var v = param[1];
	      var l = param[0];
	      var c = Curry._2(funarg[/* compare */0], x, v);
	      if (c) {
	        if (c < 0) {
	          var match = split(x, l);
	          return /* tuple */[
	                  match[0],
	                  match[1],
	                  join(match[2], v, d, r)
	                ];
	        } else {
	          var match$1 = split(x, r);
	          return /* tuple */[
	                  join(l, v, d, match$1[0]),
	                  match$1[1],
	                  match$1[2]
	                ];
	        }
	      } else {
	        return /* tuple */[
	                l,
	                /* Some */[d],
	                r
	              ];
	      }
	    } else {
	      return /* tuple */[
	              /* Empty */0,
	              /* None */0,
	              /* Empty */0
	            ];
	    }
	  };
	  var merge = function (f, s1, s2) {
	    var exit = 0;
	    if (s1) {
	      var v1 = s1[1];
	      if (s1[4] >= height(s2)) {
	        var match = split(v1, s2);
	        return concat_or_join(merge(f, s1[0], match[0]), v1, Curry._3(f, v1, /* Some */[s1[2]], match[1]), merge(f, s1[3], match[2]));
	      } else {
	        exit = 1;
	      }
	    } else if (s2) {
	      exit = 1;
	    } else {
	      return /* Empty */0;
	    }
	    if (exit === 1) {
	      if (s2) {
	        var v2 = s2[1];
	        var match$1 = split(v2, s1);
	        return concat_or_join(merge(f, match$1[0], s2[0]), v2, Curry._3(f, v2, match$1[1], /* Some */[s2[2]]), merge(f, match$1[2], s2[3]));
	      } else {
	        throw [
	              Caml_builtin_exceptions.assert_failure,
	              [
	                "map.ml",
	                270,
	                10
	              ]
	            ];
	      }
	    }
	    
	  };
	  var filter = function (p, param) {
	    if (param) {
	      var d = param[2];
	      var v = param[1];
	      var l$prime = filter(p, param[0]);
	      var pvd = Curry._2(p, v, d);
	      var r$prime = filter(p, param[3]);
	      if (pvd) {
	        return join(l$prime, v, d, r$prime);
	      } else {
	        return concat(l$prime, r$prime);
	      }
	    } else {
	      return /* Empty */0;
	    }
	  };
	  var partition = function (p, param) {
	    if (param) {
	      var d = param[2];
	      var v = param[1];
	      var match = partition(p, param[0]);
	      var lf = match[1];
	      var lt = match[0];
	      var pvd = Curry._2(p, v, d);
	      var match$1 = partition(p, param[3]);
	      var rf = match$1[1];
	      var rt = match$1[0];
	      if (pvd) {
	        return /* tuple */[
	                join(lt, v, d, rt),
	                concat(lf, rf)
	              ];
	      } else {
	        return /* tuple */[
	                concat(lt, rt),
	                join(lf, v, d, rf)
	              ];
	      }
	    } else {
	      return /* tuple */[
	              /* Empty */0,
	              /* Empty */0
	            ];
	    }
	  };
	  var cons_enum = function (_m, _e) {
	    while(true) {
	      var e = _e;
	      var m = _m;
	      if (m) {
	        _e = /* More */[
	          m[1],
	          m[2],
	          m[3],
	          e
	        ];
	        _m = m[0];
	        continue ;
	        
	      } else {
	        return e;
	      }
	    };
	  };
	  var compare = function (cmp, m1, m2) {
	    var _e1 = cons_enum(m1, /* End */0);
	    var _e2 = cons_enum(m2, /* End */0);
	    while(true) {
	      var e2 = _e2;
	      var e1 = _e1;
	      if (e1) {
	        if (e2) {
	          var c = Curry._2(funarg[/* compare */0], e1[0], e2[0]);
	          if (c !== 0) {
	            return c;
	          } else {
	            var c$1 = Curry._2(cmp, e1[1], e2[1]);
	            if (c$1 !== 0) {
	              return c$1;
	            } else {
	              _e2 = cons_enum(e2[2], e2[3]);
	              _e1 = cons_enum(e1[2], e1[3]);
	              continue ;
	              
	            }
	          }
	        } else {
	          return 1;
	        }
	      } else if (e2) {
	        return -1;
	      } else {
	        return 0;
	      }
	    };
	  };
	  var equal = function (cmp, m1, m2) {
	    var _e1 = cons_enum(m1, /* End */0);
	    var _e2 = cons_enum(m2, /* End */0);
	    while(true) {
	      var e2 = _e2;
	      var e1 = _e1;
	      if (e1) {
	        if (e2) {
	          if (Curry._2(funarg[/* compare */0], e1[0], e2[0])) {
	            return /* false */0;
	          } else if (Curry._2(cmp, e1[1], e2[1])) {
	            _e2 = cons_enum(e2[2], e2[3]);
	            _e1 = cons_enum(e1[2], e1[3]);
	            continue ;
	            
	          } else {
	            return /* false */0;
	          }
	        } else {
	          return /* false */0;
	        }
	      } else if (e2) {
	        return /* false */0;
	      } else {
	        return /* true */1;
	      }
	    };
	  };
	  var cardinal = function (param) {
	    if (param) {
	      return (cardinal(param[0]) + 1 | 0) + cardinal(param[3]) | 0;
	    } else {
	      return 0;
	    }
	  };
	  var bindings_aux = function (_accu, _param) {
	    while(true) {
	      var param = _param;
	      var accu = _accu;
	      if (param) {
	        _param = param[0];
	        _accu = /* :: */[
	          /* tuple */[
	            param[1],
	            param[2]
	          ],
	          bindings_aux(accu, param[3])
	        ];
	        continue ;
	        
	      } else {
	        return accu;
	      }
	    };
	  };
	  var bindings = function (s) {
	    return bindings_aux(/* [] */0, s);
	  };
	  return [
	          /* Empty */0,
	          is_empty,
	          mem,
	          add,
	          singleton,
	          remove,
	          merge,
	          compare,
	          equal,
	          iter,
	          fold,
	          for_all,
	          exists,
	          filter,
	          partition,
	          cardinal,
	          bindings,
	          min_binding,
	          max_binding,
	          min_binding,
	          split,
	          find,
	          map,
	          mapi
	        ];
	}
	
	exports.Make = Make;
	/* No side effect */


/***/ }
/******/ ]);
//# sourceMappingURL=app.js.map